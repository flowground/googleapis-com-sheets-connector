{
    "type": "object",
    "properties": {
        "spreadsheetId": {
            "required": true,
            "type": "string"
        },
        "access_token": {
            "type": "string"
        },
        "alt": {
            "type": "string",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "default": "json"
        },
        "callback": {
            "type": "string"
        },
        "fields": {
            "type": "string"
        },
        "key": {
            "type": "string"
        },
        "oauth_token": {
            "type": "string"
        },
        "prettyPrint": {
            "type": "boolean",
            "default": true
        },
        "quotaUser": {
            "type": "string"
        },
        "uploadType": {
            "type": "string"
        },
        "upload_protocol": {
            "type": "string"
        },
        "requestBody": {
            "description": "The request for updating any aspect of a spreadsheet.",
            "properties": {
                "includeSpreadsheetInResponse": {
                    "description": "Determines if the update response should include the spreadsheet\nresource.",
                    "type": "boolean"
                },
                "requests": {
                    "description": "A list of updates to apply to the spreadsheet.\nRequests will be applied in the order they are specified.\nIf any request is not valid, no requests will be applied.",
                    "items": {
                        "description": "A single kind of update to apply to a spreadsheet.",
                        "properties": {
                            "addBanding": {
                                "description": "Adds a new banded range",
                                "properties": {
                                    "bandedRange": {
                                        "description": "The banded range to add. The bandedRangeId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a range that already exists.)",
                                        "properties": {
                                            "bandedRangeId": {
                                                "description": "The id of the banded range.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "columnProperties": {
                                                "description": "Properties for column bands. These properties are applied on a column-\nby-column basis throughout all the columns in the range. At least one of\nrow_properties or column_properties must be specified.",
                                                "properties": {
                                                    "firstBandColor": {
                                                        "description": "The first color that is alternating. (Required)",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "footerColor": {
                                                        "description": "The color of the last row or column. If this field is not set, the last\nrow or column will be filled with either first_band_color or\nsecond_band_color, depending on the color of the previous row or\ncolumn.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "headerColor": {
                                                        "description": "The color of the first row or column. If this field is set, the first\nrow or column will be filled with this color and the colors will\nalternate between first_band_color and second_band_color starting\nfrom the second row or column. Otherwise, the first row or column will be\nfilled with first_band_color and the colors will proceed to alternate\nas they normally would.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "secondBandColor": {
                                                        "description": "The second color that is alternating. (Required)",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "range": {
                                                "description": "The range over which these properties are applied.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "rowProperties": {
                                                "description": "Properties for row bands. These properties are applied on a row-by-row\nbasis throughout all the rows in the range. At least one of\nrow_properties or column_properties must be specified.",
                                                "properties": {
                                                    "firstBandColor": {
                                                        "description": "The first color that is alternating. (Required)",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "footerColor": {
                                                        "description": "The color of the last row or column. If this field is not set, the last\nrow or column will be filled with either first_band_color or\nsecond_band_color, depending on the color of the previous row or\ncolumn.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "headerColor": {
                                                        "description": "The color of the first row or column. If this field is set, the first\nrow or column will be filled with this color and the colors will\nalternate between first_band_color and second_band_color starting\nfrom the second row or column. Otherwise, the first row or column will be\nfilled with first_band_color and the colors will proceed to alternate\nas they normally would.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "secondBandColor": {
                                                        "description": "The second color that is alternating. (Required)",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "addChart": {
                                "description": "Adds a chart.",
                                "properties": {
                                    "chart": {
                                        "description": "The chart that should be added to the spreadsheet, including the position\nwhere it should be placed. The chartId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a chart that already exists.)",
                                        "properties": {
                                            "chartId": {
                                                "description": "The ID of the chart.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "position": {
                                                "description": "The position of the chart.",
                                                "properties": {
                                                    "newSheet": {
                                                        "description": "If true, the embedded object is put on a new sheet whose ID\nis chosen for you. Used only when writing.",
                                                        "type": "boolean"
                                                    },
                                                    "overlayPosition": {
                                                        "description": "The position at which the object is overlaid on top of a grid.",
                                                        "properties": {
                                                            "anchorCell": {
                                                                "description": "The cell the object is anchored to.",
                                                                "properties": {
                                                                    "columnIndex": {
                                                                        "description": "The column index of the coordinate.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "rowIndex": {
                                                                        "description": "The row index of the coordinate.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "sheetId": {
                                                                        "description": "The sheet this coordinate is on.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "heightPixels": {
                                                                "description": "The height of the object, in pixels. Defaults to 371.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "offsetXPixels": {
                                                                "description": "The horizontal offset, in pixels, that the object is offset\nfrom the anchor cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "offsetYPixels": {
                                                                "description": "The vertical offset, in pixels, that the object is offset\nfrom the anchor cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "widthPixels": {
                                                                "description": "The width of the object, in pixels. Defaults to 600.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this is on. Set only if the embedded object\nis on its own sheet. Must be non-negative.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "The specification of the chart.",
                                                "properties": {
                                                    "altText": {
                                                        "description": "The alternative text that describes the chart.  This is often used\nfor accessibility.",
                                                        "type": "string"
                                                    },
                                                    "backgroundColor": {
                                                        "description": "The background color of the entire chart.\nNot applicable to Org charts.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "basicChart": {
                                                        "description": "A basic chart specification, can be one of many kinds of charts.\nSee BasicChartType for the list of all\ncharts this supports.",
                                                        "properties": {
                                                            "axis": {
                                                                "description": "The axis on the chart.",
                                                                "items": {
                                                                    "description": "An axis of the chart.\nA chart may not have more than one axis per\naxis position.",
                                                                    "properties": {
                                                                        "format": {
                                                                            "description": "The format of the title.\nOnly valid if the axis is not associated with the domain.",
                                                                            "properties": {
                                                                                "bold": {
                                                                                    "description": "True if the text is bold.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "fontFamily": {
                                                                                    "description": "The font family.",
                                                                                    "type": "string"
                                                                                },
                                                                                "fontSize": {
                                                                                    "description": "The size of the font.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "foregroundColor": {
                                                                                    "description": "The foreground color of the text.",
                                                                                    "properties": {
                                                                                        "alpha": {
                                                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "blue": {
                                                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "green": {
                                                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "red": {
                                                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "italic": {
                                                                                    "description": "True if the text is italicized.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "strikethrough": {
                                                                                    "description": "True if the text has a strikethrough.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "underline": {
                                                                                    "description": "True if the text is underlined.",
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "position": {
                                                                            "description": "The position of this axis.",
                                                                            "enum": [
                                                                                "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
                                                                                "BOTTOM_AXIS",
                                                                                "LEFT_AXIS",
                                                                                "RIGHT_AXIS"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "title": {
                                                                            "description": "The title of this axis. If set, this overrides any title inferred\nfrom headers of the data.",
                                                                            "type": "string"
                                                                        },
                                                                        "titleTextPosition": {
                                                                            "description": "The axis title text position.",
                                                                            "properties": {
                                                                                "horizontalAlignment": {
                                                                                    "description": "Horizontal alignment setting for the piece of text.",
                                                                                    "enum": [
                                                                                        "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                                        "LEFT",
                                                                                        "CENTER",
                                                                                        "RIGHT"
                                                                                    ],
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "chartType": {
                                                                "description": "The type of the chart.",
                                                                "enum": [
                                                                    "BASIC_CHART_TYPE_UNSPECIFIED",
                                                                    "BAR",
                                                                    "LINE",
                                                                    "AREA",
                                                                    "COLUMN",
                                                                    "SCATTER",
                                                                    "COMBO",
                                                                    "STEPPED_AREA"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "compareMode": {
                                                                "description": "The behavior of tooltips and data highlighting when hovering on data and\nchart area.",
                                                                "enum": [
                                                                    "BASIC_CHART_COMPARE_MODE_UNSPECIFIED",
                                                                    "DATUM",
                                                                    "CATEGORY"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "domains": {
                                                                "description": "The domain of data this is charting.\nOnly a single domain is supported.",
                                                                "items": {
                                                                    "description": "The domain of a chart.\nFor example, if charting stock prices over time, this would be the date.",
                                                                    "properties": {
                                                                        "domain": {
                                                                            "description": "The data of the domain. For example, if charting stock prices over time,\nthis is the data representing the dates.",
                                                                            "properties": {
                                                                                "sourceRange": {
                                                                                    "description": "The source ranges of the data.",
                                                                                    "properties": {
                                                                                        "sources": {
                                                                                            "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                            "items": {
                                                                                                "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                "properties": {
                                                                                                    "endColumnIndex": {
                                                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "endRowIndex": {
                                                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "sheetId": {
                                                                                                        "description": "The sheet this range is on.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startColumnIndex": {
                                                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startRowIndex": {
                                                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "reversed": {
                                                                            "description": "True to reverse the order of the domain values (horizontal axis).",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "headerCount": {
                                                                "description": "The number of rows or columns in the data that are \"headers\".\nIf not set, Google Sheets will guess how many rows are headers based\non the data.\n\n(Note that BasicChartAxis.title may override the axis title\n inferred from the header values.)",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "interpolateNulls": {
                                                                "description": "If some values in a series are missing, gaps may appear in the chart (e.g,\nsegments of lines in a line chart will be missing).  To eliminate these\ngaps set this to true.\nApplies to Line, Area, and Combo charts.",
                                                                "type": "boolean"
                                                            },
                                                            "legendPosition": {
                                                                "description": "The position of the chart legend.",
                                                                "enum": [
                                                                    "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED",
                                                                    "BOTTOM_LEGEND",
                                                                    "LEFT_LEGEND",
                                                                    "RIGHT_LEGEND",
                                                                    "TOP_LEGEND",
                                                                    "NO_LEGEND"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "lineSmoothing": {
                                                                "description": "Gets whether all lines should be rendered smooth or straight by default.\nApplies to Line charts.",
                                                                "type": "boolean"
                                                            },
                                                            "series": {
                                                                "description": "The data this chart is visualizing.",
                                                                "items": {
                                                                    "description": "A single series of data in a chart.\nFor example, if charting stock prices over time, multiple series may exist,\none for the \"Open Price\", \"High Price\", \"Low Price\" and \"Close Price\".",
                                                                    "properties": {
                                                                        "color": {
                                                                            "description": "The color for elements (i.e. bars, lines, points) associated with this\nseries.  If empty, a default color is used.",
                                                                            "properties": {
                                                                                "alpha": {
                                                                                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "blue": {
                                                                                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "green": {
                                                                                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "red": {
                                                                                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "lineStyle": {
                                                                            "description": "The line style of this series. Valid only if the\nchartType is AREA,\nLINE, or SCATTER.\nCOMBO charts are also supported if the\nseries chart type is\nAREA or LINE.",
                                                                            "properties": {
                                                                                "type": {
                                                                                    "description": "The dash type of the line.",
                                                                                    "enum": [
                                                                                        "LINE_DASH_TYPE_UNSPECIFIED",
                                                                                        "INVISIBLE",
                                                                                        "CUSTOM",
                                                                                        "SOLID",
                                                                                        "DOTTED",
                                                                                        "MEDIUM_DASHED",
                                                                                        "MEDIUM_DASHED_DOTTED",
                                                                                        "LONG_DASHED",
                                                                                        "LONG_DASHED_DOTTED"
                                                                                    ],
                                                                                    "type": "string"
                                                                                },
                                                                                "width": {
                                                                                    "description": "The thickness of the line, in px.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "series": {
                                                                            "description": "The data being visualized in this chart series.",
                                                                            "properties": {
                                                                                "sourceRange": {
                                                                                    "description": "The source ranges of the data.",
                                                                                    "properties": {
                                                                                        "sources": {
                                                                                            "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                            "items": {
                                                                                                "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                "properties": {
                                                                                                    "endColumnIndex": {
                                                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "endRowIndex": {
                                                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "sheetId": {
                                                                                                        "description": "The sheet this range is on.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startColumnIndex": {
                                                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startRowIndex": {
                                                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "targetAxis": {
                                                                            "description": "The minor axis that will specify the range of values for this series.\nFor example, if charting stocks over time, the \"Volume\" series\nmay want to be pinned to the right with the prices pinned to the left,\nbecause the scale of trading volume is different than the scale of\nprices.\nIt is an error to specify an axis that isn't a valid minor axis\nfor the chart's type.",
                                                                            "enum": [
                                                                                "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
                                                                                "BOTTOM_AXIS",
                                                                                "LEFT_AXIS",
                                                                                "RIGHT_AXIS"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "type": {
                                                                            "description": "The type of this series. Valid only if the\nchartType is\nCOMBO.\nDifferent types will change the way the series is visualized.\nOnly LINE, AREA,\nand COLUMN are supported.",
                                                                            "enum": [
                                                                                "BASIC_CHART_TYPE_UNSPECIFIED",
                                                                                "BAR",
                                                                                "LINE",
                                                                                "AREA",
                                                                                "COLUMN",
                                                                                "SCATTER",
                                                                                "COMBO",
                                                                                "STEPPED_AREA"
                                                                            ],
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "stackedType": {
                                                                "description": "The stacked type for charts that support vertical stacking.\nApplies to Area, Bar, Column, Combo, and Stepped Area charts.",
                                                                "enum": [
                                                                    "BASIC_CHART_STACKED_TYPE_UNSPECIFIED",
                                                                    "NOT_STACKED",
                                                                    "STACKED",
                                                                    "PERCENT_STACKED"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "threeDimensional": {
                                                                "description": "True to make the chart 3D.\nApplies to Bar and Column charts.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "bubbleChart": {
                                                        "description": "A bubble chart specification.",
                                                        "properties": {
                                                            "bubbleBorderColor": {
                                                                "description": "The bubble border color.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "bubbleLabels": {
                                                                "description": "The data containing the bubble labels.  These do not need to be unique.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "bubbleMaxRadiusSize": {
                                                                "description": "The max radius size of the bubbles, in pixels.\nIf specified, the field must be a positive value.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "bubbleMinRadiusSize": {
                                                                "description": "The minimum radius size of the bubbles, in pixels.\nIf specific, the field must be a positive value.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "bubbleOpacity": {
                                                                "description": "The opacity of the bubbles between 0 and 1.0.\n0 is fully transparent and 1 is fully opaque.",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "bubbleSizes": {
                                                                "description": "The data contianing the bubble sizes.  Bubble sizes are used to draw\nthe bubbles at different sizes relative to each other.\nIf specified, group_ids must also be specified.  This field is\noptional.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "bubbleTextStyle": {
                                                                "description": "The format of the text inside the bubbles.\nUnderline and Strikethrough are not supported.",
                                                                "properties": {
                                                                    "bold": {
                                                                        "description": "True if the text is bold.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "fontFamily": {
                                                                        "description": "The font family.",
                                                                        "type": "string"
                                                                    },
                                                                    "fontSize": {
                                                                        "description": "The size of the font.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "foregroundColor": {
                                                                        "description": "The foreground color of the text.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "italic": {
                                                                        "description": "True if the text is italicized.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "strikethrough": {
                                                                        "description": "True if the text has a strikethrough.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "underline": {
                                                                        "description": "True if the text is underlined.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "domain": {
                                                                "description": "The data containing the bubble x-values.  These values locate the bubbles\nin the chart horizontally.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "groupIds": {
                                                                "description": "The data containing the bubble group IDs. All bubbles with the same group\nID are drawn in the same color. If bubble_sizes is specified then\nthis field must also be specified but may contain blank values.\nThis field is optional.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "legendPosition": {
                                                                "description": "Where the legend of the chart should be drawn.",
                                                                "enum": [
                                                                    "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED",
                                                                    "BOTTOM_LEGEND",
                                                                    "LEFT_LEGEND",
                                                                    "RIGHT_LEGEND",
                                                                    "TOP_LEGEND",
                                                                    "NO_LEGEND",
                                                                    "INSIDE_LEGEND"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "series": {
                                                                "description": "The data contianing the bubble y-values.  These values locate the bubbles\nin the chart vertically.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "candlestickChart": {
                                                        "description": "A candlestick chart specification.",
                                                        "properties": {
                                                            "data": {
                                                                "description": "The Candlestick chart data.\nOnly one CandlestickData is supported.",
                                                                "items": {
                                                                    "description": "The Candlestick chart data, each containing the low, open, close, and high\nvalues for a series.",
                                                                    "properties": {
                                                                        "closeSeries": {
                                                                            "description": "The range data (vertical axis) for the close/final value for each candle.\nThis is the top of the candle body.  If greater than the open value the\ncandle will be filled.  Otherwise the candle will be hollow.",
                                                                            "properties": {
                                                                                "data": {
                                                                                    "description": "The data of the CandlestickSeries.",
                                                                                    "properties": {
                                                                                        "sourceRange": {
                                                                                            "description": "The source ranges of the data.",
                                                                                            "properties": {
                                                                                                "sources": {
                                                                                                    "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                                    "items": {
                                                                                                        "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                        "properties": {
                                                                                                            "endColumnIndex": {
                                                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "endRowIndex": {
                                                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "sheetId": {
                                                                                                                "description": "The sheet this range is on.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "startColumnIndex": {
                                                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "startRowIndex": {
                                                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "highSeries": {
                                                                            "description": "The range data (vertical axis) for the high/maximum value for each\ncandle. This is the top of the candle's center line.",
                                                                            "properties": {
                                                                                "data": {
                                                                                    "description": "The data of the CandlestickSeries.",
                                                                                    "properties": {
                                                                                        "sourceRange": {
                                                                                            "description": "The source ranges of the data.",
                                                                                            "properties": {
                                                                                                "sources": {
                                                                                                    "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                                    "items": {
                                                                                                        "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                        "properties": {
                                                                                                            "endColumnIndex": {
                                                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "endRowIndex": {
                                                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "sheetId": {
                                                                                                                "description": "The sheet this range is on.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "startColumnIndex": {
                                                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "startRowIndex": {
                                                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "lowSeries": {
                                                                            "description": "The range data (vertical axis) for the low/minimum value for each candle.\nThis is the bottom of the candle's center line.",
                                                                            "properties": {
                                                                                "data": {
                                                                                    "description": "The data of the CandlestickSeries.",
                                                                                    "properties": {
                                                                                        "sourceRange": {
                                                                                            "description": "The source ranges of the data.",
                                                                                            "properties": {
                                                                                                "sources": {
                                                                                                    "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                                    "items": {
                                                                                                        "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                        "properties": {
                                                                                                            "endColumnIndex": {
                                                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "endRowIndex": {
                                                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "sheetId": {
                                                                                                                "description": "The sheet this range is on.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "startColumnIndex": {
                                                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "startRowIndex": {
                                                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "openSeries": {
                                                                            "description": "The range data (vertical axis) for the open/initial value for each\ncandle. This is the bottom of the candle body.  If less than the close\nvalue the candle will be filled.  Otherwise the candle will be hollow.",
                                                                            "properties": {
                                                                                "data": {
                                                                                    "description": "The data of the CandlestickSeries.",
                                                                                    "properties": {
                                                                                        "sourceRange": {
                                                                                            "description": "The source ranges of the data.",
                                                                                            "properties": {
                                                                                                "sources": {
                                                                                                    "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                                    "items": {
                                                                                                        "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                        "properties": {
                                                                                                            "endColumnIndex": {
                                                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "endRowIndex": {
                                                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "sheetId": {
                                                                                                                "description": "The sheet this range is on.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "startColumnIndex": {
                                                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            },
                                                                                                            "startRowIndex": {
                                                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                                "format": "int32",
                                                                                                                "type": "integer"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "domain": {
                                                                "description": "The domain data (horizontal axis) for the candlestick chart.  String data\nwill be treated as discrete labels, other data will be treated as\ncontinuous values.",
                                                                "properties": {
                                                                    "data": {
                                                                        "description": "The data of the CandlestickDomain.",
                                                                        "properties": {
                                                                            "sourceRange": {
                                                                                "description": "The source ranges of the data.",
                                                                                "properties": {
                                                                                    "sources": {
                                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                        "items": {
                                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                            "properties": {
                                                                                                "endColumnIndex": {
                                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                },
                                                                                                "endRowIndex": {
                                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                },
                                                                                                "sheetId": {
                                                                                                    "description": "The sheet this range is on.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                },
                                                                                                "startColumnIndex": {
                                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                },
                                                                                                "startRowIndex": {
                                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "reversed": {
                                                                        "description": "True to reverse the order of the domain values (horizontal axis).",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "fontName": {
                                                        "description": "The name of the font to use by default for all chart text (e.g. title,\naxis labels, legend).  If a font is specified for a specific part of the\nchart it will override this font name.",
                                                        "type": "string"
                                                    },
                                                    "hiddenDimensionStrategy": {
                                                        "description": "Determines how the charts will use hidden rows or columns.",
                                                        "enum": [
                                                            "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED",
                                                            "SKIP_HIDDEN_ROWS_AND_COLUMNS",
                                                            "SKIP_HIDDEN_ROWS",
                                                            "SKIP_HIDDEN_COLUMNS",
                                                            "SHOW_ALL"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "histogramChart": {
                                                        "description": "A histogram chart specification.",
                                                        "properties": {
                                                            "bucketSize": {
                                                                "description": "By default the bucket size (the range of values stacked in a single\ncolumn) is chosen automatically, but it may be overridden here.\nE.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc.\nCannot be negative.\nThis field is optional.",
                                                                "format": "double",
                                                                "type": "number"
                                                            },
                                                            "legendPosition": {
                                                                "description": "The position of the chart legend.",
                                                                "enum": [
                                                                    "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED",
                                                                    "BOTTOM_LEGEND",
                                                                    "LEFT_LEGEND",
                                                                    "RIGHT_LEGEND",
                                                                    "TOP_LEGEND",
                                                                    "NO_LEGEND",
                                                                    "INSIDE_LEGEND"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "outlierPercentile": {
                                                                "description": "The outlier percentile is used to ensure that outliers do not adversely\naffect the calculation of bucket sizes.  For example, setting an outlier\npercentile of 0.05 indicates that the top and bottom 5% of values when\ncalculating buckets.  The values are still included in the chart, they will\nbe added to the first or last buckets instead of their own buckets.\nMust be between 0.0 and 0.5.",
                                                                "format": "double",
                                                                "type": "number"
                                                            },
                                                            "series": {
                                                                "description": "The series for a histogram may be either a single series of values to be\nbucketed or multiple series, each of the same length, containing the name\nof the series followed by the values to be bucketed for that series.",
                                                                "items": {
                                                                    "description": "A histogram series containing the series color and data.",
                                                                    "properties": {
                                                                        "barColor": {
                                                                            "description": "The color of the column representing this series in each bucket.\nThis field is optional.",
                                                                            "properties": {
                                                                                "alpha": {
                                                                                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "blue": {
                                                                                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "green": {
                                                                                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "red": {
                                                                                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "data": {
                                                                            "description": "The data for this histogram series.",
                                                                            "properties": {
                                                                                "sourceRange": {
                                                                                    "description": "The source ranges of the data.",
                                                                                    "properties": {
                                                                                        "sources": {
                                                                                            "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                            "items": {
                                                                                                "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                "properties": {
                                                                                                    "endColumnIndex": {
                                                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "endRowIndex": {
                                                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "sheetId": {
                                                                                                        "description": "The sheet this range is on.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startColumnIndex": {
                                                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startRowIndex": {
                                                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "showItemDividers": {
                                                                "description": "Whether horizontal divider lines should be displayed between items in each\ncolumn.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "maximized": {
                                                        "description": "True to make a chart fill the entire space in which it's rendered with\nminimum padding.  False to use the default padding.\n(Not applicable to Geo and Org charts.)",
                                                        "type": "boolean"
                                                    },
                                                    "orgChart": {
                                                        "description": "An org chart specification.",
                                                        "properties": {
                                                            "labels": {
                                                                "description": "The data containing the labels for all the nodes in the chart.  Labels\nmust be unique.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "nodeColor": {
                                                                "description": "The color of the org chart nodes.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "nodeSize": {
                                                                "description": "The size of the org chart nodes.",
                                                                "enum": [
                                                                    "ORG_CHART_LABEL_SIZE_UNSPECIFIED",
                                                                    "SMALL",
                                                                    "MEDIUM",
                                                                    "LARGE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "parentLabels": {
                                                                "description": "The data containing the label of the parent for the corresponding node.\nA blank value indicates that the node has no parent and is a top-level\nnode.\nThis field is optional.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "selectedNodeColor": {
                                                                "description": "The color of the selected org chart nodes.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "tooltips": {
                                                                "description": "The data containing the tooltip for the corresponding node.  A blank value\nresults in no tooltip being displayed for the node.\nThis field is optional.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "pieChart": {
                                                        "description": "A pie chart specification.",
                                                        "properties": {
                                                            "domain": {
                                                                "description": "The data that covers the domain of the pie chart.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "legendPosition": {
                                                                "description": "Where the legend of the pie chart should be drawn.",
                                                                "enum": [
                                                                    "PIE_CHART_LEGEND_POSITION_UNSPECIFIED",
                                                                    "BOTTOM_LEGEND",
                                                                    "LEFT_LEGEND",
                                                                    "RIGHT_LEGEND",
                                                                    "TOP_LEGEND",
                                                                    "NO_LEGEND",
                                                                    "LABELED_LEGEND"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "pieHole": {
                                                                "description": "The size of the hole in the pie chart.",
                                                                "format": "double",
                                                                "type": "number"
                                                            },
                                                            "series": {
                                                                "description": "The data that covers the one and only series of the pie chart.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "threeDimensional": {
                                                                "description": "True if the pie is three dimensional.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "subtitle": {
                                                        "description": "The subtitle of the chart.",
                                                        "type": "string"
                                                    },
                                                    "subtitleTextFormat": {
                                                        "description": "The subtitle text format.\nStrikethrough and underline are not supported.",
                                                        "properties": {
                                                            "bold": {
                                                                "description": "True if the text is bold.",
                                                                "type": "boolean"
                                                            },
                                                            "fontFamily": {
                                                                "description": "The font family.",
                                                                "type": "string"
                                                            },
                                                            "fontSize": {
                                                                "description": "The size of the font.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "foregroundColor": {
                                                                "description": "The foreground color of the text.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "italic": {
                                                                "description": "True if the text is italicized.",
                                                                "type": "boolean"
                                                            },
                                                            "strikethrough": {
                                                                "description": "True if the text has a strikethrough.",
                                                                "type": "boolean"
                                                            },
                                                            "underline": {
                                                                "description": "True if the text is underlined.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "subtitleTextPosition": {
                                                        "description": "The subtitle text position.\nThis field is optional.",
                                                        "properties": {
                                                            "horizontalAlignment": {
                                                                "description": "Horizontal alignment setting for the piece of text.",
                                                                "enum": [
                                                                    "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                    "LEFT",
                                                                    "CENTER",
                                                                    "RIGHT"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "title": {
                                                        "description": "The title of the chart.",
                                                        "type": "string"
                                                    },
                                                    "titleTextFormat": {
                                                        "description": "The title text format.\nStrikethrough and underline are not supported.",
                                                        "properties": {
                                                            "bold": {
                                                                "description": "True if the text is bold.",
                                                                "type": "boolean"
                                                            },
                                                            "fontFamily": {
                                                                "description": "The font family.",
                                                                "type": "string"
                                                            },
                                                            "fontSize": {
                                                                "description": "The size of the font.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "foregroundColor": {
                                                                "description": "The foreground color of the text.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "italic": {
                                                                "description": "True if the text is italicized.",
                                                                "type": "boolean"
                                                            },
                                                            "strikethrough": {
                                                                "description": "True if the text has a strikethrough.",
                                                                "type": "boolean"
                                                            },
                                                            "underline": {
                                                                "description": "True if the text is underlined.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "titleTextPosition": {
                                                        "description": "The title text position.\nThis field is optional.",
                                                        "properties": {
                                                            "horizontalAlignment": {
                                                                "description": "Horizontal alignment setting for the piece of text.",
                                                                "enum": [
                                                                    "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                    "LEFT",
                                                                    "CENTER",
                                                                    "RIGHT"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "treemapChart": {
                                                        "description": "A treemap chart specification.",
                                                        "properties": {
                                                            "colorData": {
                                                                "description": "The data that determines the background color of each treemap data cell.\nThis field is optional. If not specified, size_data is used to\ndetermine background colors. If specified, the data is expected to be\nnumeric. color_scale will determine how the values in this data map to\ndata cell background colors.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "colorScale": {
                                                                "description": "The color scale for data cells in the treemap chart. Data cells are\nassigned colors based on their color values. These color values come from\ncolor_data, or from size_data if color_data is not specified.\nCells with color values less than or equal to min_value will\nhave minValueColor as their\nbackground color. Cells with color values greater than or equal to\nmax_value will have\nmaxValueColor as their background\ncolor. Cells with color values between min_value and max_value will\nhave background colors on a gradient between\nminValueColor and\nmaxValueColor, the midpoint of\nthe gradient being midValueColor.\nCells with missing or non-numeric color values will have\nnoDataColor as their background\ncolor.",
                                                                "properties": {
                                                                    "maxValueColor": {
                                                                        "description": "The background color for cells with a color value greater than or equal\nto maxValue. Defaults to #109618 if not\nspecified.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "midValueColor": {
                                                                        "description": "The background color for cells with a color value at the midpoint between\nminValue and\nmaxValue. Defaults to #efe6dc if not\nspecified.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "minValueColor": {
                                                                        "description": "The background color for cells with a color value less than or equal to\nminValue. Defaults to #dc3912 if not\nspecified.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "noDataColor": {
                                                                        "description": "The background color for cells that have no color data associated with\nthem. Defaults to #000000 if not specified.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "headerColor": {
                                                                "description": "The background color for header cells.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "hideTooltips": {
                                                                "description": "True to hide tooltips.",
                                                                "type": "boolean"
                                                            },
                                                            "hintedLevels": {
                                                                "description": "The number of additional data levels beyond the labeled levels to be shown\non the treemap chart. These levels are not interactive and are shown\nwithout their labels. Defaults to 0 if not specified.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "labels": {
                                                                "description": "The data that contains the treemap cell labels.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "levels": {
                                                                "description": "The number of data levels to show on the treemap chart. These levels are\ninteractive and are shown with their labels. Defaults to 2 if not\nspecified.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "maxValue": {
                                                                "description": "The maximum possible data value. Cells with values greater than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual maximum value from color_data, or the maximum value from\nsize_data if color_data is not specified.",
                                                                "format": "double",
                                                                "type": "number"
                                                            },
                                                            "minValue": {
                                                                "description": "The minimum possible data value. Cells with values less than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual minimum value from color_data, or the minimum value from\nsize_data if color_data is not specified.",
                                                                "format": "double",
                                                                "type": "number"
                                                            },
                                                            "parentLabels": {
                                                                "description": "The data the contains the treemap cells' parent labels.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sizeData": {
                                                                "description": "The data that determines the size of each treemap data cell. This data is\nexpected to be numeric. The cells corresponding to non-numeric or missing\ndata will not be rendered. If color_data is not specified, this data\nis used to determine data cell background colors as well.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "textFormat": {
                                                                "description": "The text format for all labels on the chart.",
                                                                "properties": {
                                                                    "bold": {
                                                                        "description": "True if the text is bold.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "fontFamily": {
                                                                        "description": "The font family.",
                                                                        "type": "string"
                                                                    },
                                                                    "fontSize": {
                                                                        "description": "The size of the font.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "foregroundColor": {
                                                                        "description": "The foreground color of the text.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "italic": {
                                                                        "description": "True if the text is italicized.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "strikethrough": {
                                                                        "description": "True if the text has a strikethrough.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "underline": {
                                                                        "description": "True if the text is underlined.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "waterfallChart": {
                                                        "description": "A waterfall chart specification.",
                                                        "properties": {
                                                            "connectorLineStyle": {
                                                                "description": "The line style for the connector lines.",
                                                                "properties": {
                                                                    "type": {
                                                                        "description": "The dash type of the line.",
                                                                        "enum": [
                                                                            "LINE_DASH_TYPE_UNSPECIFIED",
                                                                            "INVISIBLE",
                                                                            "CUSTOM",
                                                                            "SOLID",
                                                                            "DOTTED",
                                                                            "MEDIUM_DASHED",
                                                                            "MEDIUM_DASHED_DOTTED",
                                                                            "LONG_DASHED",
                                                                            "LONG_DASHED_DOTTED"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The thickness of the line, in px.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "domain": {
                                                                "description": "The domain data (horizontal axis) for the waterfall chart.",
                                                                "properties": {
                                                                    "data": {
                                                                        "description": "The data of the WaterfallChartDomain.",
                                                                        "properties": {
                                                                            "sourceRange": {
                                                                                "description": "The source ranges of the data.",
                                                                                "properties": {
                                                                                    "sources": {
                                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                        "items": {
                                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                            "properties": {
                                                                                                "endColumnIndex": {
                                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                },
                                                                                                "endRowIndex": {
                                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                },
                                                                                                "sheetId": {
                                                                                                    "description": "The sheet this range is on.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                },
                                                                                                "startColumnIndex": {
                                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                },
                                                                                                "startRowIndex": {
                                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                    "format": "int32",
                                                                                                    "type": "integer"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "reversed": {
                                                                        "description": "True to reverse the order of the domain values (horizontal axis).",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "firstValueIsTotal": {
                                                                "description": "True to interpret the first value as a total.",
                                                                "type": "boolean"
                                                            },
                                                            "hideConnectorLines": {
                                                                "description": "True to hide connector lines between columns.",
                                                                "type": "boolean"
                                                            },
                                                            "series": {
                                                                "description": "The data this waterfall chart is visualizing.",
                                                                "items": {
                                                                    "description": "A single series of data for a waterfall chart.",
                                                                    "properties": {
                                                                        "customSubtotals": {
                                                                            "description": "Custom subtotal columns appearing in this series. The order in which\nsubtotals are defined is not significant. Only one subtotal may be\ndefined for each data point.",
                                                                            "items": {
                                                                                "description": "A custom subtotal column for a waterfall chart series.",
                                                                                "properties": {
                                                                                    "dataIsSubtotal": {
                                                                                        "description": "True if the data point at subtotal_index is the subtotal. If false,\nthe subtotal will be computed and appear after the data point.",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "label": {
                                                                                        "description": "A label for the subtotal column.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "subtotalIndex": {
                                                                                        "description": "The 0-based index of a data point within the series. If\ndata_is_subtotal is true, the data point at this index is the\nsubtotal. Otherwise, the subtotal appears after the data point with\nthis index. A series can have multiple subtotals at arbitrary indices,\nbut subtotals do not affect the indices of the data points. For\nexample, if a series has three data points, their indices will always\nbe 0, 1, and 2, regardless of how many subtotals exist on the series or\nwhat data points they are associated with.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "data": {
                                                                            "description": "The data being visualized in this series.",
                                                                            "properties": {
                                                                                "sourceRange": {
                                                                                    "description": "The source ranges of the data.",
                                                                                    "properties": {
                                                                                        "sources": {
                                                                                            "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                            "items": {
                                                                                                "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                "properties": {
                                                                                                    "endColumnIndex": {
                                                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "endRowIndex": {
                                                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "sheetId": {
                                                                                                        "description": "The sheet this range is on.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startColumnIndex": {
                                                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startRowIndex": {
                                                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "hideTrailingSubtotal": {
                                                                            "description": "True to hide the subtotal column from the end of the series. By default,\na subtotal column will appear at the end of each series. Setting this\nfield to true will hide that subtotal column for this series.",
                                                                            "type": "boolean"
                                                                        },
                                                                        "negativeColumnsStyle": {
                                                                            "description": "Styles for all columns in this series with negative values.",
                                                                            "properties": {
                                                                                "color": {
                                                                                    "description": "The color of the column.",
                                                                                    "properties": {
                                                                                        "alpha": {
                                                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "blue": {
                                                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "green": {
                                                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "red": {
                                                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "label": {
                                                                                    "description": "The label of the column's legend.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "positiveColumnsStyle": {
                                                                            "description": "Styles for all columns in this series with positive values.",
                                                                            "properties": {
                                                                                "color": {
                                                                                    "description": "The color of the column.",
                                                                                    "properties": {
                                                                                        "alpha": {
                                                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "blue": {
                                                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "green": {
                                                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "red": {
                                                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "label": {
                                                                                    "description": "The label of the column's legend.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "subtotalColumnsStyle": {
                                                                            "description": "Styles for all subtotal columns in this series.",
                                                                            "properties": {
                                                                                "color": {
                                                                                    "description": "The color of the column.",
                                                                                    "properties": {
                                                                                        "alpha": {
                                                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "blue": {
                                                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "green": {
                                                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "red": {
                                                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "label": {
                                                                                    "description": "The label of the column's legend.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "stackedType": {
                                                                "description": "The stacked type.",
                                                                "enum": [
                                                                    "WATERFALL_STACKED_TYPE_UNSPECIFIED",
                                                                    "STACKED",
                                                                    "SEQUENTIAL"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "addConditionalFormatRule": {
                                "description": "Adds a new conditional format rule.",
                                "properties": {
                                    "index": {
                                        "description": "The zero-based index where the rule should be inserted.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "rule": {
                                        "description": "The rule to add.",
                                        "properties": {
                                            "booleanRule": {
                                                "description": "The formatting is either \"on\" or \"off\" according to the rule.",
                                                "properties": {
                                                    "condition": {
                                                        "description": "The condition of the rule. If the condition evaluates to true,\nthe format is applied.",
                                                        "properties": {
                                                            "type": {
                                                                "description": "The type of condition.",
                                                                "enum": [
                                                                    "CONDITION_TYPE_UNSPECIFIED",
                                                                    "NUMBER_GREATER",
                                                                    "NUMBER_GREATER_THAN_EQ",
                                                                    "NUMBER_LESS",
                                                                    "NUMBER_LESS_THAN_EQ",
                                                                    "NUMBER_EQ",
                                                                    "NUMBER_NOT_EQ",
                                                                    "NUMBER_BETWEEN",
                                                                    "NUMBER_NOT_BETWEEN",
                                                                    "TEXT_CONTAINS",
                                                                    "TEXT_NOT_CONTAINS",
                                                                    "TEXT_STARTS_WITH",
                                                                    "TEXT_ENDS_WITH",
                                                                    "TEXT_EQ",
                                                                    "TEXT_IS_EMAIL",
                                                                    "TEXT_IS_URL",
                                                                    "DATE_EQ",
                                                                    "DATE_BEFORE",
                                                                    "DATE_AFTER",
                                                                    "DATE_ON_OR_BEFORE",
                                                                    "DATE_ON_OR_AFTER",
                                                                    "DATE_BETWEEN",
                                                                    "DATE_NOT_BETWEEN",
                                                                    "DATE_IS_VALID",
                                                                    "ONE_OF_RANGE",
                                                                    "ONE_OF_LIST",
                                                                    "BLANK",
                                                                    "NOT_BLANK",
                                                                    "CUSTOM_FORMULA",
                                                                    "BOOLEAN"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "values": {
                                                                "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                                "items": {
                                                                    "description": "The value of the condition.",
                                                                    "properties": {
                                                                        "relativeDate": {
                                                                            "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                                            "enum": [
                                                                                "RELATIVE_DATE_UNSPECIFIED",
                                                                                "PAST_YEAR",
                                                                                "PAST_MONTH",
                                                                                "PAST_WEEK",
                                                                                "YESTERDAY",
                                                                                "TODAY",
                                                                                "TOMORROW"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "userEnteredValue": {
                                                                            "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "format": {
                                                        "description": "The format to apply.\nConditional formatting can only apply a subset of formatting:\nbold, italic,\nstrikethrough,\nforeground color &\nbackground color.",
                                                        "properties": {
                                                            "backgroundColor": {
                                                                "description": "The background color of the cell.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "borders": {
                                                                "description": "The borders of the cell.",
                                                                "properties": {
                                                                    "bottom": {
                                                                        "description": "The bottom border of the cell.",
                                                                        "properties": {
                                                                            "color": {
                                                                                "description": "The color of the border.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "style": {
                                                                                "description": "The style of the border.",
                                                                                "enum": [
                                                                                    "STYLE_UNSPECIFIED",
                                                                                    "DOTTED",
                                                                                    "DASHED",
                                                                                    "SOLID",
                                                                                    "SOLID_MEDIUM",
                                                                                    "SOLID_THICK",
                                                                                    "NONE",
                                                                                    "DOUBLE"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "width": {
                                                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "left": {
                                                                        "description": "The left border of the cell.",
                                                                        "properties": {
                                                                            "color": {
                                                                                "description": "The color of the border.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "style": {
                                                                                "description": "The style of the border.",
                                                                                "enum": [
                                                                                    "STYLE_UNSPECIFIED",
                                                                                    "DOTTED",
                                                                                    "DASHED",
                                                                                    "SOLID",
                                                                                    "SOLID_MEDIUM",
                                                                                    "SOLID_THICK",
                                                                                    "NONE",
                                                                                    "DOUBLE"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "width": {
                                                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "right": {
                                                                        "description": "The right border of the cell.",
                                                                        "properties": {
                                                                            "color": {
                                                                                "description": "The color of the border.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "style": {
                                                                                "description": "The style of the border.",
                                                                                "enum": [
                                                                                    "STYLE_UNSPECIFIED",
                                                                                    "DOTTED",
                                                                                    "DASHED",
                                                                                    "SOLID",
                                                                                    "SOLID_MEDIUM",
                                                                                    "SOLID_THICK",
                                                                                    "NONE",
                                                                                    "DOUBLE"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "width": {
                                                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "top": {
                                                                        "description": "The top border of the cell.",
                                                                        "properties": {
                                                                            "color": {
                                                                                "description": "The color of the border.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "style": {
                                                                                "description": "The style of the border.",
                                                                                "enum": [
                                                                                    "STYLE_UNSPECIFIED",
                                                                                    "DOTTED",
                                                                                    "DASHED",
                                                                                    "SOLID",
                                                                                    "SOLID_MEDIUM",
                                                                                    "SOLID_THICK",
                                                                                    "NONE",
                                                                                    "DOUBLE"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "width": {
                                                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "horizontalAlignment": {
                                                                "description": "The horizontal alignment of the value in the cell.",
                                                                "enum": [
                                                                    "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                    "LEFT",
                                                                    "CENTER",
                                                                    "RIGHT"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "hyperlinkDisplayType": {
                                                                "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                                "enum": [
                                                                    "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                                    "LINKED",
                                                                    "PLAIN_TEXT"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "numberFormat": {
                                                                "description": "A format describing how number values should be represented to the user.",
                                                                "properties": {
                                                                    "pattern": {
                                                                        "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                                        "enum": [
                                                                            "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                                            "TEXT",
                                                                            "NUMBER",
                                                                            "PERCENT",
                                                                            "CURRENCY",
                                                                            "DATE",
                                                                            "TIME",
                                                                            "DATE_TIME",
                                                                            "SCIENTIFIC"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "padding": {
                                                                "description": "The padding of the cell.",
                                                                "properties": {
                                                                    "bottom": {
                                                                        "description": "The bottom padding of the cell.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "left": {
                                                                        "description": "The left padding of the cell.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "right": {
                                                                        "description": "The right padding of the cell.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "top": {
                                                                        "description": "The top padding of the cell.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "textDirection": {
                                                                "description": "The direction of the text in the cell.",
                                                                "enum": [
                                                                    "TEXT_DIRECTION_UNSPECIFIED",
                                                                    "LEFT_TO_RIGHT",
                                                                    "RIGHT_TO_LEFT"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "textFormat": {
                                                                "description": "The format of the text in the cell (unless overridden by a format run).",
                                                                "properties": {
                                                                    "bold": {
                                                                        "description": "True if the text is bold.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "fontFamily": {
                                                                        "description": "The font family.",
                                                                        "type": "string"
                                                                    },
                                                                    "fontSize": {
                                                                        "description": "The size of the font.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "foregroundColor": {
                                                                        "description": "The foreground color of the text.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "italic": {
                                                                        "description": "True if the text is italicized.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "strikethrough": {
                                                                        "description": "True if the text has a strikethrough.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "underline": {
                                                                        "description": "True if the text is underlined.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "textRotation": {
                                                                "description": "The rotation applied to text in a cell",
                                                                "properties": {
                                                                    "angle": {
                                                                        "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "vertical": {
                                                                        "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "verticalAlignment": {
                                                                "description": "The vertical alignment of the value in the cell.",
                                                                "enum": [
                                                                    "VERTICAL_ALIGN_UNSPECIFIED",
                                                                    "TOP",
                                                                    "MIDDLE",
                                                                    "BOTTOM"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "wrapStrategy": {
                                                                "description": "The wrap strategy for the value in the cell.",
                                                                "enum": [
                                                                    "WRAP_STRATEGY_UNSPECIFIED",
                                                                    "OVERFLOW_CELL",
                                                                    "LEGACY_WRAP",
                                                                    "CLIP",
                                                                    "WRAP"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "gradientRule": {
                                                "description": "The formatting will vary based on the gradients in the rule.",
                                                "properties": {
                                                    "maxpoint": {
                                                        "description": "The final interpolation point.",
                                                        "properties": {
                                                            "color": {
                                                                "description": "The color this interpolation point should use.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": {
                                                                "description": "How the value should be interpreted.",
                                                                "enum": [
                                                                    "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
                                                                    "MIN",
                                                                    "MAX",
                                                                    "NUMBER",
                                                                    "PERCENT",
                                                                    "PERCENTILE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "midpoint": {
                                                        "description": "An optional midway interpolation point.",
                                                        "properties": {
                                                            "color": {
                                                                "description": "The color this interpolation point should use.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": {
                                                                "description": "How the value should be interpreted.",
                                                                "enum": [
                                                                    "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
                                                                    "MIN",
                                                                    "MAX",
                                                                    "NUMBER",
                                                                    "PERCENT",
                                                                    "PERCENTILE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "minpoint": {
                                                        "description": "The starting interpolation point.",
                                                        "properties": {
                                                            "color": {
                                                                "description": "The color this interpolation point should use.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": {
                                                                "description": "How the value should be interpreted.",
                                                                "enum": [
                                                                    "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
                                                                    "MIN",
                                                                    "MAX",
                                                                    "NUMBER",
                                                                    "PERCENT",
                                                                    "PERCENTILE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "ranges": {
                                                "description": "The ranges that are formatted if the condition is true.\nAll the ranges must be on the same grid.",
                                                "items": {
                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                    "properties": {
                                                        "endColumnIndex": {
                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "endRowIndex": {
                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "sheetId": {
                                                            "description": "The sheet this range is on.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "addDimensionGroup": {
                                "description": "Creates a group over the specified range.",
                                "properties": {
                                    "range": {
                                        "description": "The range over which to create a group.",
                                        "properties": {
                                            "dimension": {
                                                "description": "The dimension of the span.",
                                                "enum": [
                                                    "DIMENSION_UNSPECIFIED",
                                                    "ROWS",
                                                    "COLUMNS"
                                                ],
                                                "type": "string"
                                            },
                                            "endIndex": {
                                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this span is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startIndex": {
                                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "addFilterView": {
                                "description": "Adds a filter view.",
                                "properties": {
                                    "filter": {
                                        "description": "The filter to add. The filterViewId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a filter that already exists.)",
                                        "properties": {
                                            "criteria": {
                                                "additionalProperties": {
                                                    "description": "Criteria for showing/hiding rows in a filter or filter view.",
                                                    "properties": {
                                                        "condition": {
                                                            "description": "A condition that must be true for values to be shown.\n(This does not override hiddenValues -- if a value is listed there,\n it will still be hidden.)",
                                                            "properties": {
                                                                "type": {
                                                                    "description": "The type of condition.",
                                                                    "enum": [
                                                                        "CONDITION_TYPE_UNSPECIFIED",
                                                                        "NUMBER_GREATER",
                                                                        "NUMBER_GREATER_THAN_EQ",
                                                                        "NUMBER_LESS",
                                                                        "NUMBER_LESS_THAN_EQ",
                                                                        "NUMBER_EQ",
                                                                        "NUMBER_NOT_EQ",
                                                                        "NUMBER_BETWEEN",
                                                                        "NUMBER_NOT_BETWEEN",
                                                                        "TEXT_CONTAINS",
                                                                        "TEXT_NOT_CONTAINS",
                                                                        "TEXT_STARTS_WITH",
                                                                        "TEXT_ENDS_WITH",
                                                                        "TEXT_EQ",
                                                                        "TEXT_IS_EMAIL",
                                                                        "TEXT_IS_URL",
                                                                        "DATE_EQ",
                                                                        "DATE_BEFORE",
                                                                        "DATE_AFTER",
                                                                        "DATE_ON_OR_BEFORE",
                                                                        "DATE_ON_OR_AFTER",
                                                                        "DATE_BETWEEN",
                                                                        "DATE_NOT_BETWEEN",
                                                                        "DATE_IS_VALID",
                                                                        "ONE_OF_RANGE",
                                                                        "ONE_OF_LIST",
                                                                        "BLANK",
                                                                        "NOT_BLANK",
                                                                        "CUSTOM_FORMULA",
                                                                        "BOOLEAN"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                                    "items": {
                                                                        "description": "The value of the condition.",
                                                                        "properties": {
                                                                            "relativeDate": {
                                                                                "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                                                "enum": [
                                                                                    "RELATIVE_DATE_UNSPECIFIED",
                                                                                    "PAST_YEAR",
                                                                                    "PAST_MONTH",
                                                                                    "PAST_WEEK",
                                                                                    "YESTERDAY",
                                                                                    "TODAY",
                                                                                    "TOMORROW"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "userEnteredValue": {
                                                                                "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "hiddenValues": {
                                                            "description": "Values that should be hidden.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
                                                "type": "object"
                                            },
                                            "filterViewId": {
                                                "description": "The ID of the filter view.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "namedRangeId": {
                                                "description": "The named range this filter view is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                                                "type": "string"
                                            },
                                            "range": {
                                                "description": "The range this filter view covers.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "sortSpecs": {
                                                "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
                                                "items": {
                                                    "description": "A sort order associated with a specific column or row.",
                                                    "properties": {
                                                        "dimensionIndex": {
                                                            "description": "The dimension the sort should be applied to.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "sortOrder": {
                                                            "description": "The order data should be sorted.",
                                                            "enum": [
                                                                "SORT_ORDER_UNSPECIFIED",
                                                                "ASCENDING",
                                                                "DESCENDING"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "title": {
                                                "description": "The name of the filter view.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "addNamedRange": {
                                "description": "Adds a named range.",
                                "properties": {
                                    "namedRange": {
                                        "description": "The named range to add. The namedRangeId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a range that already exists.)",
                                        "properties": {
                                            "name": {
                                                "description": "The name of the named range.",
                                                "type": "string"
                                            },
                                            "namedRangeId": {
                                                "description": "The ID of the named range.",
                                                "type": "string"
                                            },
                                            "range": {
                                                "description": "The range this represents.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "addProtectedRange": {
                                "description": "Adds a protected range.",
                                "properties": {
                                    "protectedRange": {
                                        "description": "The protected range to be added. The\nprotectedRangeId field is optional; if\none is not set, an id will be randomly generated. (It is an error to\nspecify the ID of a range that already exists.)",
                                        "properties": {
                                            "description": {
                                                "description": "The description of this protected range.",
                                                "type": "string"
                                            },
                                            "editors": {
                                                "description": "The users and groups with edit access to the protected range.\nThis field is only visible to users with edit access to the protected\nrange and the document.\nEditors are not supported with warning_only protection.",
                                                "properties": {
                                                    "domainUsersCanEdit": {
                                                        "description": "True if anyone in the document's domain has edit access to the protected\nrange.  Domain protection is only supported on documents within a domain.",
                                                        "type": "boolean"
                                                    },
                                                    "groups": {
                                                        "description": "The email addresses of groups with edit access to the protected range.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "users": {
                                                        "description": "The email addresses of users with edit access to the protected range.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "namedRangeId": {
                                                "description": "The named range this protected range is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                                                "type": "string"
                                            },
                                            "protectedRangeId": {
                                                "description": "The ID of the protected range.\nThis field is read-only.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "range": {
                                                "description": "The range that is being protected.\nThe range may be fully unbounded, in which case this is considered\na protected sheet.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "requestingUserCanEdit": {
                                                "description": "True if the user who requested this protected range can edit the\nprotected area.\nThis field is read-only.",
                                                "type": "boolean"
                                            },
                                            "unprotectedRanges": {
                                                "description": "The list of unprotected ranges within a protected sheet.\nUnprotected ranges are only supported on protected sheets.",
                                                "items": {
                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                    "properties": {
                                                        "endColumnIndex": {
                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "endRowIndex": {
                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "sheetId": {
                                                            "description": "The sheet this range is on.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "warningOnly": {
                                                "description": "True if this protected range will show a warning when editing.\nWarning-based protection means that every user can edit data in the\nprotected range, except editing will prompt a warning asking the user\nto confirm the edit.\n\nWhen writing: if this field is true, then editors is ignored.\nAdditionally, if this field is changed from true to false and the\n`editors` field is not set (nor included in the field mask), then\nthe editors will be set to all the editors in the document.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "addSheet": {
                                "description": "Adds a sheet.",
                                "properties": {
                                    "properties": {
                                        "description": "The properties the new sheet should have.\nAll properties are optional.\nThe sheetId field is optional; if one is not\nset, an id will be randomly generated. (It is an error to specify the ID\nof a sheet that already exists.)",
                                        "properties": {
                                            "gridProperties": {
                                                "description": "Additional properties of the sheet if this sheet is a grid.\n(If the sheet is an object sheet, containing a chart or image, then\nthis field will be absent.)\nWhen writing it is an error to set any grid properties on non-grid sheets.",
                                                "properties": {
                                                    "columnCount": {
                                                        "description": "The number of columns in the grid.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "columnGroupControlAfter": {
                                                        "description": "True if the column grouping control toggle is shown after the group.",
                                                        "type": "boolean"
                                                    },
                                                    "frozenColumnCount": {
                                                        "description": "The number of columns that are frozen in the grid.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "frozenRowCount": {
                                                        "description": "The number of rows that are frozen in the grid.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "hideGridlines": {
                                                        "description": "True if the grid isn't showing gridlines in the UI.",
                                                        "type": "boolean"
                                                    },
                                                    "rowCount": {
                                                        "description": "The number of rows in the grid.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "rowGroupControlAfter": {
                                                        "description": "True if the row grouping control toggle is shown after the group.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "hidden": {
                                                "description": "True if the sheet is hidden in the UI, false if it's visible.",
                                                "type": "boolean"
                                            },
                                            "index": {
                                                "description": "The index of the sheet within the spreadsheet.\nWhen adding or updating sheet properties, if this field\nis excluded then the sheet is added or moved to the end\nof the sheet list. When updating sheet indices or inserting\nsheets, movement is considered in \"before the move\" indexes.\nFor example, if there were 3 sheets (S1, S2, S3) in order to\nmove S1 ahead of S2 the index would have to be set to 2. A sheet\nindex update request is ignored if the requested index is\nidentical to the sheets current index or if the requested new\nindex is equal to the current sheet index + 1.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "rightToLeft": {
                                                "description": "True if the sheet is an RTL sheet instead of an LTR sheet.",
                                                "type": "boolean"
                                            },
                                            "sheetId": {
                                                "description": "The ID of the sheet. Must be non-negative.\nThis field cannot be changed once set.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetType": {
                                                "description": "The type of sheet. Defaults to GRID.\nThis field cannot be changed once set.",
                                                "enum": [
                                                    "SHEET_TYPE_UNSPECIFIED",
                                                    "GRID",
                                                    "OBJECT"
                                                ],
                                                "type": "string"
                                            },
                                            "tabColor": {
                                                "description": "The color of the tab in the UI.",
                                                "properties": {
                                                    "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "title": {
                                                "description": "The name of the sheet.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "appendCells": {
                                "description": "Appends cells after the last row with data in a sheet.",
                                "properties": {
                                    "fields": {
                                        "description": "The fields of CellData that should be updated.\nAt least one field must be specified.\nThe root is the CellData; 'row.values.' should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "rows": {
                                        "description": "The data to append.",
                                        "items": {
                                            "description": "Data about each cell in a row.",
                                            "properties": {
                                                "values": {
                                                    "description": "The values in the row, one per column.",
                                                    "items": {
                                                        "description": "Data about a specific cell.",
                                                        "properties": {
                                                            "dataValidation": {
                                                                "description": "A data validation rule on the cell, if any.\n\nWhen writing, the new data validation rule will overwrite any prior rule.",
                                                                "properties": {
                                                                    "condition": {
                                                                        "description": "The condition that data in the cell must match.",
                                                                        "properties": {
                                                                            "type": {
                                                                                "description": "The type of condition.",
                                                                                "enum": [
                                                                                    "CONDITION_TYPE_UNSPECIFIED",
                                                                                    "NUMBER_GREATER",
                                                                                    "NUMBER_GREATER_THAN_EQ",
                                                                                    "NUMBER_LESS",
                                                                                    "NUMBER_LESS_THAN_EQ",
                                                                                    "NUMBER_EQ",
                                                                                    "NUMBER_NOT_EQ",
                                                                                    "NUMBER_BETWEEN",
                                                                                    "NUMBER_NOT_BETWEEN",
                                                                                    "TEXT_CONTAINS",
                                                                                    "TEXT_NOT_CONTAINS",
                                                                                    "TEXT_STARTS_WITH",
                                                                                    "TEXT_ENDS_WITH",
                                                                                    "TEXT_EQ",
                                                                                    "TEXT_IS_EMAIL",
                                                                                    "TEXT_IS_URL",
                                                                                    "DATE_EQ",
                                                                                    "DATE_BEFORE",
                                                                                    "DATE_AFTER",
                                                                                    "DATE_ON_OR_BEFORE",
                                                                                    "DATE_ON_OR_AFTER",
                                                                                    "DATE_BETWEEN",
                                                                                    "DATE_NOT_BETWEEN",
                                                                                    "DATE_IS_VALID",
                                                                                    "ONE_OF_RANGE",
                                                                                    "ONE_OF_LIST",
                                                                                    "BLANK",
                                                                                    "NOT_BLANK",
                                                                                    "CUSTOM_FORMULA",
                                                                                    "BOOLEAN"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "values": {
                                                                                "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                                                "items": {
                                                                                    "description": "The value of the condition.",
                                                                                    "properties": {
                                                                                        "relativeDate": {
                                                                                            "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                                                            "enum": [
                                                                                                "RELATIVE_DATE_UNSPECIFIED",
                                                                                                "PAST_YEAR",
                                                                                                "PAST_MONTH",
                                                                                                "PAST_WEEK",
                                                                                                "YESTERDAY",
                                                                                                "TODAY",
                                                                                                "TOMORROW"
                                                                                            ],
                                                                                            "type": "string"
                                                                                        },
                                                                                        "userEnteredValue": {
                                                                                            "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "inputMessage": {
                                                                        "description": "A message to show the user when adding data to the cell.",
                                                                        "type": "string"
                                                                    },
                                                                    "showCustomUi": {
                                                                        "description": "True if the UI should be customized based on the kind of condition.\nIf true, \"List\" conditions will show a dropdown.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "strict": {
                                                                        "description": "True if invalid data should be rejected.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "effectiveFormat": {
                                                                "description": "The effective format being used by the cell.\nThis includes the results of applying any conditional formatting and,\nif the cell contains a formula, the computed number format.\nIf the effective format is the default format, effective format will\nnot be written.\nThis field is read-only.",
                                                                "properties": {
                                                                    "backgroundColor": {
                                                                        "description": "The background color of the cell.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "borders": {
                                                                        "description": "The borders of the cell.",
                                                                        "properties": {
                                                                            "bottom": {
                                                                                "description": "The bottom border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "left": {
                                                                                "description": "The left border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "right": {
                                                                                "description": "The right border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "top": {
                                                                                "description": "The top border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "horizontalAlignment": {
                                                                        "description": "The horizontal alignment of the value in the cell.",
                                                                        "enum": [
                                                                            "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                            "LEFT",
                                                                            "CENTER",
                                                                            "RIGHT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "hyperlinkDisplayType": {
                                                                        "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                                        "enum": [
                                                                            "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                                            "LINKED",
                                                                            "PLAIN_TEXT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "numberFormat": {
                                                                        "description": "A format describing how number values should be represented to the user.",
                                                                        "properties": {
                                                                            "pattern": {
                                                                                "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                                                "enum": [
                                                                                    "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                                                    "TEXT",
                                                                                    "NUMBER",
                                                                                    "PERCENT",
                                                                                    "CURRENCY",
                                                                                    "DATE",
                                                                                    "TIME",
                                                                                    "DATE_TIME",
                                                                                    "SCIENTIFIC"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "padding": {
                                                                        "description": "The padding of the cell.",
                                                                        "properties": {
                                                                            "bottom": {
                                                                                "description": "The bottom padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "left": {
                                                                                "description": "The left padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "right": {
                                                                                "description": "The right padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "top": {
                                                                                "description": "The top padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "textDirection": {
                                                                        "description": "The direction of the text in the cell.",
                                                                        "enum": [
                                                                            "TEXT_DIRECTION_UNSPECIFIED",
                                                                            "LEFT_TO_RIGHT",
                                                                            "RIGHT_TO_LEFT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "textFormat": {
                                                                        "description": "The format of the text in the cell (unless overridden by a format run).",
                                                                        "properties": {
                                                                            "bold": {
                                                                                "description": "True if the text is bold.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "fontFamily": {
                                                                                "description": "The font family.",
                                                                                "type": "string"
                                                                            },
                                                                            "fontSize": {
                                                                                "description": "The size of the font.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "foregroundColor": {
                                                                                "description": "The foreground color of the text.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "italic": {
                                                                                "description": "True if the text is italicized.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "strikethrough": {
                                                                                "description": "True if the text has a strikethrough.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "underline": {
                                                                                "description": "True if the text is underlined.",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "textRotation": {
                                                                        "description": "The rotation applied to text in a cell",
                                                                        "properties": {
                                                                            "angle": {
                                                                                "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "vertical": {
                                                                                "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "verticalAlignment": {
                                                                        "description": "The vertical alignment of the value in the cell.",
                                                                        "enum": [
                                                                            "VERTICAL_ALIGN_UNSPECIFIED",
                                                                            "TOP",
                                                                            "MIDDLE",
                                                                            "BOTTOM"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "wrapStrategy": {
                                                                        "description": "The wrap strategy for the value in the cell.",
                                                                        "enum": [
                                                                            "WRAP_STRATEGY_UNSPECIFIED",
                                                                            "OVERFLOW_CELL",
                                                                            "LEGACY_WRAP",
                                                                            "CLIP",
                                                                            "WRAP"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "effectiveValue": {
                                                                "description": "The effective value of the cell. For cells with formulas, this is\nthe calculated value.  For cells with literals, this is\nthe same as the user_entered_value.\nThis field is read-only.",
                                                                "properties": {
                                                                    "boolValue": {
                                                                        "description": "Represents a boolean value.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "errorValue": {
                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                        "properties": {
                                                                            "message": {
                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "The type of error.",
                                                                                "enum": [
                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                    "ERROR",
                                                                                    "NULL_VALUE",
                                                                                    "DIVIDE_BY_ZERO",
                                                                                    "VALUE",
                                                                                    "REF",
                                                                                    "NAME",
                                                                                    "NUM",
                                                                                    "N_A",
                                                                                    "LOADING"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "formulaValue": {
                                                                        "description": "Represents a formula.",
                                                                        "type": "string"
                                                                    },
                                                                    "numberValue": {
                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    },
                                                                    "stringValue": {
                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "formattedValue": {
                                                                "description": "The formatted value of the cell.\nThis is the value as it's shown to the user.\nThis field is read-only.",
                                                                "type": "string"
                                                            },
                                                            "hyperlink": {
                                                                "description": "A hyperlink this cell points to, if any.\nThis field is read-only.  (To set it, use a `=HYPERLINK` formula\nin the userEnteredValue.formulaValue\nfield.)",
                                                                "type": "string"
                                                            },
                                                            "note": {
                                                                "description": "Any note on the cell.",
                                                                "type": "string"
                                                            },
                                                            "pivotTable": {
                                                                "description": "A pivot table anchored at this cell. The size of pivot table itself\nis computed dynamically based on its data, grouping, filters, values,\netc. Only the top-left cell of the pivot table contains the pivot table\ndefinition. The other cells will contain the calculated values of the\nresults of the pivot in their effective_value fields.",
                                                                "properties": {
                                                                    "columns": {
                                                                        "description": "Each column grouping in the pivot table.",
                                                                        "items": {
                                                                            "description": "A single grouping (either row or column) in a pivot table.",
                                                                            "properties": {
                                                                                "groupRule": {
                                                                                    "description": "The group rule to apply to this row/column group.",
                                                                                    "properties": {
                                                                                        "dateTimeRule": {
                                                                                            "description": "A DateTimeRule.",
                                                                                            "properties": {
                                                                                                "type": {
                                                                                                    "description": "The type of date-time grouping to apply.",
                                                                                                    "enum": [
                                                                                                        "DATE_TIME_RULE_TYPE_UNSPECIFIED",
                                                                                                        "SECOND",
                                                                                                        "MINUTE",
                                                                                                        "HOUR",
                                                                                                        "HOUR_MINUTE",
                                                                                                        "HOUR_MINUTE_AMPM",
                                                                                                        "DAY_OF_WEEK",
                                                                                                        "DAY_OF_YEAR",
                                                                                                        "DAY_OF_MONTH",
                                                                                                        "DAY_MONTH",
                                                                                                        "MONTH",
                                                                                                        "QUARTER",
                                                                                                        "YEAR",
                                                                                                        "YEAR_MONTH",
                                                                                                        "YEAR_QUARTER",
                                                                                                        "YEAR_MONTH_DAY"
                                                                                                    ],
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "histogramRule": {
                                                                                            "description": "A HistogramRule.",
                                                                                            "properties": {
                                                                                                "end": {
                                                                                                    "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                },
                                                                                                "interval": {
                                                                                                    "description": "The size of the buckets that are created. Must be positive.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                },
                                                                                                "start": {
                                                                                                    "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "manualRule": {
                                                                                            "description": "A ManualRule.",
                                                                                            "properties": {
                                                                                                "groups": {
                                                                                                    "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
                                                                                                    "items": {
                                                                                                        "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
                                                                                                        "properties": {
                                                                                                            "groupName": {
                                                                                                                "description": "The group name, which must be a string. Each group in a given\nManualRule must have a unique group name.",
                                                                                                                "properties": {
                                                                                                                    "boolValue": {
                                                                                                                        "description": "Represents a boolean value.",
                                                                                                                        "type": "boolean"
                                                                                                                    },
                                                                                                                    "errorValue": {
                                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                                        "properties": {
                                                                                                                            "message": {
                                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                                "type": "string"
                                                                                                                            },
                                                                                                                            "type": {
                                                                                                                                "description": "The type of error.",
                                                                                                                                "enum": [
                                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                                    "ERROR",
                                                                                                                                    "NULL_VALUE",
                                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                                    "VALUE",
                                                                                                                                    "REF",
                                                                                                                                    "NAME",
                                                                                                                                    "NUM",
                                                                                                                                    "N_A",
                                                                                                                                    "LOADING"
                                                                                                                                ],
                                                                                                                                "type": "string"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        "type": "object"
                                                                                                                    },
                                                                                                                    "formulaValue": {
                                                                                                                        "description": "Represents a formula.",
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "numberValue": {
                                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                                        "format": "double",
                                                                                                                        "type": "number"
                                                                                                                    },
                                                                                                                    "stringValue": {
                                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                                        "type": "string"
                                                                                                                    }
                                                                                                                },
                                                                                                                "type": "object"
                                                                                                            },
                                                                                                            "items": {
                                                                                                                "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
                                                                                                                "items": {
                                                                                                                    "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                                    "properties": {
                                                                                                                        "boolValue": {
                                                                                                                            "description": "Represents a boolean value.",
                                                                                                                            "type": "boolean"
                                                                                                                        },
                                                                                                                        "errorValue": {
                                                                                                                            "description": "Represents an error.\nThis field is read-only.",
                                                                                                                            "properties": {
                                                                                                                                "message": {
                                                                                                                                    "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                                    "type": "string"
                                                                                                                                },
                                                                                                                                "type": {
                                                                                                                                    "description": "The type of error.",
                                                                                                                                    "enum": [
                                                                                                                                        "ERROR_TYPE_UNSPECIFIED",
                                                                                                                                        "ERROR",
                                                                                                                                        "NULL_VALUE",
                                                                                                                                        "DIVIDE_BY_ZERO",
                                                                                                                                        "VALUE",
                                                                                                                                        "REF",
                                                                                                                                        "NAME",
                                                                                                                                        "NUM",
                                                                                                                                        "N_A",
                                                                                                                                        "LOADING"
                                                                                                                                    ],
                                                                                                                                    "type": "string"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "type": "object"
                                                                                                                        },
                                                                                                                        "formulaValue": {
                                                                                                                            "description": "Represents a formula.",
                                                                                                                            "type": "string"
                                                                                                                        },
                                                                                                                        "numberValue": {
                                                                                                                            "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                                            "format": "double",
                                                                                                                            "type": "number"
                                                                                                                        },
                                                                                                                        "stringValue": {
                                                                                                                            "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                                            "type": "string"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "type": "object"
                                                                                                                },
                                                                                                                "type": "array"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "label": {
                                                                                    "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+",
                                                                                    "type": "string"
                                                                                },
                                                                                "repeatHeadings": {
                                                                                    "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "showTotals": {
                                                                                    "description": "True if the pivot table should include the totals for this grouping.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "sortOrder": {
                                                                                    "description": "The order the values in this group should be sorted.",
                                                                                    "enum": [
                                                                                        "SORT_ORDER_UNSPECIFIED",
                                                                                        "ASCENDING",
                                                                                        "DESCENDING"
                                                                                    ],
                                                                                    "type": "string"
                                                                                },
                                                                                "sourceColumnOffset": {
                                                                                    "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "valueBucket": {
                                                                                    "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
                                                                                    "properties": {
                                                                                        "buckets": {
                                                                                            "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
                                                                                            "items": {
                                                                                                "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "valuesIndex": {
                                                                                            "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "valueMetadata": {
                                                                                    "description": "Metadata about values in the grouping.",
                                                                                    "items": {
                                                                                        "description": "Metadata about a value in a pivot grouping.",
                                                                                        "properties": {
                                                                                            "collapsed": {
                                                                                                "description": "True if the data corresponding to the value is collapsed.",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "criteria": {
                                                                        "additionalProperties": {
                                                                            "description": "Criteria for showing/hiding rows in a pivot table.",
                                                                            "properties": {
                                                                                "visibleValues": {
                                                                                    "description": "Values that should be included.  Values not listed here are excluded.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "description": "An optional mapping of filters per source column offset.\n\nThe filters are applied before aggregating data into the pivot table.\nThe map's key is the column offset of the source range that you want to\nfilter, and the value is the criteria for that column.\n\nFor example, if the source was `C10:E15`, a key of `0` will have the filter\nfor column `C`, whereas the key `1` is for column `D`.",
                                                                        "type": "object"
                                                                    },
                                                                    "rows": {
                                                                        "description": "Each row grouping in the pivot table.",
                                                                        "items": {
                                                                            "description": "A single grouping (either row or column) in a pivot table.",
                                                                            "properties": {
                                                                                "groupRule": {
                                                                                    "description": "The group rule to apply to this row/column group.",
                                                                                    "properties": {
                                                                                        "dateTimeRule": {
                                                                                            "description": "A DateTimeRule.",
                                                                                            "properties": {
                                                                                                "type": {
                                                                                                    "description": "The type of date-time grouping to apply.",
                                                                                                    "enum": [
                                                                                                        "DATE_TIME_RULE_TYPE_UNSPECIFIED",
                                                                                                        "SECOND",
                                                                                                        "MINUTE",
                                                                                                        "HOUR",
                                                                                                        "HOUR_MINUTE",
                                                                                                        "HOUR_MINUTE_AMPM",
                                                                                                        "DAY_OF_WEEK",
                                                                                                        "DAY_OF_YEAR",
                                                                                                        "DAY_OF_MONTH",
                                                                                                        "DAY_MONTH",
                                                                                                        "MONTH",
                                                                                                        "QUARTER",
                                                                                                        "YEAR",
                                                                                                        "YEAR_MONTH",
                                                                                                        "YEAR_QUARTER",
                                                                                                        "YEAR_MONTH_DAY"
                                                                                                    ],
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "histogramRule": {
                                                                                            "description": "A HistogramRule.",
                                                                                            "properties": {
                                                                                                "end": {
                                                                                                    "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                },
                                                                                                "interval": {
                                                                                                    "description": "The size of the buckets that are created. Must be positive.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                },
                                                                                                "start": {
                                                                                                    "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "manualRule": {
                                                                                            "description": "A ManualRule.",
                                                                                            "properties": {
                                                                                                "groups": {
                                                                                                    "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
                                                                                                    "items": {
                                                                                                        "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
                                                                                                        "properties": {
                                                                                                            "groupName": {
                                                                                                                "description": "The group name, which must be a string. Each group in a given\nManualRule must have a unique group name.",
                                                                                                                "properties": {
                                                                                                                    "boolValue": {
                                                                                                                        "description": "Represents a boolean value.",
                                                                                                                        "type": "boolean"
                                                                                                                    },
                                                                                                                    "errorValue": {
                                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                                        "properties": {
                                                                                                                            "message": {
                                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                                "type": "string"
                                                                                                                            },
                                                                                                                            "type": {
                                                                                                                                "description": "The type of error.",
                                                                                                                                "enum": [
                                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                                    "ERROR",
                                                                                                                                    "NULL_VALUE",
                                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                                    "VALUE",
                                                                                                                                    "REF",
                                                                                                                                    "NAME",
                                                                                                                                    "NUM",
                                                                                                                                    "N_A",
                                                                                                                                    "LOADING"
                                                                                                                                ],
                                                                                                                                "type": "string"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        "type": "object"
                                                                                                                    },
                                                                                                                    "formulaValue": {
                                                                                                                        "description": "Represents a formula.",
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "numberValue": {
                                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                                        "format": "double",
                                                                                                                        "type": "number"
                                                                                                                    },
                                                                                                                    "stringValue": {
                                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                                        "type": "string"
                                                                                                                    }
                                                                                                                },
                                                                                                                "type": "object"
                                                                                                            },
                                                                                                            "items": {
                                                                                                                "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
                                                                                                                "items": {
                                                                                                                    "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                                    "properties": {
                                                                                                                        "boolValue": {
                                                                                                                            "description": "Represents a boolean value.",
                                                                                                                            "type": "boolean"
                                                                                                                        },
                                                                                                                        "errorValue": {
                                                                                                                            "description": "Represents an error.\nThis field is read-only.",
                                                                                                                            "properties": {
                                                                                                                                "message": {
                                                                                                                                    "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                                    "type": "string"
                                                                                                                                },
                                                                                                                                "type": {
                                                                                                                                    "description": "The type of error.",
                                                                                                                                    "enum": [
                                                                                                                                        "ERROR_TYPE_UNSPECIFIED",
                                                                                                                                        "ERROR",
                                                                                                                                        "NULL_VALUE",
                                                                                                                                        "DIVIDE_BY_ZERO",
                                                                                                                                        "VALUE",
                                                                                                                                        "REF",
                                                                                                                                        "NAME",
                                                                                                                                        "NUM",
                                                                                                                                        "N_A",
                                                                                                                                        "LOADING"
                                                                                                                                    ],
                                                                                                                                    "type": "string"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "type": "object"
                                                                                                                        },
                                                                                                                        "formulaValue": {
                                                                                                                            "description": "Represents a formula.",
                                                                                                                            "type": "string"
                                                                                                                        },
                                                                                                                        "numberValue": {
                                                                                                                            "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                                            "format": "double",
                                                                                                                            "type": "number"
                                                                                                                        },
                                                                                                                        "stringValue": {
                                                                                                                            "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                                            "type": "string"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "type": "object"
                                                                                                                },
                                                                                                                "type": "array"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "label": {
                                                                                    "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+",
                                                                                    "type": "string"
                                                                                },
                                                                                "repeatHeadings": {
                                                                                    "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "showTotals": {
                                                                                    "description": "True if the pivot table should include the totals for this grouping.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "sortOrder": {
                                                                                    "description": "The order the values in this group should be sorted.",
                                                                                    "enum": [
                                                                                        "SORT_ORDER_UNSPECIFIED",
                                                                                        "ASCENDING",
                                                                                        "DESCENDING"
                                                                                    ],
                                                                                    "type": "string"
                                                                                },
                                                                                "sourceColumnOffset": {
                                                                                    "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "valueBucket": {
                                                                                    "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
                                                                                    "properties": {
                                                                                        "buckets": {
                                                                                            "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
                                                                                            "items": {
                                                                                                "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "valuesIndex": {
                                                                                            "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "valueMetadata": {
                                                                                    "description": "Metadata about values in the grouping.",
                                                                                    "items": {
                                                                                        "description": "Metadata about a value in a pivot grouping.",
                                                                                        "properties": {
                                                                                            "collapsed": {
                                                                                                "description": "True if the data corresponding to the value is collapsed.",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "source": {
                                                                        "description": "The range the pivot table is reading data from.",
                                                                        "properties": {
                                                                            "endColumnIndex": {
                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "endRowIndex": {
                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "sheetId": {
                                                                                "description": "The sheet this range is on.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "startColumnIndex": {
                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "startRowIndex": {
                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "valueLayout": {
                                                                        "description": "Whether values should be listed horizontally (as columns)\nor vertically (as rows).",
                                                                        "enum": [
                                                                            "HORIZONTAL",
                                                                            "VERTICAL"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "values": {
                                                                        "description": "A list of values to include in the pivot table.",
                                                                        "items": {
                                                                            "description": "The definition of how a value in a pivot table should be calculated.",
                                                                            "properties": {
                                                                                "calculatedDisplayType": {
                                                                                    "description": "If specified, indicates that pivot values should be displayed as\nthe result of a calculation with another pivot value. For example, if\ncalculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the\npivot values are displayed as the percentage of the grand total. In\nthe Sheets UI, this is referred to as \"Show As\" in the value section of a\npivot table.",
                                                                                    "enum": [
                                                                                        "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED",
                                                                                        "PERCENT_OF_ROW_TOTAL",
                                                                                        "PERCENT_OF_COLUMN_TOTAL",
                                                                                        "PERCENT_OF_GRAND_TOTAL"
                                                                                    ],
                                                                                    "type": "string"
                                                                                },
                                                                                "formula": {
                                                                                    "description": "A custom formula to calculate the value.  The formula must start\nwith an `=` character.",
                                                                                    "type": "string"
                                                                                },
                                                                                "name": {
                                                                                    "description": "A name to use for the value.",
                                                                                    "type": "string"
                                                                                },
                                                                                "sourceColumnOffset": {
                                                                                    "description": "The column offset of the source range that this value reads from.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this value refers to column `C`, whereas the offset `1` would\nrefer to column `D`.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "summarizeFunction": {
                                                                                    "description": "A function to summarize the value.\nIf formula is set, the only supported values are\nSUM and\nCUSTOM.\nIf sourceColumnOffset is set, then `CUSTOM`\nis not supported.",
                                                                                    "enum": [
                                                                                        "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED",
                                                                                        "SUM",
                                                                                        "COUNTA",
                                                                                        "COUNT",
                                                                                        "COUNTUNIQUE",
                                                                                        "AVERAGE",
                                                                                        "MAX",
                                                                                        "MIN",
                                                                                        "MEDIAN",
                                                                                        "PRODUCT",
                                                                                        "STDEV",
                                                                                        "STDEVP",
                                                                                        "VAR",
                                                                                        "VARP",
                                                                                        "CUSTOM"
                                                                                    ],
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "textFormatRuns": {
                                                                "description": "Runs of rich text applied to subsections of the cell.  Runs are only valid\non user entered strings, not formulas, bools, or numbers.\nRuns start at specific indexes in the text and continue until the next\nrun. Properties of a run will continue unless explicitly changed\nin a subsequent run (and properties of the first run will continue\nthe properties of the cell unless explicitly changed).\n\nWhen writing, the new runs will overwrite any prior runs.  When writing a\nnew user_entered_value, previous runs are erased.",
                                                                "items": {
                                                                    "description": "A run of a text format. The format of this run continues until the start\nindex of the next run.\nWhen updating, all fields must be set.",
                                                                    "properties": {
                                                                        "format": {
                                                                            "description": "The format of this run.  Absent values inherit the cell's format.",
                                                                            "properties": {
                                                                                "bold": {
                                                                                    "description": "True if the text is bold.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "fontFamily": {
                                                                                    "description": "The font family.",
                                                                                    "type": "string"
                                                                                },
                                                                                "fontSize": {
                                                                                    "description": "The size of the font.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "foregroundColor": {
                                                                                    "description": "The foreground color of the text.",
                                                                                    "properties": {
                                                                                        "alpha": {
                                                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "blue": {
                                                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "green": {
                                                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "red": {
                                                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "italic": {
                                                                                    "description": "True if the text is italicized.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "strikethrough": {
                                                                                    "description": "True if the text has a strikethrough.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "underline": {
                                                                                    "description": "True if the text is underlined.",
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "startIndex": {
                                                                            "description": "The character index where this run starts.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "userEnteredFormat": {
                                                                "description": "The format the user entered for the cell.\n\nWhen writing, the new format will be merged with the existing format.",
                                                                "properties": {
                                                                    "backgroundColor": {
                                                                        "description": "The background color of the cell.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "borders": {
                                                                        "description": "The borders of the cell.",
                                                                        "properties": {
                                                                            "bottom": {
                                                                                "description": "The bottom border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "left": {
                                                                                "description": "The left border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "right": {
                                                                                "description": "The right border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "top": {
                                                                                "description": "The top border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "horizontalAlignment": {
                                                                        "description": "The horizontal alignment of the value in the cell.",
                                                                        "enum": [
                                                                            "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                            "LEFT",
                                                                            "CENTER",
                                                                            "RIGHT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "hyperlinkDisplayType": {
                                                                        "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                                        "enum": [
                                                                            "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                                            "LINKED",
                                                                            "PLAIN_TEXT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "numberFormat": {
                                                                        "description": "A format describing how number values should be represented to the user.",
                                                                        "properties": {
                                                                            "pattern": {
                                                                                "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                                                "enum": [
                                                                                    "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                                                    "TEXT",
                                                                                    "NUMBER",
                                                                                    "PERCENT",
                                                                                    "CURRENCY",
                                                                                    "DATE",
                                                                                    "TIME",
                                                                                    "DATE_TIME",
                                                                                    "SCIENTIFIC"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "padding": {
                                                                        "description": "The padding of the cell.",
                                                                        "properties": {
                                                                            "bottom": {
                                                                                "description": "The bottom padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "left": {
                                                                                "description": "The left padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "right": {
                                                                                "description": "The right padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "top": {
                                                                                "description": "The top padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "textDirection": {
                                                                        "description": "The direction of the text in the cell.",
                                                                        "enum": [
                                                                            "TEXT_DIRECTION_UNSPECIFIED",
                                                                            "LEFT_TO_RIGHT",
                                                                            "RIGHT_TO_LEFT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "textFormat": {
                                                                        "description": "The format of the text in the cell (unless overridden by a format run).",
                                                                        "properties": {
                                                                            "bold": {
                                                                                "description": "True if the text is bold.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "fontFamily": {
                                                                                "description": "The font family.",
                                                                                "type": "string"
                                                                            },
                                                                            "fontSize": {
                                                                                "description": "The size of the font.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "foregroundColor": {
                                                                                "description": "The foreground color of the text.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "italic": {
                                                                                "description": "True if the text is italicized.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "strikethrough": {
                                                                                "description": "True if the text has a strikethrough.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "underline": {
                                                                                "description": "True if the text is underlined.",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "textRotation": {
                                                                        "description": "The rotation applied to text in a cell",
                                                                        "properties": {
                                                                            "angle": {
                                                                                "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "vertical": {
                                                                                "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "verticalAlignment": {
                                                                        "description": "The vertical alignment of the value in the cell.",
                                                                        "enum": [
                                                                            "VERTICAL_ALIGN_UNSPECIFIED",
                                                                            "TOP",
                                                                            "MIDDLE",
                                                                            "BOTTOM"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "wrapStrategy": {
                                                                        "description": "The wrap strategy for the value in the cell.",
                                                                        "enum": [
                                                                            "WRAP_STRATEGY_UNSPECIFIED",
                                                                            "OVERFLOW_CELL",
                                                                            "LEGACY_WRAP",
                                                                            "CLIP",
                                                                            "WRAP"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "userEnteredValue": {
                                                                "description": "The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()`\nNote: Dates, Times and DateTimes are represented as doubles in\nserial number format.",
                                                                "properties": {
                                                                    "boolValue": {
                                                                        "description": "Represents a boolean value.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "errorValue": {
                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                        "properties": {
                                                                            "message": {
                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "The type of error.",
                                                                                "enum": [
                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                    "ERROR",
                                                                                    "NULL_VALUE",
                                                                                    "DIVIDE_BY_ZERO",
                                                                                    "VALUE",
                                                                                    "REF",
                                                                                    "NAME",
                                                                                    "NUM",
                                                                                    "N_A",
                                                                                    "LOADING"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "formulaValue": {
                                                                        "description": "Represents a formula.",
                                                                        "type": "string"
                                                                    },
                                                                    "numberValue": {
                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    },
                                                                    "stringValue": {
                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "sheetId": {
                                        "description": "The sheet ID to append the data to.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "appendDimension": {
                                "description": "Appends dimensions to the end of a sheet.",
                                "properties": {
                                    "dimension": {
                                        "description": "Whether rows or columns should be appended.",
                                        "enum": [
                                            "DIMENSION_UNSPECIFIED",
                                            "ROWS",
                                            "COLUMNS"
                                        ],
                                        "type": "string"
                                    },
                                    "length": {
                                        "description": "The number of rows or columns to append.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "sheetId": {
                                        "description": "The sheet to append rows or columns to.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "autoFill": {
                                "description": "Automatically fills in more data based on existing data.",
                                "properties": {
                                    "range": {
                                        "description": "The range to autofill. This will examine the range and detect\nthe location that has data and automatically fill that data\nin to the rest of the range.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "sourceAndDestination": {
                                        "description": "The source and destination areas to autofill.\nThis explicitly lists the source of the autofill and where to\nextend that data.",
                                        "properties": {
                                            "dimension": {
                                                "description": "The dimension that data should be filled into.",
                                                "enum": [
                                                    "DIMENSION_UNSPECIFIED",
                                                    "ROWS",
                                                    "COLUMNS"
                                                ],
                                                "type": "string"
                                            },
                                            "fillLength": {
                                                "description": "The number of rows or columns that data should be filled into.\nPositive numbers expand beyond the last row or last column\nof the source.  Negative numbers expand before the first row\nor first column of the source.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "source": {
                                                "description": "The location of the data to use as the source of the autofill.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "useAlternateSeries": {
                                        "description": "True if we should generate data with the \"alternate\" series.\nThis differs based on the type and amount of source data.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "autoResizeDimensions": {
                                "description": "Automatically resizes one or more dimensions based on the contents\nof the cells in that dimension.",
                                "properties": {
                                    "dimensions": {
                                        "description": "The dimensions to automatically resize.",
                                        "properties": {
                                            "dimension": {
                                                "description": "The dimension of the span.",
                                                "enum": [
                                                    "DIMENSION_UNSPECIFIED",
                                                    "ROWS",
                                                    "COLUMNS"
                                                ],
                                                "type": "string"
                                            },
                                            "endIndex": {
                                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this span is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startIndex": {
                                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "clearBasicFilter": {
                                "description": "Clears the basic filter on a sheet.",
                                "properties": {
                                    "sheetId": {
                                        "description": "The sheet ID on which the basic filter should be cleared.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "copyPaste": {
                                "description": "Copies data from one area and pastes it to another.",
                                "properties": {
                                    "destination": {
                                        "description": "The location to paste to. If the range covers a span that's\na multiple of the source's height or width, then the\ndata will be repeated to fill in the destination range.\nIf the range is smaller than the source range, the entire\nsource data will still be copied (beyond the end of the destination range).",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "pasteOrientation": {
                                        "description": "How that data should be oriented when pasting.",
                                        "enum": [
                                            "NORMAL",
                                            "TRANSPOSE"
                                        ],
                                        "type": "string"
                                    },
                                    "pasteType": {
                                        "description": "What kind of data to paste.",
                                        "enum": [
                                            "PASTE_NORMAL",
                                            "PASTE_VALUES",
                                            "PASTE_FORMAT",
                                            "PASTE_NO_BORDERS",
                                            "PASTE_FORMULA",
                                            "PASTE_DATA_VALIDATION",
                                            "PASTE_CONDITIONAL_FORMATTING"
                                        ],
                                        "type": "string"
                                    },
                                    "source": {
                                        "description": "The source range to copy.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "createDeveloperMetadata": {
                                "description": "Creates new developer metadata",
                                "properties": {
                                    "developerMetadata": {
                                        "description": "The developer metadata to create.",
                                        "properties": {
                                            "location": {
                                                "description": "The location where the metadata is associated.",
                                                "properties": {
                                                    "dimensionRange": {
                                                        "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                                                        "properties": {
                                                            "dimension": {
                                                                "description": "The dimension of the span.",
                                                                "enum": [
                                                                    "DIMENSION_UNSPECIFIED",
                                                                    "ROWS",
                                                                    "COLUMNS"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "endIndex": {
                                                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "sheetId": {
                                                                "description": "The sheet this span is on.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "startIndex": {
                                                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "locationType": {
                                                        "description": "The type of location this object represents.  This field is read-only.",
                                                        "enum": [
                                                            "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                                            "ROW",
                                                            "COLUMN",
                                                            "SHEET",
                                                            "SPREADSHEET"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "sheetId": {
                                                        "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "spreadsheet": {
                                                        "description": "True when metadata is associated with an entire spreadsheet.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "metadataId": {
                                                "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be\nspecified when metadata is created, otherwise one will be randomly\ngenerated and assigned. Must be positive.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "metadataKey": {
                                                "description": "The metadata key. There may be multiple metadata in a spreadsheet with the\nsame key.  Developer metadata must always have a key specified.",
                                                "type": "string"
                                            },
                                            "metadataValue": {
                                                "description": "Data associated with the metadata's key.",
                                                "type": "string"
                                            },
                                            "visibility": {
                                                "description": "The metadata visibility.  Developer metadata must always have a visibility\nspecified.",
                                                "enum": [
                                                    "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                                                    "DOCUMENT",
                                                    "PROJECT"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "cutPaste": {
                                "description": "Cuts data from one area and pastes it to another.",
                                "properties": {
                                    "destination": {
                                        "description": "The top-left coordinate where the data should be pasted.",
                                        "properties": {
                                            "columnIndex": {
                                                "description": "The column index of the coordinate.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "rowIndex": {
                                                "description": "The row index of the coordinate.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this coordinate is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "pasteType": {
                                        "description": "What kind of data to paste.  All the source data will be cut, regardless\nof what is pasted.",
                                        "enum": [
                                            "PASTE_NORMAL",
                                            "PASTE_VALUES",
                                            "PASTE_FORMAT",
                                            "PASTE_NO_BORDERS",
                                            "PASTE_FORMULA",
                                            "PASTE_DATA_VALIDATION",
                                            "PASTE_CONDITIONAL_FORMATTING"
                                        ],
                                        "type": "string"
                                    },
                                    "source": {
                                        "description": "The source data to cut.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteBanding": {
                                "description": "Removes a banded range",
                                "properties": {
                                    "bandedRangeId": {
                                        "description": "The ID of the banded range to delete.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteConditionalFormatRule": {
                                "description": "Deletes an existing conditional format rule.",
                                "properties": {
                                    "index": {
                                        "description": "The zero-based index of the rule to be deleted.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "sheetId": {
                                        "description": "The sheet the rule is being deleted from.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteDeveloperMetadata": {
                                "description": "Deletes developer metadata",
                                "properties": {
                                    "dataFilter": {
                                        "description": "The data filter describing the criteria used to select which developer\nmetadata entry to delete.",
                                        "properties": {
                                            "a1Range": {
                                                "description": "Selects data that matches the specified A1 range.",
                                                "type": "string"
                                            },
                                            "developerMetadataLookup": {
                                                "description": "Selects data associated with the developer metadata matching the criteria\ndescribed by this DeveloperMetadataLookup.",
                                                "properties": {
                                                    "locationMatchingStrategy": {
                                                        "description": "Determines how this lookup matches the location.  If this field is\nspecified as EXACT, only developer metadata associated on the exact\nlocation specified is matched.  If this field is specified to INTERSECTING,\ndeveloper metadata associated on intersecting locations is also\nmatched.  If left unspecified, this field assumes a default value of\nINTERSECTING.\nIf this field is specified, a metadataLocation\nmust also be specified.",
                                                        "enum": [
                                                            "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                                                            "EXACT_LOCATION",
                                                            "INTERSECTING_LOCATION"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "locationType": {
                                                        "description": "Limits the selected developer metadata to those entries which are\nassociated with locations of the specified type.  For example, when this\nfield is specified as ROW this lookup\nonly considers developer metadata associated on rows.  If the field is left\nunspecified, all location types are considered.  This field cannot be\nspecified as SPREADSHEET when\nthe locationMatchingStrategy\nis specified as INTERSECTING or when the\nmetadataLocation is specified as a\nnon-spreadsheet location: spreadsheet metadata cannot intersect any other\ndeveloper metadata location.  This field also must be left unspecified when\nthe locationMatchingStrategy\nis specified as EXACT.",
                                                        "enum": [
                                                            "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                                            "ROW",
                                                            "COLUMN",
                                                            "SHEET",
                                                            "SPREADSHEET"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "metadataId": {
                                                        "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_id.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "metadataKey": {
                                                        "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_key.",
                                                        "type": "string"
                                                    },
                                                    "metadataLocation": {
                                                        "description": "Limits the selected developer metadata to those entries associated with\nthe specified location.  This field either matches exact locations or all\nintersecting locations according the specified\nlocationMatchingStrategy.",
                                                        "properties": {
                                                            "dimensionRange": {
                                                                "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                                                                "properties": {
                                                                    "dimension": {
                                                                        "description": "The dimension of the span.",
                                                                        "enum": [
                                                                            "DIMENSION_UNSPECIFIED",
                                                                            "ROWS",
                                                                            "COLUMNS"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "endIndex": {
                                                                        "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "sheetId": {
                                                                        "description": "The sheet this span is on.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "startIndex": {
                                                                        "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "locationType": {
                                                                "description": "The type of location this object represents.  This field is read-only.",
                                                                "enum": [
                                                                    "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                                                    "ROW",
                                                                    "COLUMN",
                                                                    "SHEET",
                                                                    "SPREADSHEET"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "sheetId": {
                                                                "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "spreadsheet": {
                                                                "description": "True when metadata is associated with an entire spreadsheet.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "metadataValue": {
                                                        "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_value.",
                                                        "type": "string"
                                                    },
                                                    "visibility": {
                                                        "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.visibility.  If left unspecified, all developer\nmetadata visibile to the requesting project is considered.",
                                                        "enum": [
                                                            "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                                                            "DOCUMENT",
                                                            "PROJECT"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "gridRange": {
                                                "description": "Selects data that matches the range described by the GridRange.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteDimension": {
                                "description": "Deletes rows or columns in a sheet.",
                                "properties": {
                                    "range": {
                                        "description": "The dimensions to delete from the sheet.",
                                        "properties": {
                                            "dimension": {
                                                "description": "The dimension of the span.",
                                                "enum": [
                                                    "DIMENSION_UNSPECIFIED",
                                                    "ROWS",
                                                    "COLUMNS"
                                                ],
                                                "type": "string"
                                            },
                                            "endIndex": {
                                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this span is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startIndex": {
                                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteDimensionGroup": {
                                "description": "Deletes a group over the specified range.",
                                "properties": {
                                    "range": {
                                        "description": "The range of the group to be deleted.",
                                        "properties": {
                                            "dimension": {
                                                "description": "The dimension of the span.",
                                                "enum": [
                                                    "DIMENSION_UNSPECIFIED",
                                                    "ROWS",
                                                    "COLUMNS"
                                                ],
                                                "type": "string"
                                            },
                                            "endIndex": {
                                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this span is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startIndex": {
                                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteEmbeddedObject": {
                                "description": "Deletes an embedded object (e.g, chart, image) in a sheet.",
                                "properties": {
                                    "objectId": {
                                        "description": "The ID of the embedded object to delete.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteFilterView": {
                                "description": "Deletes a filter view from a sheet.",
                                "properties": {
                                    "filterId": {
                                        "description": "The ID of the filter to delete.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteNamedRange": {
                                "description": "Deletes a named range.",
                                "properties": {
                                    "namedRangeId": {
                                        "description": "The ID of the named range to delete.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteProtectedRange": {
                                "description": "Deletes a protected range.",
                                "properties": {
                                    "protectedRangeId": {
                                        "description": "The ID of the protected range to delete.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteRange": {
                                "description": "Deletes a range of cells from a sheet, shifting the remaining cells.",
                                "properties": {
                                    "range": {
                                        "description": "The range of cells to delete.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "shiftDimension": {
                                        "description": "The dimension from which deleted cells will be replaced with.\nIf ROWS, existing cells will be shifted upward to\nreplace the deleted cells. If COLUMNS, existing cells\nwill be shifted left to replace the deleted cells.",
                                        "enum": [
                                            "DIMENSION_UNSPECIFIED",
                                            "ROWS",
                                            "COLUMNS"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "deleteSheet": {
                                "description": "Deletes a sheet.",
                                "properties": {
                                    "sheetId": {
                                        "description": "The ID of the sheet to delete.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "duplicateFilterView": {
                                "description": "Duplicates a filter view.",
                                "properties": {
                                    "filterId": {
                                        "description": "The ID of the filter being duplicated.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "duplicateSheet": {
                                "description": "Duplicates a sheet.",
                                "properties": {
                                    "insertSheetIndex": {
                                        "description": "The zero-based index where the new sheet should be inserted.\nThe index of all sheets after this are incremented.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "newSheetId": {
                                        "description": "If set, the ID of the new sheet. If not set, an ID is chosen.\nIf set, the ID must not conflict with any existing sheet ID.\nIf set, it must be non-negative.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "newSheetName": {
                                        "description": "The name of the new sheet.  If empty, a new name is chosen for you.",
                                        "type": "string"
                                    },
                                    "sourceSheetId": {
                                        "description": "The sheet to duplicate.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "findReplace": {
                                "description": "Finds and replaces occurrences of some text with other text.",
                                "properties": {
                                    "allSheets": {
                                        "description": "True to find/replace over all sheets.",
                                        "type": "boolean"
                                    },
                                    "find": {
                                        "description": "The value to search.",
                                        "type": "string"
                                    },
                                    "includeFormulas": {
                                        "description": "True if the search should include cells with formulas.\nFalse to skip cells with formulas.",
                                        "type": "boolean"
                                    },
                                    "matchCase": {
                                        "description": "True if the search is case sensitive.",
                                        "type": "boolean"
                                    },
                                    "matchEntireCell": {
                                        "description": "True if the find value should match the entire cell.",
                                        "type": "boolean"
                                    },
                                    "range": {
                                        "description": "The range to find/replace over.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "replacement": {
                                        "description": "The value to use as the replacement.",
                                        "type": "string"
                                    },
                                    "searchByRegex": {
                                        "description": "True if the find value is a regex.\nThe regular expression and replacement should follow Java regex rules\nat https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html.\nThe replacement string is allowed to refer to capturing groups.\nFor example, if one cell has the contents `\"Google Sheets\"` and another\nhas `\"Google Docs\"`, then searching for `\"o.* (.*)\"` with a replacement of\n`\"$1 Rocks\"` would change the contents of the cells to\n`\"GSheets Rocks\"` and `\"GDocs Rocks\"` respectively.",
                                        "type": "boolean"
                                    },
                                    "sheetId": {
                                        "description": "The sheet to find/replace over.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "insertDimension": {
                                "description": "Inserts new rows or columns in a sheet.",
                                "properties": {
                                    "inheritFromBefore": {
                                        "description": "Whether dimension properties should be extended from the dimensions\nbefore or after the newly inserted dimensions.\nTrue to inherit from the dimensions before (in which case the start\nindex must be greater than 0), and false to inherit from the dimensions\nafter.\n\nFor example, if row index 0 has red background and row index 1\nhas a green background, then inserting 2 rows at index 1 can inherit\neither the green or red background.  If `inheritFromBefore` is true,\nthe two new rows will be red (because the row before the insertion point\nwas red), whereas if `inheritFromBefore` is false, the two new rows will\nbe green (because the row after the insertion point was green).",
                                        "type": "boolean"
                                    },
                                    "range": {
                                        "description": "The dimensions to insert.  Both the start and end indexes must be bounded.",
                                        "properties": {
                                            "dimension": {
                                                "description": "The dimension of the span.",
                                                "enum": [
                                                    "DIMENSION_UNSPECIFIED",
                                                    "ROWS",
                                                    "COLUMNS"
                                                ],
                                                "type": "string"
                                            },
                                            "endIndex": {
                                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this span is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startIndex": {
                                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "insertRange": {
                                "description": "Inserts new cells in a sheet, shifting the existing cells.",
                                "properties": {
                                    "range": {
                                        "description": "The range to insert new cells into.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "shiftDimension": {
                                        "description": "The dimension which will be shifted when inserting cells.\nIf ROWS, existing cells will be shifted down.\nIf COLUMNS, existing cells will be shifted right.",
                                        "enum": [
                                            "DIMENSION_UNSPECIFIED",
                                            "ROWS",
                                            "COLUMNS"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "mergeCells": {
                                "description": "Merges cells together.",
                                "properties": {
                                    "mergeType": {
                                        "description": "How the cells should be merged.",
                                        "enum": [
                                            "MERGE_ALL",
                                            "MERGE_COLUMNS",
                                            "MERGE_ROWS"
                                        ],
                                        "type": "string"
                                    },
                                    "range": {
                                        "description": "The range of cells to merge.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "moveDimension": {
                                "description": "Moves rows or columns to another location in a sheet.",
                                "properties": {
                                    "destinationIndex": {
                                        "description": "The zero-based start index of where to move the source data to,\nbased on the coordinates *before* the source data is removed\nfrom the grid.  Existing data will be shifted down or right\n(depending on the dimension) to make room for the moved dimensions.\nThe source dimensions are removed from the grid, so the\nthe data may end up in a different index than specified.\n\nFor example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move\n`\"1\"` and `\"2\"` to between `\"3\"` and `\"4\"`, the source would be\n`ROWS [1..3)`,and the destination index would be `\"4\"`\n(the zero-based index of row 5).\nThe end result would be `A1..A5` of `0, 3, 1, 2, 4`.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "source": {
                                        "description": "The source dimensions to move.",
                                        "properties": {
                                            "dimension": {
                                                "description": "The dimension of the span.",
                                                "enum": [
                                                    "DIMENSION_UNSPECIFIED",
                                                    "ROWS",
                                                    "COLUMNS"
                                                ],
                                                "type": "string"
                                            },
                                            "endIndex": {
                                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this span is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startIndex": {
                                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "pasteData": {
                                "description": "Pastes data (HTML or delimited) into a sheet.",
                                "properties": {
                                    "coordinate": {
                                        "description": "The coordinate at which the data should start being inserted.",
                                        "properties": {
                                            "columnIndex": {
                                                "description": "The column index of the coordinate.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "rowIndex": {
                                                "description": "The row index of the coordinate.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this coordinate is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "data": {
                                        "description": "The data to insert.",
                                        "type": "string"
                                    },
                                    "delimiter": {
                                        "description": "The delimiter in the data.",
                                        "type": "string"
                                    },
                                    "html": {
                                        "description": "True if the data is HTML.",
                                        "type": "boolean"
                                    },
                                    "type": {
                                        "description": "How the data should be pasted.",
                                        "enum": [
                                            "PASTE_NORMAL",
                                            "PASTE_VALUES",
                                            "PASTE_FORMAT",
                                            "PASTE_NO_BORDERS",
                                            "PASTE_FORMULA",
                                            "PASTE_DATA_VALIDATION",
                                            "PASTE_CONDITIONAL_FORMATTING"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "randomizeRange": {
                                "description": "Randomizes the order of the rows in a range.",
                                "properties": {
                                    "range": {
                                        "description": "The range to randomize.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "repeatCell": {
                                "description": "Repeats a single cell across a range.",
                                "properties": {
                                    "cell": {
                                        "description": "The data to write.",
                                        "properties": {
                                            "dataValidation": {
                                                "description": "A data validation rule on the cell, if any.\n\nWhen writing, the new data validation rule will overwrite any prior rule.",
                                                "properties": {
                                                    "condition": {
                                                        "description": "The condition that data in the cell must match.",
                                                        "properties": {
                                                            "type": {
                                                                "description": "The type of condition.",
                                                                "enum": [
                                                                    "CONDITION_TYPE_UNSPECIFIED",
                                                                    "NUMBER_GREATER",
                                                                    "NUMBER_GREATER_THAN_EQ",
                                                                    "NUMBER_LESS",
                                                                    "NUMBER_LESS_THAN_EQ",
                                                                    "NUMBER_EQ",
                                                                    "NUMBER_NOT_EQ",
                                                                    "NUMBER_BETWEEN",
                                                                    "NUMBER_NOT_BETWEEN",
                                                                    "TEXT_CONTAINS",
                                                                    "TEXT_NOT_CONTAINS",
                                                                    "TEXT_STARTS_WITH",
                                                                    "TEXT_ENDS_WITH",
                                                                    "TEXT_EQ",
                                                                    "TEXT_IS_EMAIL",
                                                                    "TEXT_IS_URL",
                                                                    "DATE_EQ",
                                                                    "DATE_BEFORE",
                                                                    "DATE_AFTER",
                                                                    "DATE_ON_OR_BEFORE",
                                                                    "DATE_ON_OR_AFTER",
                                                                    "DATE_BETWEEN",
                                                                    "DATE_NOT_BETWEEN",
                                                                    "DATE_IS_VALID",
                                                                    "ONE_OF_RANGE",
                                                                    "ONE_OF_LIST",
                                                                    "BLANK",
                                                                    "NOT_BLANK",
                                                                    "CUSTOM_FORMULA",
                                                                    "BOOLEAN"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "values": {
                                                                "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                                "items": {
                                                                    "description": "The value of the condition.",
                                                                    "properties": {
                                                                        "relativeDate": {
                                                                            "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                                            "enum": [
                                                                                "RELATIVE_DATE_UNSPECIFIED",
                                                                                "PAST_YEAR",
                                                                                "PAST_MONTH",
                                                                                "PAST_WEEK",
                                                                                "YESTERDAY",
                                                                                "TODAY",
                                                                                "TOMORROW"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "userEnteredValue": {
                                                                            "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "inputMessage": {
                                                        "description": "A message to show the user when adding data to the cell.",
                                                        "type": "string"
                                                    },
                                                    "showCustomUi": {
                                                        "description": "True if the UI should be customized based on the kind of condition.\nIf true, \"List\" conditions will show a dropdown.",
                                                        "type": "boolean"
                                                    },
                                                    "strict": {
                                                        "description": "True if invalid data should be rejected.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "effectiveFormat": {
                                                "description": "The effective format being used by the cell.\nThis includes the results of applying any conditional formatting and,\nif the cell contains a formula, the computed number format.\nIf the effective format is the default format, effective format will\nnot be written.\nThis field is read-only.",
                                                "properties": {
                                                    "backgroundColor": {
                                                        "description": "The background color of the cell.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "borders": {
                                                        "description": "The borders of the cell.",
                                                        "properties": {
                                                            "bottom": {
                                                                "description": "The bottom border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "left": {
                                                                "description": "The left border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "right": {
                                                                "description": "The right border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "top": {
                                                                "description": "The top border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "horizontalAlignment": {
                                                        "description": "The horizontal alignment of the value in the cell.",
                                                        "enum": [
                                                            "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                            "LEFT",
                                                            "CENTER",
                                                            "RIGHT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "hyperlinkDisplayType": {
                                                        "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                        "enum": [
                                                            "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                            "LINKED",
                                                            "PLAIN_TEXT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "numberFormat": {
                                                        "description": "A format describing how number values should be represented to the user.",
                                                        "properties": {
                                                            "pattern": {
                                                                "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                                "enum": [
                                                                    "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                                    "TEXT",
                                                                    "NUMBER",
                                                                    "PERCENT",
                                                                    "CURRENCY",
                                                                    "DATE",
                                                                    "TIME",
                                                                    "DATE_TIME",
                                                                    "SCIENTIFIC"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "padding": {
                                                        "description": "The padding of the cell.",
                                                        "properties": {
                                                            "bottom": {
                                                                "description": "The bottom padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "left": {
                                                                "description": "The left padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "right": {
                                                                "description": "The right padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "top": {
                                                                "description": "The top padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "textDirection": {
                                                        "description": "The direction of the text in the cell.",
                                                        "enum": [
                                                            "TEXT_DIRECTION_UNSPECIFIED",
                                                            "LEFT_TO_RIGHT",
                                                            "RIGHT_TO_LEFT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "textFormat": {
                                                        "description": "The format of the text in the cell (unless overridden by a format run).",
                                                        "properties": {
                                                            "bold": {
                                                                "description": "True if the text is bold.",
                                                                "type": "boolean"
                                                            },
                                                            "fontFamily": {
                                                                "description": "The font family.",
                                                                "type": "string"
                                                            },
                                                            "fontSize": {
                                                                "description": "The size of the font.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "foregroundColor": {
                                                                "description": "The foreground color of the text.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "italic": {
                                                                "description": "True if the text is italicized.",
                                                                "type": "boolean"
                                                            },
                                                            "strikethrough": {
                                                                "description": "True if the text has a strikethrough.",
                                                                "type": "boolean"
                                                            },
                                                            "underline": {
                                                                "description": "True if the text is underlined.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "textRotation": {
                                                        "description": "The rotation applied to text in a cell",
                                                        "properties": {
                                                            "angle": {
                                                                "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "vertical": {
                                                                "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "verticalAlignment": {
                                                        "description": "The vertical alignment of the value in the cell.",
                                                        "enum": [
                                                            "VERTICAL_ALIGN_UNSPECIFIED",
                                                            "TOP",
                                                            "MIDDLE",
                                                            "BOTTOM"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "wrapStrategy": {
                                                        "description": "The wrap strategy for the value in the cell.",
                                                        "enum": [
                                                            "WRAP_STRATEGY_UNSPECIFIED",
                                                            "OVERFLOW_CELL",
                                                            "LEGACY_WRAP",
                                                            "CLIP",
                                                            "WRAP"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "effectiveValue": {
                                                "description": "The effective value of the cell. For cells with formulas, this is\nthe calculated value.  For cells with literals, this is\nthe same as the user_entered_value.\nThis field is read-only.",
                                                "properties": {
                                                    "boolValue": {
                                                        "description": "Represents a boolean value.",
                                                        "type": "boolean"
                                                    },
                                                    "errorValue": {
                                                        "description": "Represents an error.\nThis field is read-only.",
                                                        "properties": {
                                                            "message": {
                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The type of error.",
                                                                "enum": [
                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                    "ERROR",
                                                                    "NULL_VALUE",
                                                                    "DIVIDE_BY_ZERO",
                                                                    "VALUE",
                                                                    "REF",
                                                                    "NAME",
                                                                    "NUM",
                                                                    "N_A",
                                                                    "LOADING"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "formulaValue": {
                                                        "description": "Represents a formula.",
                                                        "type": "string"
                                                    },
                                                    "numberValue": {
                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                        "format": "double",
                                                        "type": "number"
                                                    },
                                                    "stringValue": {
                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "formattedValue": {
                                                "description": "The formatted value of the cell.\nThis is the value as it's shown to the user.\nThis field is read-only.",
                                                "type": "string"
                                            },
                                            "hyperlink": {
                                                "description": "A hyperlink this cell points to, if any.\nThis field is read-only.  (To set it, use a `=HYPERLINK` formula\nin the userEnteredValue.formulaValue\nfield.)",
                                                "type": "string"
                                            },
                                            "note": {
                                                "description": "Any note on the cell.",
                                                "type": "string"
                                            },
                                            "pivotTable": {
                                                "description": "A pivot table anchored at this cell. The size of pivot table itself\nis computed dynamically based on its data, grouping, filters, values,\netc. Only the top-left cell of the pivot table contains the pivot table\ndefinition. The other cells will contain the calculated values of the\nresults of the pivot in their effective_value fields.",
                                                "properties": {
                                                    "columns": {
                                                        "description": "Each column grouping in the pivot table.",
                                                        "items": {
                                                            "description": "A single grouping (either row or column) in a pivot table.",
                                                            "properties": {
                                                                "groupRule": {
                                                                    "description": "The group rule to apply to this row/column group.",
                                                                    "properties": {
                                                                        "dateTimeRule": {
                                                                            "description": "A DateTimeRule.",
                                                                            "properties": {
                                                                                "type": {
                                                                                    "description": "The type of date-time grouping to apply.",
                                                                                    "enum": [
                                                                                        "DATE_TIME_RULE_TYPE_UNSPECIFIED",
                                                                                        "SECOND",
                                                                                        "MINUTE",
                                                                                        "HOUR",
                                                                                        "HOUR_MINUTE",
                                                                                        "HOUR_MINUTE_AMPM",
                                                                                        "DAY_OF_WEEK",
                                                                                        "DAY_OF_YEAR",
                                                                                        "DAY_OF_MONTH",
                                                                                        "DAY_MONTH",
                                                                                        "MONTH",
                                                                                        "QUARTER",
                                                                                        "YEAR",
                                                                                        "YEAR_MONTH",
                                                                                        "YEAR_QUARTER",
                                                                                        "YEAR_MONTH_DAY"
                                                                                    ],
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "histogramRule": {
                                                                            "description": "A HistogramRule.",
                                                                            "properties": {
                                                                                "end": {
                                                                                    "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
                                                                                    "format": "double",
                                                                                    "type": "number"
                                                                                },
                                                                                "interval": {
                                                                                    "description": "The size of the buckets that are created. Must be positive.",
                                                                                    "format": "double",
                                                                                    "type": "number"
                                                                                },
                                                                                "start": {
                                                                                    "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
                                                                                    "format": "double",
                                                                                    "type": "number"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "manualRule": {
                                                                            "description": "A ManualRule.",
                                                                            "properties": {
                                                                                "groups": {
                                                                                    "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
                                                                                    "items": {
                                                                                        "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
                                                                                        "properties": {
                                                                                            "groupName": {
                                                                                                "description": "The group name, which must be a string. Each group in a given\nManualRule must have a unique group name.",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "items": {
                                                                                                "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
                                                                                                "items": {
                                                                                                    "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                    "properties": {
                                                                                                        "boolValue": {
                                                                                                            "description": "Represents a boolean value.",
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "errorValue": {
                                                                                                            "description": "Represents an error.\nThis field is read-only.",
                                                                                                            "properties": {
                                                                                                                "message": {
                                                                                                                    "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                    "type": "string"
                                                                                                                },
                                                                                                                "type": {
                                                                                                                    "description": "The type of error.",
                                                                                                                    "enum": [
                                                                                                                        "ERROR_TYPE_UNSPECIFIED",
                                                                                                                        "ERROR",
                                                                                                                        "NULL_VALUE",
                                                                                                                        "DIVIDE_BY_ZERO",
                                                                                                                        "VALUE",
                                                                                                                        "REF",
                                                                                                                        "NAME",
                                                                                                                        "NUM",
                                                                                                                        "N_A",
                                                                                                                        "LOADING"
                                                                                                                    ],
                                                                                                                    "type": "string"
                                                                                                                }
                                                                                                            },
                                                                                                            "type": "object"
                                                                                                        },
                                                                                                        "formulaValue": {
                                                                                                            "description": "Represents a formula.",
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "numberValue": {
                                                                                                            "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                            "format": "double",
                                                                                                            "type": "number"
                                                                                                        },
                                                                                                        "stringValue": {
                                                                                                            "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "label": {
                                                                    "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+",
                                                                    "type": "string"
                                                                },
                                                                "repeatHeadings": {
                                                                    "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
                                                                    "type": "boolean"
                                                                },
                                                                "showTotals": {
                                                                    "description": "True if the pivot table should include the totals for this grouping.",
                                                                    "type": "boolean"
                                                                },
                                                                "sortOrder": {
                                                                    "description": "The order the values in this group should be sorted.",
                                                                    "enum": [
                                                                        "SORT_ORDER_UNSPECIFIED",
                                                                        "ASCENDING",
                                                                        "DESCENDING"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "sourceColumnOffset": {
                                                                    "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
                                                                    "format": "int32",
                                                                    "type": "integer"
                                                                },
                                                                "valueBucket": {
                                                                    "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
                                                                    "properties": {
                                                                        "buckets": {
                                                                            "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
                                                                            "items": {
                                                                                "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                "properties": {
                                                                                    "boolValue": {
                                                                                        "description": "Represents a boolean value.",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "errorValue": {
                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                        "properties": {
                                                                                            "message": {
                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": {
                                                                                                "description": "The type of error.",
                                                                                                "enum": [
                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                    "ERROR",
                                                                                                    "NULL_VALUE",
                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                    "VALUE",
                                                                                                    "REF",
                                                                                                    "NAME",
                                                                                                    "NUM",
                                                                                                    "N_A",
                                                                                                    "LOADING"
                                                                                                ],
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "formulaValue": {
                                                                                        "description": "Represents a formula.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "numberValue": {
                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                        "format": "double",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "stringValue": {
                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "valuesIndex": {
                                                                            "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "valueMetadata": {
                                                                    "description": "Metadata about values in the grouping.",
                                                                    "items": {
                                                                        "description": "Metadata about a value in a pivot grouping.",
                                                                        "properties": {
                                                                            "collapsed": {
                                                                                "description": "True if the data corresponding to the value is collapsed.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "value": {
                                                                                "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
                                                                                "properties": {
                                                                                    "boolValue": {
                                                                                        "description": "Represents a boolean value.",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "errorValue": {
                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                        "properties": {
                                                                                            "message": {
                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": {
                                                                                                "description": "The type of error.",
                                                                                                "enum": [
                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                    "ERROR",
                                                                                                    "NULL_VALUE",
                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                    "VALUE",
                                                                                                    "REF",
                                                                                                    "NAME",
                                                                                                    "NUM",
                                                                                                    "N_A",
                                                                                                    "LOADING"
                                                                                                ],
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "formulaValue": {
                                                                                        "description": "Represents a formula.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "numberValue": {
                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                        "format": "double",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "stringValue": {
                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "criteria": {
                                                        "additionalProperties": {
                                                            "description": "Criteria for showing/hiding rows in a pivot table.",
                                                            "properties": {
                                                                "visibleValues": {
                                                                    "description": "Values that should be included.  Values not listed here are excluded.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "description": "An optional mapping of filters per source column offset.\n\nThe filters are applied before aggregating data into the pivot table.\nThe map's key is the column offset of the source range that you want to\nfilter, and the value is the criteria for that column.\n\nFor example, if the source was `C10:E15`, a key of `0` will have the filter\nfor column `C`, whereas the key `1` is for column `D`.",
                                                        "type": "object"
                                                    },
                                                    "rows": {
                                                        "description": "Each row grouping in the pivot table.",
                                                        "items": {
                                                            "description": "A single grouping (either row or column) in a pivot table.",
                                                            "properties": {
                                                                "groupRule": {
                                                                    "description": "The group rule to apply to this row/column group.",
                                                                    "properties": {
                                                                        "dateTimeRule": {
                                                                            "description": "A DateTimeRule.",
                                                                            "properties": {
                                                                                "type": {
                                                                                    "description": "The type of date-time grouping to apply.",
                                                                                    "enum": [
                                                                                        "DATE_TIME_RULE_TYPE_UNSPECIFIED",
                                                                                        "SECOND",
                                                                                        "MINUTE",
                                                                                        "HOUR",
                                                                                        "HOUR_MINUTE",
                                                                                        "HOUR_MINUTE_AMPM",
                                                                                        "DAY_OF_WEEK",
                                                                                        "DAY_OF_YEAR",
                                                                                        "DAY_OF_MONTH",
                                                                                        "DAY_MONTH",
                                                                                        "MONTH",
                                                                                        "QUARTER",
                                                                                        "YEAR",
                                                                                        "YEAR_MONTH",
                                                                                        "YEAR_QUARTER",
                                                                                        "YEAR_MONTH_DAY"
                                                                                    ],
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "histogramRule": {
                                                                            "description": "A HistogramRule.",
                                                                            "properties": {
                                                                                "end": {
                                                                                    "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
                                                                                    "format": "double",
                                                                                    "type": "number"
                                                                                },
                                                                                "interval": {
                                                                                    "description": "The size of the buckets that are created. Must be positive.",
                                                                                    "format": "double",
                                                                                    "type": "number"
                                                                                },
                                                                                "start": {
                                                                                    "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
                                                                                    "format": "double",
                                                                                    "type": "number"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "manualRule": {
                                                                            "description": "A ManualRule.",
                                                                            "properties": {
                                                                                "groups": {
                                                                                    "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
                                                                                    "items": {
                                                                                        "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
                                                                                        "properties": {
                                                                                            "groupName": {
                                                                                                "description": "The group name, which must be a string. Each group in a given\nManualRule must have a unique group name.",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "items": {
                                                                                                "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
                                                                                                "items": {
                                                                                                    "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                    "properties": {
                                                                                                        "boolValue": {
                                                                                                            "description": "Represents a boolean value.",
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "errorValue": {
                                                                                                            "description": "Represents an error.\nThis field is read-only.",
                                                                                                            "properties": {
                                                                                                                "message": {
                                                                                                                    "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                    "type": "string"
                                                                                                                },
                                                                                                                "type": {
                                                                                                                    "description": "The type of error.",
                                                                                                                    "enum": [
                                                                                                                        "ERROR_TYPE_UNSPECIFIED",
                                                                                                                        "ERROR",
                                                                                                                        "NULL_VALUE",
                                                                                                                        "DIVIDE_BY_ZERO",
                                                                                                                        "VALUE",
                                                                                                                        "REF",
                                                                                                                        "NAME",
                                                                                                                        "NUM",
                                                                                                                        "N_A",
                                                                                                                        "LOADING"
                                                                                                                    ],
                                                                                                                    "type": "string"
                                                                                                                }
                                                                                                            },
                                                                                                            "type": "object"
                                                                                                        },
                                                                                                        "formulaValue": {
                                                                                                            "description": "Represents a formula.",
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "numberValue": {
                                                                                                            "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                            "format": "double",
                                                                                                            "type": "number"
                                                                                                        },
                                                                                                        "stringValue": {
                                                                                                            "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "label": {
                                                                    "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+",
                                                                    "type": "string"
                                                                },
                                                                "repeatHeadings": {
                                                                    "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
                                                                    "type": "boolean"
                                                                },
                                                                "showTotals": {
                                                                    "description": "True if the pivot table should include the totals for this grouping.",
                                                                    "type": "boolean"
                                                                },
                                                                "sortOrder": {
                                                                    "description": "The order the values in this group should be sorted.",
                                                                    "enum": [
                                                                        "SORT_ORDER_UNSPECIFIED",
                                                                        "ASCENDING",
                                                                        "DESCENDING"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "sourceColumnOffset": {
                                                                    "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
                                                                    "format": "int32",
                                                                    "type": "integer"
                                                                },
                                                                "valueBucket": {
                                                                    "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
                                                                    "properties": {
                                                                        "buckets": {
                                                                            "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
                                                                            "items": {
                                                                                "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                "properties": {
                                                                                    "boolValue": {
                                                                                        "description": "Represents a boolean value.",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "errorValue": {
                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                        "properties": {
                                                                                            "message": {
                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": {
                                                                                                "description": "The type of error.",
                                                                                                "enum": [
                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                    "ERROR",
                                                                                                    "NULL_VALUE",
                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                    "VALUE",
                                                                                                    "REF",
                                                                                                    "NAME",
                                                                                                    "NUM",
                                                                                                    "N_A",
                                                                                                    "LOADING"
                                                                                                ],
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "formulaValue": {
                                                                                        "description": "Represents a formula.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "numberValue": {
                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                        "format": "double",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "stringValue": {
                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "valuesIndex": {
                                                                            "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "valueMetadata": {
                                                                    "description": "Metadata about values in the grouping.",
                                                                    "items": {
                                                                        "description": "Metadata about a value in a pivot grouping.",
                                                                        "properties": {
                                                                            "collapsed": {
                                                                                "description": "True if the data corresponding to the value is collapsed.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "value": {
                                                                                "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
                                                                                "properties": {
                                                                                    "boolValue": {
                                                                                        "description": "Represents a boolean value.",
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "errorValue": {
                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                        "properties": {
                                                                                            "message": {
                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": {
                                                                                                "description": "The type of error.",
                                                                                                "enum": [
                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                    "ERROR",
                                                                                                    "NULL_VALUE",
                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                    "VALUE",
                                                                                                    "REF",
                                                                                                    "NAME",
                                                                                                    "NUM",
                                                                                                    "N_A",
                                                                                                    "LOADING"
                                                                                                ],
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "formulaValue": {
                                                                                        "description": "Represents a formula.",
                                                                                        "type": "string"
                                                                                    },
                                                                                    "numberValue": {
                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                        "format": "double",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "stringValue": {
                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "source": {
                                                        "description": "The range the pivot table is reading data from.",
                                                        "properties": {
                                                            "endColumnIndex": {
                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "endRowIndex": {
                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "sheetId": {
                                                                "description": "The sheet this range is on.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "startColumnIndex": {
                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "startRowIndex": {
                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "valueLayout": {
                                                        "description": "Whether values should be listed horizontally (as columns)\nor vertically (as rows).",
                                                        "enum": [
                                                            "HORIZONTAL",
                                                            "VERTICAL"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "values": {
                                                        "description": "A list of values to include in the pivot table.",
                                                        "items": {
                                                            "description": "The definition of how a value in a pivot table should be calculated.",
                                                            "properties": {
                                                                "calculatedDisplayType": {
                                                                    "description": "If specified, indicates that pivot values should be displayed as\nthe result of a calculation with another pivot value. For example, if\ncalculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the\npivot values are displayed as the percentage of the grand total. In\nthe Sheets UI, this is referred to as \"Show As\" in the value section of a\npivot table.",
                                                                    "enum": [
                                                                        "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED",
                                                                        "PERCENT_OF_ROW_TOTAL",
                                                                        "PERCENT_OF_COLUMN_TOTAL",
                                                                        "PERCENT_OF_GRAND_TOTAL"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "formula": {
                                                                    "description": "A custom formula to calculate the value.  The formula must start\nwith an `=` character.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "A name to use for the value.",
                                                                    "type": "string"
                                                                },
                                                                "sourceColumnOffset": {
                                                                    "description": "The column offset of the source range that this value reads from.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this value refers to column `C`, whereas the offset `1` would\nrefer to column `D`.",
                                                                    "format": "int32",
                                                                    "type": "integer"
                                                                },
                                                                "summarizeFunction": {
                                                                    "description": "A function to summarize the value.\nIf formula is set, the only supported values are\nSUM and\nCUSTOM.\nIf sourceColumnOffset is set, then `CUSTOM`\nis not supported.",
                                                                    "enum": [
                                                                        "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED",
                                                                        "SUM",
                                                                        "COUNTA",
                                                                        "COUNT",
                                                                        "COUNTUNIQUE",
                                                                        "AVERAGE",
                                                                        "MAX",
                                                                        "MIN",
                                                                        "MEDIAN",
                                                                        "PRODUCT",
                                                                        "STDEV",
                                                                        "STDEVP",
                                                                        "VAR",
                                                                        "VARP",
                                                                        "CUSTOM"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "textFormatRuns": {
                                                "description": "Runs of rich text applied to subsections of the cell.  Runs are only valid\non user entered strings, not formulas, bools, or numbers.\nRuns start at specific indexes in the text and continue until the next\nrun. Properties of a run will continue unless explicitly changed\nin a subsequent run (and properties of the first run will continue\nthe properties of the cell unless explicitly changed).\n\nWhen writing, the new runs will overwrite any prior runs.  When writing a\nnew user_entered_value, previous runs are erased.",
                                                "items": {
                                                    "description": "A run of a text format. The format of this run continues until the start\nindex of the next run.\nWhen updating, all fields must be set.",
                                                    "properties": {
                                                        "format": {
                                                            "description": "The format of this run.  Absent values inherit the cell's format.",
                                                            "properties": {
                                                                "bold": {
                                                                    "description": "True if the text is bold.",
                                                                    "type": "boolean"
                                                                },
                                                                "fontFamily": {
                                                                    "description": "The font family.",
                                                                    "type": "string"
                                                                },
                                                                "fontSize": {
                                                                    "description": "The size of the font.",
                                                                    "format": "int32",
                                                                    "type": "integer"
                                                                },
                                                                "foregroundColor": {
                                                                    "description": "The foreground color of the text.",
                                                                    "properties": {
                                                                        "alpha": {
                                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "blue": {
                                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "green": {
                                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "red": {
                                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "italic": {
                                                                    "description": "True if the text is italicized.",
                                                                    "type": "boolean"
                                                                },
                                                                "strikethrough": {
                                                                    "description": "True if the text has a strikethrough.",
                                                                    "type": "boolean"
                                                                },
                                                                "underline": {
                                                                    "description": "True if the text is underlined.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "startIndex": {
                                                            "description": "The character index where this run starts.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "userEnteredFormat": {
                                                "description": "The format the user entered for the cell.\n\nWhen writing, the new format will be merged with the existing format.",
                                                "properties": {
                                                    "backgroundColor": {
                                                        "description": "The background color of the cell.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "borders": {
                                                        "description": "The borders of the cell.",
                                                        "properties": {
                                                            "bottom": {
                                                                "description": "The bottom border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "left": {
                                                                "description": "The left border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "right": {
                                                                "description": "The right border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "top": {
                                                                "description": "The top border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "horizontalAlignment": {
                                                        "description": "The horizontal alignment of the value in the cell.",
                                                        "enum": [
                                                            "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                            "LEFT",
                                                            "CENTER",
                                                            "RIGHT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "hyperlinkDisplayType": {
                                                        "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                        "enum": [
                                                            "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                            "LINKED",
                                                            "PLAIN_TEXT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "numberFormat": {
                                                        "description": "A format describing how number values should be represented to the user.",
                                                        "properties": {
                                                            "pattern": {
                                                                "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                                "enum": [
                                                                    "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                                    "TEXT",
                                                                    "NUMBER",
                                                                    "PERCENT",
                                                                    "CURRENCY",
                                                                    "DATE",
                                                                    "TIME",
                                                                    "DATE_TIME",
                                                                    "SCIENTIFIC"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "padding": {
                                                        "description": "The padding of the cell.",
                                                        "properties": {
                                                            "bottom": {
                                                                "description": "The bottom padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "left": {
                                                                "description": "The left padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "right": {
                                                                "description": "The right padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "top": {
                                                                "description": "The top padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "textDirection": {
                                                        "description": "The direction of the text in the cell.",
                                                        "enum": [
                                                            "TEXT_DIRECTION_UNSPECIFIED",
                                                            "LEFT_TO_RIGHT",
                                                            "RIGHT_TO_LEFT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "textFormat": {
                                                        "description": "The format of the text in the cell (unless overridden by a format run).",
                                                        "properties": {
                                                            "bold": {
                                                                "description": "True if the text is bold.",
                                                                "type": "boolean"
                                                            },
                                                            "fontFamily": {
                                                                "description": "The font family.",
                                                                "type": "string"
                                                            },
                                                            "fontSize": {
                                                                "description": "The size of the font.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "foregroundColor": {
                                                                "description": "The foreground color of the text.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "italic": {
                                                                "description": "True if the text is italicized.",
                                                                "type": "boolean"
                                                            },
                                                            "strikethrough": {
                                                                "description": "True if the text has a strikethrough.",
                                                                "type": "boolean"
                                                            },
                                                            "underline": {
                                                                "description": "True if the text is underlined.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "textRotation": {
                                                        "description": "The rotation applied to text in a cell",
                                                        "properties": {
                                                            "angle": {
                                                                "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "vertical": {
                                                                "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "verticalAlignment": {
                                                        "description": "The vertical alignment of the value in the cell.",
                                                        "enum": [
                                                            "VERTICAL_ALIGN_UNSPECIFIED",
                                                            "TOP",
                                                            "MIDDLE",
                                                            "BOTTOM"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "wrapStrategy": {
                                                        "description": "The wrap strategy for the value in the cell.",
                                                        "enum": [
                                                            "WRAP_STRATEGY_UNSPECIFIED",
                                                            "OVERFLOW_CELL",
                                                            "LEGACY_WRAP",
                                                            "CLIP",
                                                            "WRAP"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "userEnteredValue": {
                                                "description": "The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()`\nNote: Dates, Times and DateTimes are represented as doubles in\nserial number format.",
                                                "properties": {
                                                    "boolValue": {
                                                        "description": "Represents a boolean value.",
                                                        "type": "boolean"
                                                    },
                                                    "errorValue": {
                                                        "description": "Represents an error.\nThis field is read-only.",
                                                        "properties": {
                                                            "message": {
                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The type of error.",
                                                                "enum": [
                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                    "ERROR",
                                                                    "NULL_VALUE",
                                                                    "DIVIDE_BY_ZERO",
                                                                    "VALUE",
                                                                    "REF",
                                                                    "NAME",
                                                                    "NUM",
                                                                    "N_A",
                                                                    "LOADING"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "formulaValue": {
                                                        "description": "Represents a formula.",
                                                        "type": "string"
                                                    },
                                                    "numberValue": {
                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                        "format": "double",
                                                        "type": "number"
                                                    },
                                                    "stringValue": {
                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root `cell` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "range": {
                                        "description": "The range to repeat the cell in.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "setBasicFilter": {
                                "description": "Sets the basic filter on a sheet.",
                                "properties": {
                                    "filter": {
                                        "description": "The filter to set.",
                                        "properties": {
                                            "criteria": {
                                                "additionalProperties": {
                                                    "description": "Criteria for showing/hiding rows in a filter or filter view.",
                                                    "properties": {
                                                        "condition": {
                                                            "description": "A condition that must be true for values to be shown.\n(This does not override hiddenValues -- if a value is listed there,\n it will still be hidden.)",
                                                            "properties": {
                                                                "type": {
                                                                    "description": "The type of condition.",
                                                                    "enum": [
                                                                        "CONDITION_TYPE_UNSPECIFIED",
                                                                        "NUMBER_GREATER",
                                                                        "NUMBER_GREATER_THAN_EQ",
                                                                        "NUMBER_LESS",
                                                                        "NUMBER_LESS_THAN_EQ",
                                                                        "NUMBER_EQ",
                                                                        "NUMBER_NOT_EQ",
                                                                        "NUMBER_BETWEEN",
                                                                        "NUMBER_NOT_BETWEEN",
                                                                        "TEXT_CONTAINS",
                                                                        "TEXT_NOT_CONTAINS",
                                                                        "TEXT_STARTS_WITH",
                                                                        "TEXT_ENDS_WITH",
                                                                        "TEXT_EQ",
                                                                        "TEXT_IS_EMAIL",
                                                                        "TEXT_IS_URL",
                                                                        "DATE_EQ",
                                                                        "DATE_BEFORE",
                                                                        "DATE_AFTER",
                                                                        "DATE_ON_OR_BEFORE",
                                                                        "DATE_ON_OR_AFTER",
                                                                        "DATE_BETWEEN",
                                                                        "DATE_NOT_BETWEEN",
                                                                        "DATE_IS_VALID",
                                                                        "ONE_OF_RANGE",
                                                                        "ONE_OF_LIST",
                                                                        "BLANK",
                                                                        "NOT_BLANK",
                                                                        "CUSTOM_FORMULA",
                                                                        "BOOLEAN"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                                    "items": {
                                                                        "description": "The value of the condition.",
                                                                        "properties": {
                                                                            "relativeDate": {
                                                                                "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                                                "enum": [
                                                                                    "RELATIVE_DATE_UNSPECIFIED",
                                                                                    "PAST_YEAR",
                                                                                    "PAST_MONTH",
                                                                                    "PAST_WEEK",
                                                                                    "YESTERDAY",
                                                                                    "TODAY",
                                                                                    "TOMORROW"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "userEnteredValue": {
                                                                                "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "hiddenValues": {
                                                            "description": "Values that should be hidden.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
                                                "type": "object"
                                            },
                                            "range": {
                                                "description": "The range the filter covers.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "sortSpecs": {
                                                "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
                                                "items": {
                                                    "description": "A sort order associated with a specific column or row.",
                                                    "properties": {
                                                        "dimensionIndex": {
                                                            "description": "The dimension the sort should be applied to.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "sortOrder": {
                                                            "description": "The order data should be sorted.",
                                                            "enum": [
                                                                "SORT_ORDER_UNSPECIFIED",
                                                                "ASCENDING",
                                                                "DESCENDING"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "setDataValidation": {
                                "description": "Sets data validation for one or more cells.",
                                "properties": {
                                    "range": {
                                        "description": "The range the data validation rule should apply to.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "rule": {
                                        "description": "The data validation rule to set on each cell in the range,\nor empty to clear the data validation in the range.",
                                        "properties": {
                                            "condition": {
                                                "description": "The condition that data in the cell must match.",
                                                "properties": {
                                                    "type": {
                                                        "description": "The type of condition.",
                                                        "enum": [
                                                            "CONDITION_TYPE_UNSPECIFIED",
                                                            "NUMBER_GREATER",
                                                            "NUMBER_GREATER_THAN_EQ",
                                                            "NUMBER_LESS",
                                                            "NUMBER_LESS_THAN_EQ",
                                                            "NUMBER_EQ",
                                                            "NUMBER_NOT_EQ",
                                                            "NUMBER_BETWEEN",
                                                            "NUMBER_NOT_BETWEEN",
                                                            "TEXT_CONTAINS",
                                                            "TEXT_NOT_CONTAINS",
                                                            "TEXT_STARTS_WITH",
                                                            "TEXT_ENDS_WITH",
                                                            "TEXT_EQ",
                                                            "TEXT_IS_EMAIL",
                                                            "TEXT_IS_URL",
                                                            "DATE_EQ",
                                                            "DATE_BEFORE",
                                                            "DATE_AFTER",
                                                            "DATE_ON_OR_BEFORE",
                                                            "DATE_ON_OR_AFTER",
                                                            "DATE_BETWEEN",
                                                            "DATE_NOT_BETWEEN",
                                                            "DATE_IS_VALID",
                                                            "ONE_OF_RANGE",
                                                            "ONE_OF_LIST",
                                                            "BLANK",
                                                            "NOT_BLANK",
                                                            "CUSTOM_FORMULA",
                                                            "BOOLEAN"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "values": {
                                                        "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                        "items": {
                                                            "description": "The value of the condition.",
                                                            "properties": {
                                                                "relativeDate": {
                                                                    "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                                    "enum": [
                                                                        "RELATIVE_DATE_UNSPECIFIED",
                                                                        "PAST_YEAR",
                                                                        "PAST_MONTH",
                                                                        "PAST_WEEK",
                                                                        "YESTERDAY",
                                                                        "TODAY",
                                                                        "TOMORROW"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "userEnteredValue": {
                                                                    "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "inputMessage": {
                                                "description": "A message to show the user when adding data to the cell.",
                                                "type": "string"
                                            },
                                            "showCustomUi": {
                                                "description": "True if the UI should be customized based on the kind of condition.\nIf true, \"List\" conditions will show a dropdown.",
                                                "type": "boolean"
                                            },
                                            "strict": {
                                                "description": "True if invalid data should be rejected.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "sortRange": {
                                "description": "Sorts data in a range.",
                                "properties": {
                                    "range": {
                                        "description": "The range to sort.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "sortSpecs": {
                                        "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
                                        "items": {
                                            "description": "A sort order associated with a specific column or row.",
                                            "properties": {
                                                "dimensionIndex": {
                                                    "description": "The dimension the sort should be applied to.",
                                                    "format": "int32",
                                                    "type": "integer"
                                                },
                                                "sortOrder": {
                                                    "description": "The order data should be sorted.",
                                                    "enum": [
                                                        "SORT_ORDER_UNSPECIFIED",
                                                        "ASCENDING",
                                                        "DESCENDING"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "textToColumns": {
                                "description": "Converts a column of text into many columns of text.",
                                "properties": {
                                    "delimiter": {
                                        "description": "The delimiter to use. Used only if delimiterType is\nCUSTOM.",
                                        "type": "string"
                                    },
                                    "delimiterType": {
                                        "description": "The delimiter type to use.",
                                        "enum": [
                                            "DELIMITER_TYPE_UNSPECIFIED",
                                            "COMMA",
                                            "SEMICOLON",
                                            "PERIOD",
                                            "SPACE",
                                            "CUSTOM",
                                            "AUTODETECT"
                                        ],
                                        "type": "string"
                                    },
                                    "source": {
                                        "description": "The source data range.  This must span exactly one column.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "unmergeCells": {
                                "description": "Unmerges merged cells.",
                                "properties": {
                                    "range": {
                                        "description": "The range within which all cells should be unmerged.\nIf the range spans multiple merges, all will be unmerged.\nThe range must not partially span any merge.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "updateBanding": {
                                "description": "Updates a banded range",
                                "properties": {
                                    "bandedRange": {
                                        "description": "The banded range to update with the new properties.",
                                        "properties": {
                                            "bandedRangeId": {
                                                "description": "The id of the banded range.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "columnProperties": {
                                                "description": "Properties for column bands. These properties are applied on a column-\nby-column basis throughout all the columns in the range. At least one of\nrow_properties or column_properties must be specified.",
                                                "properties": {
                                                    "firstBandColor": {
                                                        "description": "The first color that is alternating. (Required)",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "footerColor": {
                                                        "description": "The color of the last row or column. If this field is not set, the last\nrow or column will be filled with either first_band_color or\nsecond_band_color, depending on the color of the previous row or\ncolumn.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "headerColor": {
                                                        "description": "The color of the first row or column. If this field is set, the first\nrow or column will be filled with this color and the colors will\nalternate between first_band_color and second_band_color starting\nfrom the second row or column. Otherwise, the first row or column will be\nfilled with first_band_color and the colors will proceed to alternate\nas they normally would.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "secondBandColor": {
                                                        "description": "The second color that is alternating. (Required)",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "range": {
                                                "description": "The range over which these properties are applied.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "rowProperties": {
                                                "description": "Properties for row bands. These properties are applied on a row-by-row\nbasis throughout all the rows in the range. At least one of\nrow_properties or column_properties must be specified.",
                                                "properties": {
                                                    "firstBandColor": {
                                                        "description": "The first color that is alternating. (Required)",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "footerColor": {
                                                        "description": "The color of the last row or column. If this field is not set, the last\nrow or column will be filled with either first_band_color or\nsecond_band_color, depending on the color of the previous row or\ncolumn.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "headerColor": {
                                                        "description": "The color of the first row or column. If this field is set, the first\nrow or column will be filled with this color and the colors will\nalternate between first_band_color and second_band_color starting\nfrom the second row or column. Otherwise, the first row or column will be\nfilled with first_band_color and the colors will proceed to alternate\nas they normally would.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "secondBandColor": {
                                                        "description": "The second color that is alternating. (Required)",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root `bandedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "updateBorders": {
                                "description": "Updates the borders in a range of cells.",
                                "properties": {
                                    "bottom": {
                                        "description": "The border to put at the bottom of the range.",
                                        "properties": {
                                            "color": {
                                                "description": "The color of the border.",
                                                "properties": {
                                                    "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "style": {
                                                "description": "The style of the border.",
                                                "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                ],
                                                "type": "string"
                                            },
                                            "width": {
                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "innerHorizontal": {
                                        "description": "The horizontal border to put within the range.",
                                        "properties": {
                                            "color": {
                                                "description": "The color of the border.",
                                                "properties": {
                                                    "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "style": {
                                                "description": "The style of the border.",
                                                "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                ],
                                                "type": "string"
                                            },
                                            "width": {
                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "innerVertical": {
                                        "description": "The vertical border to put within the range.",
                                        "properties": {
                                            "color": {
                                                "description": "The color of the border.",
                                                "properties": {
                                                    "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "style": {
                                                "description": "The style of the border.",
                                                "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                ],
                                                "type": "string"
                                            },
                                            "width": {
                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "left": {
                                        "description": "The border to put at the left of the range.",
                                        "properties": {
                                            "color": {
                                                "description": "The color of the border.",
                                                "properties": {
                                                    "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "style": {
                                                "description": "The style of the border.",
                                                "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                ],
                                                "type": "string"
                                            },
                                            "width": {
                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "range": {
                                        "description": "The range whose borders should be updated.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "right": {
                                        "description": "The border to put at the right of the range.",
                                        "properties": {
                                            "color": {
                                                "description": "The color of the border.",
                                                "properties": {
                                                    "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "style": {
                                                "description": "The style of the border.",
                                                "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                ],
                                                "type": "string"
                                            },
                                            "width": {
                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "top": {
                                        "description": "The border to put at the top of the range.",
                                        "properties": {
                                            "color": {
                                                "description": "The color of the border.",
                                                "properties": {
                                                    "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "style": {
                                                "description": "The style of the border.",
                                                "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                ],
                                                "type": "string"
                                            },
                                            "width": {
                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "updateCells": {
                                "description": "Updates many cells at once.",
                                "properties": {
                                    "fields": {
                                        "description": "The fields of CellData that should be updated.\nAt least one field must be specified.\nThe root is the CellData; 'row.values.' should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "range": {
                                        "description": "The range to write data to.\n\nIf the data in rows does not cover the entire requested range,\nthe fields matching those set in fields will be cleared.",
                                        "properties": {
                                            "endColumnIndex": {
                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "endRowIndex": {
                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this range is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startColumnIndex": {
                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startRowIndex": {
                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "rows": {
                                        "description": "The data to write.",
                                        "items": {
                                            "description": "Data about each cell in a row.",
                                            "properties": {
                                                "values": {
                                                    "description": "The values in the row, one per column.",
                                                    "items": {
                                                        "description": "Data about a specific cell.",
                                                        "properties": {
                                                            "dataValidation": {
                                                                "description": "A data validation rule on the cell, if any.\n\nWhen writing, the new data validation rule will overwrite any prior rule.",
                                                                "properties": {
                                                                    "condition": {
                                                                        "description": "The condition that data in the cell must match.",
                                                                        "properties": {
                                                                            "type": {
                                                                                "description": "The type of condition.",
                                                                                "enum": [
                                                                                    "CONDITION_TYPE_UNSPECIFIED",
                                                                                    "NUMBER_GREATER",
                                                                                    "NUMBER_GREATER_THAN_EQ",
                                                                                    "NUMBER_LESS",
                                                                                    "NUMBER_LESS_THAN_EQ",
                                                                                    "NUMBER_EQ",
                                                                                    "NUMBER_NOT_EQ",
                                                                                    "NUMBER_BETWEEN",
                                                                                    "NUMBER_NOT_BETWEEN",
                                                                                    "TEXT_CONTAINS",
                                                                                    "TEXT_NOT_CONTAINS",
                                                                                    "TEXT_STARTS_WITH",
                                                                                    "TEXT_ENDS_WITH",
                                                                                    "TEXT_EQ",
                                                                                    "TEXT_IS_EMAIL",
                                                                                    "TEXT_IS_URL",
                                                                                    "DATE_EQ",
                                                                                    "DATE_BEFORE",
                                                                                    "DATE_AFTER",
                                                                                    "DATE_ON_OR_BEFORE",
                                                                                    "DATE_ON_OR_AFTER",
                                                                                    "DATE_BETWEEN",
                                                                                    "DATE_NOT_BETWEEN",
                                                                                    "DATE_IS_VALID",
                                                                                    "ONE_OF_RANGE",
                                                                                    "ONE_OF_LIST",
                                                                                    "BLANK",
                                                                                    "NOT_BLANK",
                                                                                    "CUSTOM_FORMULA",
                                                                                    "BOOLEAN"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "values": {
                                                                                "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                                                "items": {
                                                                                    "description": "The value of the condition.",
                                                                                    "properties": {
                                                                                        "relativeDate": {
                                                                                            "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                                                            "enum": [
                                                                                                "RELATIVE_DATE_UNSPECIFIED",
                                                                                                "PAST_YEAR",
                                                                                                "PAST_MONTH",
                                                                                                "PAST_WEEK",
                                                                                                "YESTERDAY",
                                                                                                "TODAY",
                                                                                                "TOMORROW"
                                                                                            ],
                                                                                            "type": "string"
                                                                                        },
                                                                                        "userEnteredValue": {
                                                                                            "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "inputMessage": {
                                                                        "description": "A message to show the user when adding data to the cell.",
                                                                        "type": "string"
                                                                    },
                                                                    "showCustomUi": {
                                                                        "description": "True if the UI should be customized based on the kind of condition.\nIf true, \"List\" conditions will show a dropdown.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "strict": {
                                                                        "description": "True if invalid data should be rejected.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "effectiveFormat": {
                                                                "description": "The effective format being used by the cell.\nThis includes the results of applying any conditional formatting and,\nif the cell contains a formula, the computed number format.\nIf the effective format is the default format, effective format will\nnot be written.\nThis field is read-only.",
                                                                "properties": {
                                                                    "backgroundColor": {
                                                                        "description": "The background color of the cell.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "borders": {
                                                                        "description": "The borders of the cell.",
                                                                        "properties": {
                                                                            "bottom": {
                                                                                "description": "The bottom border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "left": {
                                                                                "description": "The left border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "right": {
                                                                                "description": "The right border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "top": {
                                                                                "description": "The top border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "horizontalAlignment": {
                                                                        "description": "The horizontal alignment of the value in the cell.",
                                                                        "enum": [
                                                                            "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                            "LEFT",
                                                                            "CENTER",
                                                                            "RIGHT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "hyperlinkDisplayType": {
                                                                        "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                                        "enum": [
                                                                            "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                                            "LINKED",
                                                                            "PLAIN_TEXT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "numberFormat": {
                                                                        "description": "A format describing how number values should be represented to the user.",
                                                                        "properties": {
                                                                            "pattern": {
                                                                                "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                                                "enum": [
                                                                                    "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                                                    "TEXT",
                                                                                    "NUMBER",
                                                                                    "PERCENT",
                                                                                    "CURRENCY",
                                                                                    "DATE",
                                                                                    "TIME",
                                                                                    "DATE_TIME",
                                                                                    "SCIENTIFIC"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "padding": {
                                                                        "description": "The padding of the cell.",
                                                                        "properties": {
                                                                            "bottom": {
                                                                                "description": "The bottom padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "left": {
                                                                                "description": "The left padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "right": {
                                                                                "description": "The right padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "top": {
                                                                                "description": "The top padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "textDirection": {
                                                                        "description": "The direction of the text in the cell.",
                                                                        "enum": [
                                                                            "TEXT_DIRECTION_UNSPECIFIED",
                                                                            "LEFT_TO_RIGHT",
                                                                            "RIGHT_TO_LEFT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "textFormat": {
                                                                        "description": "The format of the text in the cell (unless overridden by a format run).",
                                                                        "properties": {
                                                                            "bold": {
                                                                                "description": "True if the text is bold.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "fontFamily": {
                                                                                "description": "The font family.",
                                                                                "type": "string"
                                                                            },
                                                                            "fontSize": {
                                                                                "description": "The size of the font.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "foregroundColor": {
                                                                                "description": "The foreground color of the text.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "italic": {
                                                                                "description": "True if the text is italicized.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "strikethrough": {
                                                                                "description": "True if the text has a strikethrough.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "underline": {
                                                                                "description": "True if the text is underlined.",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "textRotation": {
                                                                        "description": "The rotation applied to text in a cell",
                                                                        "properties": {
                                                                            "angle": {
                                                                                "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "vertical": {
                                                                                "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "verticalAlignment": {
                                                                        "description": "The vertical alignment of the value in the cell.",
                                                                        "enum": [
                                                                            "VERTICAL_ALIGN_UNSPECIFIED",
                                                                            "TOP",
                                                                            "MIDDLE",
                                                                            "BOTTOM"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "wrapStrategy": {
                                                                        "description": "The wrap strategy for the value in the cell.",
                                                                        "enum": [
                                                                            "WRAP_STRATEGY_UNSPECIFIED",
                                                                            "OVERFLOW_CELL",
                                                                            "LEGACY_WRAP",
                                                                            "CLIP",
                                                                            "WRAP"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "effectiveValue": {
                                                                "description": "The effective value of the cell. For cells with formulas, this is\nthe calculated value.  For cells with literals, this is\nthe same as the user_entered_value.\nThis field is read-only.",
                                                                "properties": {
                                                                    "boolValue": {
                                                                        "description": "Represents a boolean value.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "errorValue": {
                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                        "properties": {
                                                                            "message": {
                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "The type of error.",
                                                                                "enum": [
                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                    "ERROR",
                                                                                    "NULL_VALUE",
                                                                                    "DIVIDE_BY_ZERO",
                                                                                    "VALUE",
                                                                                    "REF",
                                                                                    "NAME",
                                                                                    "NUM",
                                                                                    "N_A",
                                                                                    "LOADING"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "formulaValue": {
                                                                        "description": "Represents a formula.",
                                                                        "type": "string"
                                                                    },
                                                                    "numberValue": {
                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    },
                                                                    "stringValue": {
                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "formattedValue": {
                                                                "description": "The formatted value of the cell.\nThis is the value as it's shown to the user.\nThis field is read-only.",
                                                                "type": "string"
                                                            },
                                                            "hyperlink": {
                                                                "description": "A hyperlink this cell points to, if any.\nThis field is read-only.  (To set it, use a `=HYPERLINK` formula\nin the userEnteredValue.formulaValue\nfield.)",
                                                                "type": "string"
                                                            },
                                                            "note": {
                                                                "description": "Any note on the cell.",
                                                                "type": "string"
                                                            },
                                                            "pivotTable": {
                                                                "description": "A pivot table anchored at this cell. The size of pivot table itself\nis computed dynamically based on its data, grouping, filters, values,\netc. Only the top-left cell of the pivot table contains the pivot table\ndefinition. The other cells will contain the calculated values of the\nresults of the pivot in their effective_value fields.",
                                                                "properties": {
                                                                    "columns": {
                                                                        "description": "Each column grouping in the pivot table.",
                                                                        "items": {
                                                                            "description": "A single grouping (either row or column) in a pivot table.",
                                                                            "properties": {
                                                                                "groupRule": {
                                                                                    "description": "The group rule to apply to this row/column group.",
                                                                                    "properties": {
                                                                                        "dateTimeRule": {
                                                                                            "description": "A DateTimeRule.",
                                                                                            "properties": {
                                                                                                "type": {
                                                                                                    "description": "The type of date-time grouping to apply.",
                                                                                                    "enum": [
                                                                                                        "DATE_TIME_RULE_TYPE_UNSPECIFIED",
                                                                                                        "SECOND",
                                                                                                        "MINUTE",
                                                                                                        "HOUR",
                                                                                                        "HOUR_MINUTE",
                                                                                                        "HOUR_MINUTE_AMPM",
                                                                                                        "DAY_OF_WEEK",
                                                                                                        "DAY_OF_YEAR",
                                                                                                        "DAY_OF_MONTH",
                                                                                                        "DAY_MONTH",
                                                                                                        "MONTH",
                                                                                                        "QUARTER",
                                                                                                        "YEAR",
                                                                                                        "YEAR_MONTH",
                                                                                                        "YEAR_QUARTER",
                                                                                                        "YEAR_MONTH_DAY"
                                                                                                    ],
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "histogramRule": {
                                                                                            "description": "A HistogramRule.",
                                                                                            "properties": {
                                                                                                "end": {
                                                                                                    "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                },
                                                                                                "interval": {
                                                                                                    "description": "The size of the buckets that are created. Must be positive.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                },
                                                                                                "start": {
                                                                                                    "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "manualRule": {
                                                                                            "description": "A ManualRule.",
                                                                                            "properties": {
                                                                                                "groups": {
                                                                                                    "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
                                                                                                    "items": {
                                                                                                        "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
                                                                                                        "properties": {
                                                                                                            "groupName": {
                                                                                                                "description": "The group name, which must be a string. Each group in a given\nManualRule must have a unique group name.",
                                                                                                                "properties": {
                                                                                                                    "boolValue": {
                                                                                                                        "description": "Represents a boolean value.",
                                                                                                                        "type": "boolean"
                                                                                                                    },
                                                                                                                    "errorValue": {
                                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                                        "properties": {
                                                                                                                            "message": {
                                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                                "type": "string"
                                                                                                                            },
                                                                                                                            "type": {
                                                                                                                                "description": "The type of error.",
                                                                                                                                "enum": [
                                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                                    "ERROR",
                                                                                                                                    "NULL_VALUE",
                                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                                    "VALUE",
                                                                                                                                    "REF",
                                                                                                                                    "NAME",
                                                                                                                                    "NUM",
                                                                                                                                    "N_A",
                                                                                                                                    "LOADING"
                                                                                                                                ],
                                                                                                                                "type": "string"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        "type": "object"
                                                                                                                    },
                                                                                                                    "formulaValue": {
                                                                                                                        "description": "Represents a formula.",
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "numberValue": {
                                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                                        "format": "double",
                                                                                                                        "type": "number"
                                                                                                                    },
                                                                                                                    "stringValue": {
                                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                                        "type": "string"
                                                                                                                    }
                                                                                                                },
                                                                                                                "type": "object"
                                                                                                            },
                                                                                                            "items": {
                                                                                                                "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
                                                                                                                "items": {
                                                                                                                    "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                                    "properties": {
                                                                                                                        "boolValue": {
                                                                                                                            "description": "Represents a boolean value.",
                                                                                                                            "type": "boolean"
                                                                                                                        },
                                                                                                                        "errorValue": {
                                                                                                                            "description": "Represents an error.\nThis field is read-only.",
                                                                                                                            "properties": {
                                                                                                                                "message": {
                                                                                                                                    "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                                    "type": "string"
                                                                                                                                },
                                                                                                                                "type": {
                                                                                                                                    "description": "The type of error.",
                                                                                                                                    "enum": [
                                                                                                                                        "ERROR_TYPE_UNSPECIFIED",
                                                                                                                                        "ERROR",
                                                                                                                                        "NULL_VALUE",
                                                                                                                                        "DIVIDE_BY_ZERO",
                                                                                                                                        "VALUE",
                                                                                                                                        "REF",
                                                                                                                                        "NAME",
                                                                                                                                        "NUM",
                                                                                                                                        "N_A",
                                                                                                                                        "LOADING"
                                                                                                                                    ],
                                                                                                                                    "type": "string"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "type": "object"
                                                                                                                        },
                                                                                                                        "formulaValue": {
                                                                                                                            "description": "Represents a formula.",
                                                                                                                            "type": "string"
                                                                                                                        },
                                                                                                                        "numberValue": {
                                                                                                                            "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                                            "format": "double",
                                                                                                                            "type": "number"
                                                                                                                        },
                                                                                                                        "stringValue": {
                                                                                                                            "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                                            "type": "string"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "type": "object"
                                                                                                                },
                                                                                                                "type": "array"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "label": {
                                                                                    "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+",
                                                                                    "type": "string"
                                                                                },
                                                                                "repeatHeadings": {
                                                                                    "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "showTotals": {
                                                                                    "description": "True if the pivot table should include the totals for this grouping.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "sortOrder": {
                                                                                    "description": "The order the values in this group should be sorted.",
                                                                                    "enum": [
                                                                                        "SORT_ORDER_UNSPECIFIED",
                                                                                        "ASCENDING",
                                                                                        "DESCENDING"
                                                                                    ],
                                                                                    "type": "string"
                                                                                },
                                                                                "sourceColumnOffset": {
                                                                                    "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "valueBucket": {
                                                                                    "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
                                                                                    "properties": {
                                                                                        "buckets": {
                                                                                            "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
                                                                                            "items": {
                                                                                                "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "valuesIndex": {
                                                                                            "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "valueMetadata": {
                                                                                    "description": "Metadata about values in the grouping.",
                                                                                    "items": {
                                                                                        "description": "Metadata about a value in a pivot grouping.",
                                                                                        "properties": {
                                                                                            "collapsed": {
                                                                                                "description": "True if the data corresponding to the value is collapsed.",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "criteria": {
                                                                        "additionalProperties": {
                                                                            "description": "Criteria for showing/hiding rows in a pivot table.",
                                                                            "properties": {
                                                                                "visibleValues": {
                                                                                    "description": "Values that should be included.  Values not listed here are excluded.",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "description": "An optional mapping of filters per source column offset.\n\nThe filters are applied before aggregating data into the pivot table.\nThe map's key is the column offset of the source range that you want to\nfilter, and the value is the criteria for that column.\n\nFor example, if the source was `C10:E15`, a key of `0` will have the filter\nfor column `C`, whereas the key `1` is for column `D`.",
                                                                        "type": "object"
                                                                    },
                                                                    "rows": {
                                                                        "description": "Each row grouping in the pivot table.",
                                                                        "items": {
                                                                            "description": "A single grouping (either row or column) in a pivot table.",
                                                                            "properties": {
                                                                                "groupRule": {
                                                                                    "description": "The group rule to apply to this row/column group.",
                                                                                    "properties": {
                                                                                        "dateTimeRule": {
                                                                                            "description": "A DateTimeRule.",
                                                                                            "properties": {
                                                                                                "type": {
                                                                                                    "description": "The type of date-time grouping to apply.",
                                                                                                    "enum": [
                                                                                                        "DATE_TIME_RULE_TYPE_UNSPECIFIED",
                                                                                                        "SECOND",
                                                                                                        "MINUTE",
                                                                                                        "HOUR",
                                                                                                        "HOUR_MINUTE",
                                                                                                        "HOUR_MINUTE_AMPM",
                                                                                                        "DAY_OF_WEEK",
                                                                                                        "DAY_OF_YEAR",
                                                                                                        "DAY_OF_MONTH",
                                                                                                        "DAY_MONTH",
                                                                                                        "MONTH",
                                                                                                        "QUARTER",
                                                                                                        "YEAR",
                                                                                                        "YEAR_MONTH",
                                                                                                        "YEAR_QUARTER",
                                                                                                        "YEAR_MONTH_DAY"
                                                                                                    ],
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "histogramRule": {
                                                                                            "description": "A HistogramRule.",
                                                                                            "properties": {
                                                                                                "end": {
                                                                                                    "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                },
                                                                                                "interval": {
                                                                                                    "description": "The size of the buckets that are created. Must be positive.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                },
                                                                                                "start": {
                                                                                                    "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
                                                                                                    "format": "double",
                                                                                                    "type": "number"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "manualRule": {
                                                                                            "description": "A ManualRule.",
                                                                                            "properties": {
                                                                                                "groups": {
                                                                                                    "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
                                                                                                    "items": {
                                                                                                        "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
                                                                                                        "properties": {
                                                                                                            "groupName": {
                                                                                                                "description": "The group name, which must be a string. Each group in a given\nManualRule must have a unique group name.",
                                                                                                                "properties": {
                                                                                                                    "boolValue": {
                                                                                                                        "description": "Represents a boolean value.",
                                                                                                                        "type": "boolean"
                                                                                                                    },
                                                                                                                    "errorValue": {
                                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                                        "properties": {
                                                                                                                            "message": {
                                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                                "type": "string"
                                                                                                                            },
                                                                                                                            "type": {
                                                                                                                                "description": "The type of error.",
                                                                                                                                "enum": [
                                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                                    "ERROR",
                                                                                                                                    "NULL_VALUE",
                                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                                    "VALUE",
                                                                                                                                    "REF",
                                                                                                                                    "NAME",
                                                                                                                                    "NUM",
                                                                                                                                    "N_A",
                                                                                                                                    "LOADING"
                                                                                                                                ],
                                                                                                                                "type": "string"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        "type": "object"
                                                                                                                    },
                                                                                                                    "formulaValue": {
                                                                                                                        "description": "Represents a formula.",
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "numberValue": {
                                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                                        "format": "double",
                                                                                                                        "type": "number"
                                                                                                                    },
                                                                                                                    "stringValue": {
                                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                                        "type": "string"
                                                                                                                    }
                                                                                                                },
                                                                                                                "type": "object"
                                                                                                            },
                                                                                                            "items": {
                                                                                                                "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
                                                                                                                "items": {
                                                                                                                    "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                                    "properties": {
                                                                                                                        "boolValue": {
                                                                                                                            "description": "Represents a boolean value.",
                                                                                                                            "type": "boolean"
                                                                                                                        },
                                                                                                                        "errorValue": {
                                                                                                                            "description": "Represents an error.\nThis field is read-only.",
                                                                                                                            "properties": {
                                                                                                                                "message": {
                                                                                                                                    "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                                    "type": "string"
                                                                                                                                },
                                                                                                                                "type": {
                                                                                                                                    "description": "The type of error.",
                                                                                                                                    "enum": [
                                                                                                                                        "ERROR_TYPE_UNSPECIFIED",
                                                                                                                                        "ERROR",
                                                                                                                                        "NULL_VALUE",
                                                                                                                                        "DIVIDE_BY_ZERO",
                                                                                                                                        "VALUE",
                                                                                                                                        "REF",
                                                                                                                                        "NAME",
                                                                                                                                        "NUM",
                                                                                                                                        "N_A",
                                                                                                                                        "LOADING"
                                                                                                                                    ],
                                                                                                                                    "type": "string"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "type": "object"
                                                                                                                        },
                                                                                                                        "formulaValue": {
                                                                                                                            "description": "Represents a formula.",
                                                                                                                            "type": "string"
                                                                                                                        },
                                                                                                                        "numberValue": {
                                                                                                                            "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                                            "format": "double",
                                                                                                                            "type": "number"
                                                                                                                        },
                                                                                                                        "stringValue": {
                                                                                                                            "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                                            "type": "string"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "type": "object"
                                                                                                                },
                                                                                                                "type": "array"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "label": {
                                                                                    "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+",
                                                                                    "type": "string"
                                                                                },
                                                                                "repeatHeadings": {
                                                                                    "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "showTotals": {
                                                                                    "description": "True if the pivot table should include the totals for this grouping.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "sortOrder": {
                                                                                    "description": "The order the values in this group should be sorted.",
                                                                                    "enum": [
                                                                                        "SORT_ORDER_UNSPECIFIED",
                                                                                        "ASCENDING",
                                                                                        "DESCENDING"
                                                                                    ],
                                                                                    "type": "string"
                                                                                },
                                                                                "sourceColumnOffset": {
                                                                                    "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "valueBucket": {
                                                                                    "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
                                                                                    "properties": {
                                                                                        "buckets": {
                                                                                            "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
                                                                                            "items": {
                                                                                                "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        },
                                                                                        "valuesIndex": {
                                                                                            "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "valueMetadata": {
                                                                                    "description": "Metadata about values in the grouping.",
                                                                                    "items": {
                                                                                        "description": "Metadata about a value in a pivot grouping.",
                                                                                        "properties": {
                                                                                            "collapsed": {
                                                                                                "description": "True if the data corresponding to the value is collapsed.",
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "value": {
                                                                                                "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
                                                                                                "properties": {
                                                                                                    "boolValue": {
                                                                                                        "description": "Represents a boolean value.",
                                                                                                        "type": "boolean"
                                                                                                    },
                                                                                                    "errorValue": {
                                                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                                                        "properties": {
                                                                                                            "message": {
                                                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "description": "The type of error.",
                                                                                                                "enum": [
                                                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                                                    "ERROR",
                                                                                                                    "NULL_VALUE",
                                                                                                                    "DIVIDE_BY_ZERO",
                                                                                                                    "VALUE",
                                                                                                                    "REF",
                                                                                                                    "NAME",
                                                                                                                    "NUM",
                                                                                                                    "N_A",
                                                                                                                    "LOADING"
                                                                                                                ],
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "formulaValue": {
                                                                                                        "description": "Represents a formula.",
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "numberValue": {
                                                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                                        "format": "double",
                                                                                                        "type": "number"
                                                                                                    },
                                                                                                    "stringValue": {
                                                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                                        "type": "string"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "source": {
                                                                        "description": "The range the pivot table is reading data from.",
                                                                        "properties": {
                                                                            "endColumnIndex": {
                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "endRowIndex": {
                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "sheetId": {
                                                                                "description": "The sheet this range is on.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "startColumnIndex": {
                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "startRowIndex": {
                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "valueLayout": {
                                                                        "description": "Whether values should be listed horizontally (as columns)\nor vertically (as rows).",
                                                                        "enum": [
                                                                            "HORIZONTAL",
                                                                            "VERTICAL"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "values": {
                                                                        "description": "A list of values to include in the pivot table.",
                                                                        "items": {
                                                                            "description": "The definition of how a value in a pivot table should be calculated.",
                                                                            "properties": {
                                                                                "calculatedDisplayType": {
                                                                                    "description": "If specified, indicates that pivot values should be displayed as\nthe result of a calculation with another pivot value. For example, if\ncalculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the\npivot values are displayed as the percentage of the grand total. In\nthe Sheets UI, this is referred to as \"Show As\" in the value section of a\npivot table.",
                                                                                    "enum": [
                                                                                        "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED",
                                                                                        "PERCENT_OF_ROW_TOTAL",
                                                                                        "PERCENT_OF_COLUMN_TOTAL",
                                                                                        "PERCENT_OF_GRAND_TOTAL"
                                                                                    ],
                                                                                    "type": "string"
                                                                                },
                                                                                "formula": {
                                                                                    "description": "A custom formula to calculate the value.  The formula must start\nwith an `=` character.",
                                                                                    "type": "string"
                                                                                },
                                                                                "name": {
                                                                                    "description": "A name to use for the value.",
                                                                                    "type": "string"
                                                                                },
                                                                                "sourceColumnOffset": {
                                                                                    "description": "The column offset of the source range that this value reads from.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this value refers to column `C`, whereas the offset `1` would\nrefer to column `D`.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "summarizeFunction": {
                                                                                    "description": "A function to summarize the value.\nIf formula is set, the only supported values are\nSUM and\nCUSTOM.\nIf sourceColumnOffset is set, then `CUSTOM`\nis not supported.",
                                                                                    "enum": [
                                                                                        "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED",
                                                                                        "SUM",
                                                                                        "COUNTA",
                                                                                        "COUNT",
                                                                                        "COUNTUNIQUE",
                                                                                        "AVERAGE",
                                                                                        "MAX",
                                                                                        "MIN",
                                                                                        "MEDIAN",
                                                                                        "PRODUCT",
                                                                                        "STDEV",
                                                                                        "STDEVP",
                                                                                        "VAR",
                                                                                        "VARP",
                                                                                        "CUSTOM"
                                                                                    ],
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "textFormatRuns": {
                                                                "description": "Runs of rich text applied to subsections of the cell.  Runs are only valid\non user entered strings, not formulas, bools, or numbers.\nRuns start at specific indexes in the text and continue until the next\nrun. Properties of a run will continue unless explicitly changed\nin a subsequent run (and properties of the first run will continue\nthe properties of the cell unless explicitly changed).\n\nWhen writing, the new runs will overwrite any prior runs.  When writing a\nnew user_entered_value, previous runs are erased.",
                                                                "items": {
                                                                    "description": "A run of a text format. The format of this run continues until the start\nindex of the next run.\nWhen updating, all fields must be set.",
                                                                    "properties": {
                                                                        "format": {
                                                                            "description": "The format of this run.  Absent values inherit the cell's format.",
                                                                            "properties": {
                                                                                "bold": {
                                                                                    "description": "True if the text is bold.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "fontFamily": {
                                                                                    "description": "The font family.",
                                                                                    "type": "string"
                                                                                },
                                                                                "fontSize": {
                                                                                    "description": "The size of the font.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "foregroundColor": {
                                                                                    "description": "The foreground color of the text.",
                                                                                    "properties": {
                                                                                        "alpha": {
                                                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "blue": {
                                                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "green": {
                                                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        },
                                                                                        "red": {
                                                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                            "format": "float",
                                                                                            "type": "number"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "italic": {
                                                                                    "description": "True if the text is italicized.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "strikethrough": {
                                                                                    "description": "True if the text has a strikethrough.",
                                                                                    "type": "boolean"
                                                                                },
                                                                                "underline": {
                                                                                    "description": "True if the text is underlined.",
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "startIndex": {
                                                                            "description": "The character index where this run starts.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "userEnteredFormat": {
                                                                "description": "The format the user entered for the cell.\n\nWhen writing, the new format will be merged with the existing format.",
                                                                "properties": {
                                                                    "backgroundColor": {
                                                                        "description": "The background color of the cell.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "borders": {
                                                                        "description": "The borders of the cell.",
                                                                        "properties": {
                                                                            "bottom": {
                                                                                "description": "The bottom border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "left": {
                                                                                "description": "The left border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "right": {
                                                                                "description": "The right border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "top": {
                                                                                "description": "The top border of the cell.",
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "description": "The color of the border.",
                                                                                        "properties": {
                                                                                            "alpha": {
                                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "blue": {
                                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "green": {
                                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            },
                                                                                            "red": {
                                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                                "format": "float",
                                                                                                "type": "number"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "style": {
                                                                                        "description": "The style of the border.",
                                                                                        "enum": [
                                                                                            "STYLE_UNSPECIFIED",
                                                                                            "DOTTED",
                                                                                            "DASHED",
                                                                                            "SOLID",
                                                                                            "SOLID_MEDIUM",
                                                                                            "SOLID_THICK",
                                                                                            "NONE",
                                                                                            "DOUBLE"
                                                                                        ],
                                                                                        "type": "string"
                                                                                    },
                                                                                    "width": {
                                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                        "format": "int32",
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "horizontalAlignment": {
                                                                        "description": "The horizontal alignment of the value in the cell.",
                                                                        "enum": [
                                                                            "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                            "LEFT",
                                                                            "CENTER",
                                                                            "RIGHT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "hyperlinkDisplayType": {
                                                                        "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                                        "enum": [
                                                                            "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                                            "LINKED",
                                                                            "PLAIN_TEXT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "numberFormat": {
                                                                        "description": "A format describing how number values should be represented to the user.",
                                                                        "properties": {
                                                                            "pattern": {
                                                                                "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                                                "enum": [
                                                                                    "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                                                    "TEXT",
                                                                                    "NUMBER",
                                                                                    "PERCENT",
                                                                                    "CURRENCY",
                                                                                    "DATE",
                                                                                    "TIME",
                                                                                    "DATE_TIME",
                                                                                    "SCIENTIFIC"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "padding": {
                                                                        "description": "The padding of the cell.",
                                                                        "properties": {
                                                                            "bottom": {
                                                                                "description": "The bottom padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "left": {
                                                                                "description": "The left padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "right": {
                                                                                "description": "The right padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "top": {
                                                                                "description": "The top padding of the cell.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "textDirection": {
                                                                        "description": "The direction of the text in the cell.",
                                                                        "enum": [
                                                                            "TEXT_DIRECTION_UNSPECIFIED",
                                                                            "LEFT_TO_RIGHT",
                                                                            "RIGHT_TO_LEFT"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "textFormat": {
                                                                        "description": "The format of the text in the cell (unless overridden by a format run).",
                                                                        "properties": {
                                                                            "bold": {
                                                                                "description": "True if the text is bold.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "fontFamily": {
                                                                                "description": "The font family.",
                                                                                "type": "string"
                                                                            },
                                                                            "fontSize": {
                                                                                "description": "The size of the font.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "foregroundColor": {
                                                                                "description": "The foreground color of the text.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "italic": {
                                                                                "description": "True if the text is italicized.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "strikethrough": {
                                                                                "description": "True if the text has a strikethrough.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "underline": {
                                                                                "description": "True if the text is underlined.",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "textRotation": {
                                                                        "description": "The rotation applied to text in a cell",
                                                                        "properties": {
                                                                            "angle": {
                                                                                "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            },
                                                                            "vertical": {
                                                                                "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                                                "type": "boolean"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "verticalAlignment": {
                                                                        "description": "The vertical alignment of the value in the cell.",
                                                                        "enum": [
                                                                            "VERTICAL_ALIGN_UNSPECIFIED",
                                                                            "TOP",
                                                                            "MIDDLE",
                                                                            "BOTTOM"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "wrapStrategy": {
                                                                        "description": "The wrap strategy for the value in the cell.",
                                                                        "enum": [
                                                                            "WRAP_STRATEGY_UNSPECIFIED",
                                                                            "OVERFLOW_CELL",
                                                                            "LEGACY_WRAP",
                                                                            "CLIP",
                                                                            "WRAP"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "userEnteredValue": {
                                                                "description": "The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()`\nNote: Dates, Times and DateTimes are represented as doubles in\nserial number format.",
                                                                "properties": {
                                                                    "boolValue": {
                                                                        "description": "Represents a boolean value.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "errorValue": {
                                                                        "description": "Represents an error.\nThis field is read-only.",
                                                                        "properties": {
                                                                            "message": {
                                                                                "description": "A message with more information about the error\n(in the spreadsheet's locale).",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "The type of error.",
                                                                                "enum": [
                                                                                    "ERROR_TYPE_UNSPECIFIED",
                                                                                    "ERROR",
                                                                                    "NULL_VALUE",
                                                                                    "DIVIDE_BY_ZERO",
                                                                                    "VALUE",
                                                                                    "REF",
                                                                                    "NAME",
                                                                                    "NUM",
                                                                                    "N_A",
                                                                                    "LOADING"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "formulaValue": {
                                                                        "description": "Represents a formula.",
                                                                        "type": "string"
                                                                    },
                                                                    "numberValue": {
                                                                        "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                        "format": "double",
                                                                        "type": "number"
                                                                    },
                                                                    "stringValue": {
                                                                        "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "start": {
                                        "description": "The coordinate to start writing data at.\nAny number of rows and columns (including a different number of\ncolumns per row) may be written.",
                                        "properties": {
                                            "columnIndex": {
                                                "description": "The column index of the coordinate.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "rowIndex": {
                                                "description": "The row index of the coordinate.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this coordinate is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "updateChartSpec": {
                                "description": "Updates a chart's specifications.",
                                "properties": {
                                    "chartId": {
                                        "description": "The ID of the chart to update.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "spec": {
                                        "description": "The specification to apply to the chart.",
                                        "properties": {
                                            "altText": {
                                                "description": "The alternative text that describes the chart.  This is often used\nfor accessibility.",
                                                "type": "string"
                                            },
                                            "backgroundColor": {
                                                "description": "The background color of the entire chart.\nNot applicable to Org charts.",
                                                "properties": {
                                                    "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "basicChart": {
                                                "description": "A basic chart specification, can be one of many kinds of charts.\nSee BasicChartType for the list of all\ncharts this supports.",
                                                "properties": {
                                                    "axis": {
                                                        "description": "The axis on the chart.",
                                                        "items": {
                                                            "description": "An axis of the chart.\nA chart may not have more than one axis per\naxis position.",
                                                            "properties": {
                                                                "format": {
                                                                    "description": "The format of the title.\nOnly valid if the axis is not associated with the domain.",
                                                                    "properties": {
                                                                        "bold": {
                                                                            "description": "True if the text is bold.",
                                                                            "type": "boolean"
                                                                        },
                                                                        "fontFamily": {
                                                                            "description": "The font family.",
                                                                            "type": "string"
                                                                        },
                                                                        "fontSize": {
                                                                            "description": "The size of the font.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        },
                                                                        "foregroundColor": {
                                                                            "description": "The foreground color of the text.",
                                                                            "properties": {
                                                                                "alpha": {
                                                                                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "blue": {
                                                                                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "green": {
                                                                                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "red": {
                                                                                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "italic": {
                                                                            "description": "True if the text is italicized.",
                                                                            "type": "boolean"
                                                                        },
                                                                        "strikethrough": {
                                                                            "description": "True if the text has a strikethrough.",
                                                                            "type": "boolean"
                                                                        },
                                                                        "underline": {
                                                                            "description": "True if the text is underlined.",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "position": {
                                                                    "description": "The position of this axis.",
                                                                    "enum": [
                                                                        "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
                                                                        "BOTTOM_AXIS",
                                                                        "LEFT_AXIS",
                                                                        "RIGHT_AXIS"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "title": {
                                                                    "description": "The title of this axis. If set, this overrides any title inferred\nfrom headers of the data.",
                                                                    "type": "string"
                                                                },
                                                                "titleTextPosition": {
                                                                    "description": "The axis title text position.",
                                                                    "properties": {
                                                                        "horizontalAlignment": {
                                                                            "description": "Horizontal alignment setting for the piece of text.",
                                                                            "enum": [
                                                                                "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                                "LEFT",
                                                                                "CENTER",
                                                                                "RIGHT"
                                                                            ],
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "chartType": {
                                                        "description": "The type of the chart.",
                                                        "enum": [
                                                            "BASIC_CHART_TYPE_UNSPECIFIED",
                                                            "BAR",
                                                            "LINE",
                                                            "AREA",
                                                            "COLUMN",
                                                            "SCATTER",
                                                            "COMBO",
                                                            "STEPPED_AREA"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "compareMode": {
                                                        "description": "The behavior of tooltips and data highlighting when hovering on data and\nchart area.",
                                                        "enum": [
                                                            "BASIC_CHART_COMPARE_MODE_UNSPECIFIED",
                                                            "DATUM",
                                                            "CATEGORY"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "domains": {
                                                        "description": "The domain of data this is charting.\nOnly a single domain is supported.",
                                                        "items": {
                                                            "description": "The domain of a chart.\nFor example, if charting stock prices over time, this would be the date.",
                                                            "properties": {
                                                                "domain": {
                                                                    "description": "The data of the domain. For example, if charting stock prices over time,\nthis is the data representing the dates.",
                                                                    "properties": {
                                                                        "sourceRange": {
                                                                            "description": "The source ranges of the data.",
                                                                            "properties": {
                                                                                "sources": {
                                                                                    "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                    "items": {
                                                                                        "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                        "properties": {
                                                                                            "endColumnIndex": {
                                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "endRowIndex": {
                                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "sheetId": {
                                                                                                "description": "The sheet this range is on.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "startColumnIndex": {
                                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "startRowIndex": {
                                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "reversed": {
                                                                    "description": "True to reverse the order of the domain values (horizontal axis).",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "headerCount": {
                                                        "description": "The number of rows or columns in the data that are \"headers\".\nIf not set, Google Sheets will guess how many rows are headers based\non the data.\n\n(Note that BasicChartAxis.title may override the axis title\n inferred from the header values.)",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "interpolateNulls": {
                                                        "description": "If some values in a series are missing, gaps may appear in the chart (e.g,\nsegments of lines in a line chart will be missing).  To eliminate these\ngaps set this to true.\nApplies to Line, Area, and Combo charts.",
                                                        "type": "boolean"
                                                    },
                                                    "legendPosition": {
                                                        "description": "The position of the chart legend.",
                                                        "enum": [
                                                            "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED",
                                                            "BOTTOM_LEGEND",
                                                            "LEFT_LEGEND",
                                                            "RIGHT_LEGEND",
                                                            "TOP_LEGEND",
                                                            "NO_LEGEND"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "lineSmoothing": {
                                                        "description": "Gets whether all lines should be rendered smooth or straight by default.\nApplies to Line charts.",
                                                        "type": "boolean"
                                                    },
                                                    "series": {
                                                        "description": "The data this chart is visualizing.",
                                                        "items": {
                                                            "description": "A single series of data in a chart.\nFor example, if charting stock prices over time, multiple series may exist,\none for the \"Open Price\", \"High Price\", \"Low Price\" and \"Close Price\".",
                                                            "properties": {
                                                                "color": {
                                                                    "description": "The color for elements (i.e. bars, lines, points) associated with this\nseries.  If empty, a default color is used.",
                                                                    "properties": {
                                                                        "alpha": {
                                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "blue": {
                                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "green": {
                                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "red": {
                                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "lineStyle": {
                                                                    "description": "The line style of this series. Valid only if the\nchartType is AREA,\nLINE, or SCATTER.\nCOMBO charts are also supported if the\nseries chart type is\nAREA or LINE.",
                                                                    "properties": {
                                                                        "type": {
                                                                            "description": "The dash type of the line.",
                                                                            "enum": [
                                                                                "LINE_DASH_TYPE_UNSPECIFIED",
                                                                                "INVISIBLE",
                                                                                "CUSTOM",
                                                                                "SOLID",
                                                                                "DOTTED",
                                                                                "MEDIUM_DASHED",
                                                                                "MEDIUM_DASHED_DOTTED",
                                                                                "LONG_DASHED",
                                                                                "LONG_DASHED_DOTTED"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "width": {
                                                                            "description": "The thickness of the line, in px.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "series": {
                                                                    "description": "The data being visualized in this chart series.",
                                                                    "properties": {
                                                                        "sourceRange": {
                                                                            "description": "The source ranges of the data.",
                                                                            "properties": {
                                                                                "sources": {
                                                                                    "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                    "items": {
                                                                                        "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                        "properties": {
                                                                                            "endColumnIndex": {
                                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "endRowIndex": {
                                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "sheetId": {
                                                                                                "description": "The sheet this range is on.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "startColumnIndex": {
                                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "startRowIndex": {
                                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "targetAxis": {
                                                                    "description": "The minor axis that will specify the range of values for this series.\nFor example, if charting stocks over time, the \"Volume\" series\nmay want to be pinned to the right with the prices pinned to the left,\nbecause the scale of trading volume is different than the scale of\nprices.\nIt is an error to specify an axis that isn't a valid minor axis\nfor the chart's type.",
                                                                    "enum": [
                                                                        "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
                                                                        "BOTTOM_AXIS",
                                                                        "LEFT_AXIS",
                                                                        "RIGHT_AXIS"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "The type of this series. Valid only if the\nchartType is\nCOMBO.\nDifferent types will change the way the series is visualized.\nOnly LINE, AREA,\nand COLUMN are supported.",
                                                                    "enum": [
                                                                        "BASIC_CHART_TYPE_UNSPECIFIED",
                                                                        "BAR",
                                                                        "LINE",
                                                                        "AREA",
                                                                        "COLUMN",
                                                                        "SCATTER",
                                                                        "COMBO",
                                                                        "STEPPED_AREA"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "stackedType": {
                                                        "description": "The stacked type for charts that support vertical stacking.\nApplies to Area, Bar, Column, Combo, and Stepped Area charts.",
                                                        "enum": [
                                                            "BASIC_CHART_STACKED_TYPE_UNSPECIFIED",
                                                            "NOT_STACKED",
                                                            "STACKED",
                                                            "PERCENT_STACKED"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "threeDimensional": {
                                                        "description": "True to make the chart 3D.\nApplies to Bar and Column charts.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "bubbleChart": {
                                                "description": "A bubble chart specification.",
                                                "properties": {
                                                    "bubbleBorderColor": {
                                                        "description": "The bubble border color.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "bubbleLabels": {
                                                        "description": "The data containing the bubble labels.  These do not need to be unique.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "bubbleMaxRadiusSize": {
                                                        "description": "The max radius size of the bubbles, in pixels.\nIf specified, the field must be a positive value.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "bubbleMinRadiusSize": {
                                                        "description": "The minimum radius size of the bubbles, in pixels.\nIf specific, the field must be a positive value.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "bubbleOpacity": {
                                                        "description": "The opacity of the bubbles between 0 and 1.0.\n0 is fully transparent and 1 is fully opaque.",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "bubbleSizes": {
                                                        "description": "The data contianing the bubble sizes.  Bubble sizes are used to draw\nthe bubbles at different sizes relative to each other.\nIf specified, group_ids must also be specified.  This field is\noptional.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "bubbleTextStyle": {
                                                        "description": "The format of the text inside the bubbles.\nUnderline and Strikethrough are not supported.",
                                                        "properties": {
                                                            "bold": {
                                                                "description": "True if the text is bold.",
                                                                "type": "boolean"
                                                            },
                                                            "fontFamily": {
                                                                "description": "The font family.",
                                                                "type": "string"
                                                            },
                                                            "fontSize": {
                                                                "description": "The size of the font.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "foregroundColor": {
                                                                "description": "The foreground color of the text.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "italic": {
                                                                "description": "True if the text is italicized.",
                                                                "type": "boolean"
                                                            },
                                                            "strikethrough": {
                                                                "description": "True if the text has a strikethrough.",
                                                                "type": "boolean"
                                                            },
                                                            "underline": {
                                                                "description": "True if the text is underlined.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "domain": {
                                                        "description": "The data containing the bubble x-values.  These values locate the bubbles\nin the chart horizontally.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "groupIds": {
                                                        "description": "The data containing the bubble group IDs. All bubbles with the same group\nID are drawn in the same color. If bubble_sizes is specified then\nthis field must also be specified but may contain blank values.\nThis field is optional.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "legendPosition": {
                                                        "description": "Where the legend of the chart should be drawn.",
                                                        "enum": [
                                                            "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED",
                                                            "BOTTOM_LEGEND",
                                                            "LEFT_LEGEND",
                                                            "RIGHT_LEGEND",
                                                            "TOP_LEGEND",
                                                            "NO_LEGEND",
                                                            "INSIDE_LEGEND"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "series": {
                                                        "description": "The data contianing the bubble y-values.  These values locate the bubbles\nin the chart vertically.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "candlestickChart": {
                                                "description": "A candlestick chart specification.",
                                                "properties": {
                                                    "data": {
                                                        "description": "The Candlestick chart data.\nOnly one CandlestickData is supported.",
                                                        "items": {
                                                            "description": "The Candlestick chart data, each containing the low, open, close, and high\nvalues for a series.",
                                                            "properties": {
                                                                "closeSeries": {
                                                                    "description": "The range data (vertical axis) for the close/final value for each candle.\nThis is the top of the candle body.  If greater than the open value the\ncandle will be filled.  Otherwise the candle will be hollow.",
                                                                    "properties": {
                                                                        "data": {
                                                                            "description": "The data of the CandlestickSeries.",
                                                                            "properties": {
                                                                                "sourceRange": {
                                                                                    "description": "The source ranges of the data.",
                                                                                    "properties": {
                                                                                        "sources": {
                                                                                            "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                            "items": {
                                                                                                "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                "properties": {
                                                                                                    "endColumnIndex": {
                                                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "endRowIndex": {
                                                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "sheetId": {
                                                                                                        "description": "The sheet this range is on.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startColumnIndex": {
                                                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startRowIndex": {
                                                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "highSeries": {
                                                                    "description": "The range data (vertical axis) for the high/maximum value for each\ncandle. This is the top of the candle's center line.",
                                                                    "properties": {
                                                                        "data": {
                                                                            "description": "The data of the CandlestickSeries.",
                                                                            "properties": {
                                                                                "sourceRange": {
                                                                                    "description": "The source ranges of the data.",
                                                                                    "properties": {
                                                                                        "sources": {
                                                                                            "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                            "items": {
                                                                                                "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                "properties": {
                                                                                                    "endColumnIndex": {
                                                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "endRowIndex": {
                                                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "sheetId": {
                                                                                                        "description": "The sheet this range is on.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startColumnIndex": {
                                                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startRowIndex": {
                                                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "lowSeries": {
                                                                    "description": "The range data (vertical axis) for the low/minimum value for each candle.\nThis is the bottom of the candle's center line.",
                                                                    "properties": {
                                                                        "data": {
                                                                            "description": "The data of the CandlestickSeries.",
                                                                            "properties": {
                                                                                "sourceRange": {
                                                                                    "description": "The source ranges of the data.",
                                                                                    "properties": {
                                                                                        "sources": {
                                                                                            "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                            "items": {
                                                                                                "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                "properties": {
                                                                                                    "endColumnIndex": {
                                                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "endRowIndex": {
                                                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "sheetId": {
                                                                                                        "description": "The sheet this range is on.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startColumnIndex": {
                                                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startRowIndex": {
                                                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "openSeries": {
                                                                    "description": "The range data (vertical axis) for the open/initial value for each\ncandle. This is the bottom of the candle body.  If less than the close\nvalue the candle will be filled.  Otherwise the candle will be hollow.",
                                                                    "properties": {
                                                                        "data": {
                                                                            "description": "The data of the CandlestickSeries.",
                                                                            "properties": {
                                                                                "sourceRange": {
                                                                                    "description": "The source ranges of the data.",
                                                                                    "properties": {
                                                                                        "sources": {
                                                                                            "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                            "items": {
                                                                                                "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                                "properties": {
                                                                                                    "endColumnIndex": {
                                                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "endRowIndex": {
                                                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "sheetId": {
                                                                                                        "description": "The sheet this range is on.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startColumnIndex": {
                                                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    },
                                                                                                    "startRowIndex": {
                                                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                        "format": "int32",
                                                                                                        "type": "integer"
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "domain": {
                                                        "description": "The domain data (horizontal axis) for the candlestick chart.  String data\nwill be treated as discrete labels, other data will be treated as\ncontinuous values.",
                                                        "properties": {
                                                            "data": {
                                                                "description": "The data of the CandlestickDomain.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "reversed": {
                                                                "description": "True to reverse the order of the domain values (horizontal axis).",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "fontName": {
                                                "description": "The name of the font to use by default for all chart text (e.g. title,\naxis labels, legend).  If a font is specified for a specific part of the\nchart it will override this font name.",
                                                "type": "string"
                                            },
                                            "hiddenDimensionStrategy": {
                                                "description": "Determines how the charts will use hidden rows or columns.",
                                                "enum": [
                                                    "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED",
                                                    "SKIP_HIDDEN_ROWS_AND_COLUMNS",
                                                    "SKIP_HIDDEN_ROWS",
                                                    "SKIP_HIDDEN_COLUMNS",
                                                    "SHOW_ALL"
                                                ],
                                                "type": "string"
                                            },
                                            "histogramChart": {
                                                "description": "A histogram chart specification.",
                                                "properties": {
                                                    "bucketSize": {
                                                        "description": "By default the bucket size (the range of values stacked in a single\ncolumn) is chosen automatically, but it may be overridden here.\nE.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc.\nCannot be negative.\nThis field is optional.",
                                                        "format": "double",
                                                        "type": "number"
                                                    },
                                                    "legendPosition": {
                                                        "description": "The position of the chart legend.",
                                                        "enum": [
                                                            "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED",
                                                            "BOTTOM_LEGEND",
                                                            "LEFT_LEGEND",
                                                            "RIGHT_LEGEND",
                                                            "TOP_LEGEND",
                                                            "NO_LEGEND",
                                                            "INSIDE_LEGEND"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "outlierPercentile": {
                                                        "description": "The outlier percentile is used to ensure that outliers do not adversely\naffect the calculation of bucket sizes.  For example, setting an outlier\npercentile of 0.05 indicates that the top and bottom 5% of values when\ncalculating buckets.  The values are still included in the chart, they will\nbe added to the first or last buckets instead of their own buckets.\nMust be between 0.0 and 0.5.",
                                                        "format": "double",
                                                        "type": "number"
                                                    },
                                                    "series": {
                                                        "description": "The series for a histogram may be either a single series of values to be\nbucketed or multiple series, each of the same length, containing the name\nof the series followed by the values to be bucketed for that series.",
                                                        "items": {
                                                            "description": "A histogram series containing the series color and data.",
                                                            "properties": {
                                                                "barColor": {
                                                                    "description": "The color of the column representing this series in each bucket.\nThis field is optional.",
                                                                    "properties": {
                                                                        "alpha": {
                                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "blue": {
                                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "green": {
                                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        },
                                                                        "red": {
                                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                            "format": "float",
                                                                            "type": "number"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "data": {
                                                                    "description": "The data for this histogram series.",
                                                                    "properties": {
                                                                        "sourceRange": {
                                                                            "description": "The source ranges of the data.",
                                                                            "properties": {
                                                                                "sources": {
                                                                                    "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                    "items": {
                                                                                        "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                        "properties": {
                                                                                            "endColumnIndex": {
                                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "endRowIndex": {
                                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "sheetId": {
                                                                                                "description": "The sheet this range is on.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "startColumnIndex": {
                                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "startRowIndex": {
                                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "showItemDividers": {
                                                        "description": "Whether horizontal divider lines should be displayed between items in each\ncolumn.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "maximized": {
                                                "description": "True to make a chart fill the entire space in which it's rendered with\nminimum padding.  False to use the default padding.\n(Not applicable to Geo and Org charts.)",
                                                "type": "boolean"
                                            },
                                            "orgChart": {
                                                "description": "An org chart specification.",
                                                "properties": {
                                                    "labels": {
                                                        "description": "The data containing the labels for all the nodes in the chart.  Labels\nmust be unique.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "nodeColor": {
                                                        "description": "The color of the org chart nodes.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "nodeSize": {
                                                        "description": "The size of the org chart nodes.",
                                                        "enum": [
                                                            "ORG_CHART_LABEL_SIZE_UNSPECIFIED",
                                                            "SMALL",
                                                            "MEDIUM",
                                                            "LARGE"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "parentLabels": {
                                                        "description": "The data containing the label of the parent for the corresponding node.\nA blank value indicates that the node has no parent and is a top-level\nnode.\nThis field is optional.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "selectedNodeColor": {
                                                        "description": "The color of the selected org chart nodes.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "tooltips": {
                                                        "description": "The data containing the tooltip for the corresponding node.  A blank value\nresults in no tooltip being displayed for the node.\nThis field is optional.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "pieChart": {
                                                "description": "A pie chart specification.",
                                                "properties": {
                                                    "domain": {
                                                        "description": "The data that covers the domain of the pie chart.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "legendPosition": {
                                                        "description": "Where the legend of the pie chart should be drawn.",
                                                        "enum": [
                                                            "PIE_CHART_LEGEND_POSITION_UNSPECIFIED",
                                                            "BOTTOM_LEGEND",
                                                            "LEFT_LEGEND",
                                                            "RIGHT_LEGEND",
                                                            "TOP_LEGEND",
                                                            "NO_LEGEND",
                                                            "LABELED_LEGEND"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "pieHole": {
                                                        "description": "The size of the hole in the pie chart.",
                                                        "format": "double",
                                                        "type": "number"
                                                    },
                                                    "series": {
                                                        "description": "The data that covers the one and only series of the pie chart.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "threeDimensional": {
                                                        "description": "True if the pie is three dimensional.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "subtitle": {
                                                "description": "The subtitle of the chart.",
                                                "type": "string"
                                            },
                                            "subtitleTextFormat": {
                                                "description": "The subtitle text format.\nStrikethrough and underline are not supported.",
                                                "properties": {
                                                    "bold": {
                                                        "description": "True if the text is bold.",
                                                        "type": "boolean"
                                                    },
                                                    "fontFamily": {
                                                        "description": "The font family.",
                                                        "type": "string"
                                                    },
                                                    "fontSize": {
                                                        "description": "The size of the font.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "foregroundColor": {
                                                        "description": "The foreground color of the text.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "italic": {
                                                        "description": "True if the text is italicized.",
                                                        "type": "boolean"
                                                    },
                                                    "strikethrough": {
                                                        "description": "True if the text has a strikethrough.",
                                                        "type": "boolean"
                                                    },
                                                    "underline": {
                                                        "description": "True if the text is underlined.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "subtitleTextPosition": {
                                                "description": "The subtitle text position.\nThis field is optional.",
                                                "properties": {
                                                    "horizontalAlignment": {
                                                        "description": "Horizontal alignment setting for the piece of text.",
                                                        "enum": [
                                                            "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                            "LEFT",
                                                            "CENTER",
                                                            "RIGHT"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "title": {
                                                "description": "The title of the chart.",
                                                "type": "string"
                                            },
                                            "titleTextFormat": {
                                                "description": "The title text format.\nStrikethrough and underline are not supported.",
                                                "properties": {
                                                    "bold": {
                                                        "description": "True if the text is bold.",
                                                        "type": "boolean"
                                                    },
                                                    "fontFamily": {
                                                        "description": "The font family.",
                                                        "type": "string"
                                                    },
                                                    "fontSize": {
                                                        "description": "The size of the font.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "foregroundColor": {
                                                        "description": "The foreground color of the text.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "italic": {
                                                        "description": "True if the text is italicized.",
                                                        "type": "boolean"
                                                    },
                                                    "strikethrough": {
                                                        "description": "True if the text has a strikethrough.",
                                                        "type": "boolean"
                                                    },
                                                    "underline": {
                                                        "description": "True if the text is underlined.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "titleTextPosition": {
                                                "description": "The title text position.\nThis field is optional.",
                                                "properties": {
                                                    "horizontalAlignment": {
                                                        "description": "Horizontal alignment setting for the piece of text.",
                                                        "enum": [
                                                            "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                            "LEFT",
                                                            "CENTER",
                                                            "RIGHT"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "treemapChart": {
                                                "description": "A treemap chart specification.",
                                                "properties": {
                                                    "colorData": {
                                                        "description": "The data that determines the background color of each treemap data cell.\nThis field is optional. If not specified, size_data is used to\ndetermine background colors. If specified, the data is expected to be\nnumeric. color_scale will determine how the values in this data map to\ndata cell background colors.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "colorScale": {
                                                        "description": "The color scale for data cells in the treemap chart. Data cells are\nassigned colors based on their color values. These color values come from\ncolor_data, or from size_data if color_data is not specified.\nCells with color values less than or equal to min_value will\nhave minValueColor as their\nbackground color. Cells with color values greater than or equal to\nmax_value will have\nmaxValueColor as their background\ncolor. Cells with color values between min_value and max_value will\nhave background colors on a gradient between\nminValueColor and\nmaxValueColor, the midpoint of\nthe gradient being midValueColor.\nCells with missing or non-numeric color values will have\nnoDataColor as their background\ncolor.",
                                                        "properties": {
                                                            "maxValueColor": {
                                                                "description": "The background color for cells with a color value greater than or equal\nto maxValue. Defaults to #109618 if not\nspecified.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "midValueColor": {
                                                                "description": "The background color for cells with a color value at the midpoint between\nminValue and\nmaxValue. Defaults to #efe6dc if not\nspecified.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "minValueColor": {
                                                                "description": "The background color for cells with a color value less than or equal to\nminValue. Defaults to #dc3912 if not\nspecified.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "noDataColor": {
                                                                "description": "The background color for cells that have no color data associated with\nthem. Defaults to #000000 if not specified.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "headerColor": {
                                                        "description": "The background color for header cells.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "hideTooltips": {
                                                        "description": "True to hide tooltips.",
                                                        "type": "boolean"
                                                    },
                                                    "hintedLevels": {
                                                        "description": "The number of additional data levels beyond the labeled levels to be shown\non the treemap chart. These levels are not interactive and are shown\nwithout their labels. Defaults to 0 if not specified.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "labels": {
                                                        "description": "The data that contains the treemap cell labels.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "levels": {
                                                        "description": "The number of data levels to show on the treemap chart. These levels are\ninteractive and are shown with their labels. Defaults to 2 if not\nspecified.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "maxValue": {
                                                        "description": "The maximum possible data value. Cells with values greater than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual maximum value from color_data, or the maximum value from\nsize_data if color_data is not specified.",
                                                        "format": "double",
                                                        "type": "number"
                                                    },
                                                    "minValue": {
                                                        "description": "The minimum possible data value. Cells with values less than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual minimum value from color_data, or the minimum value from\nsize_data if color_data is not specified.",
                                                        "format": "double",
                                                        "type": "number"
                                                    },
                                                    "parentLabels": {
                                                        "description": "The data the contains the treemap cells' parent labels.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "sizeData": {
                                                        "description": "The data that determines the size of each treemap data cell. This data is\nexpected to be numeric. The cells corresponding to non-numeric or missing\ndata will not be rendered. If color_data is not specified, this data\nis used to determine data cell background colors as well.",
                                                        "properties": {
                                                            "sourceRange": {
                                                                "description": "The source ranges of the data.",
                                                                "properties": {
                                                                    "sources": {
                                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                        "items": {
                                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                            "properties": {
                                                                                "endColumnIndex": {
                                                                                    "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "endRowIndex": {
                                                                                    "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "sheetId": {
                                                                                    "description": "The sheet this range is on.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startColumnIndex": {
                                                                                    "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                },
                                                                                "startRowIndex": {
                                                                                    "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                    "format": "int32",
                                                                                    "type": "integer"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "textFormat": {
                                                        "description": "The text format for all labels on the chart.",
                                                        "properties": {
                                                            "bold": {
                                                                "description": "True if the text is bold.",
                                                                "type": "boolean"
                                                            },
                                                            "fontFamily": {
                                                                "description": "The font family.",
                                                                "type": "string"
                                                            },
                                                            "fontSize": {
                                                                "description": "The size of the font.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "foregroundColor": {
                                                                "description": "The foreground color of the text.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "italic": {
                                                                "description": "True if the text is italicized.",
                                                                "type": "boolean"
                                                            },
                                                            "strikethrough": {
                                                                "description": "True if the text has a strikethrough.",
                                                                "type": "boolean"
                                                            },
                                                            "underline": {
                                                                "description": "True if the text is underlined.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "waterfallChart": {
                                                "description": "A waterfall chart specification.",
                                                "properties": {
                                                    "connectorLineStyle": {
                                                        "description": "The line style for the connector lines.",
                                                        "properties": {
                                                            "type": {
                                                                "description": "The dash type of the line.",
                                                                "enum": [
                                                                    "LINE_DASH_TYPE_UNSPECIFIED",
                                                                    "INVISIBLE",
                                                                    "CUSTOM",
                                                                    "SOLID",
                                                                    "DOTTED",
                                                                    "MEDIUM_DASHED",
                                                                    "MEDIUM_DASHED_DOTTED",
                                                                    "LONG_DASHED",
                                                                    "LONG_DASHED_DOTTED"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "width": {
                                                                "description": "The thickness of the line, in px.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "domain": {
                                                        "description": "The domain data (horizontal axis) for the waterfall chart.",
                                                        "properties": {
                                                            "data": {
                                                                "description": "The data of the WaterfallChartDomain.",
                                                                "properties": {
                                                                    "sourceRange": {
                                                                        "description": "The source ranges of the data.",
                                                                        "properties": {
                                                                            "sources": {
                                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                "items": {
                                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                    "properties": {
                                                                                        "endColumnIndex": {
                                                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "endRowIndex": {
                                                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "sheetId": {
                                                                                            "description": "The sheet this range is on.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startColumnIndex": {
                                                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "startRowIndex": {
                                                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                            "format": "int32",
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "reversed": {
                                                                "description": "True to reverse the order of the domain values (horizontal axis).",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "firstValueIsTotal": {
                                                        "description": "True to interpret the first value as a total.",
                                                        "type": "boolean"
                                                    },
                                                    "hideConnectorLines": {
                                                        "description": "True to hide connector lines between columns.",
                                                        "type": "boolean"
                                                    },
                                                    "series": {
                                                        "description": "The data this waterfall chart is visualizing.",
                                                        "items": {
                                                            "description": "A single series of data for a waterfall chart.",
                                                            "properties": {
                                                                "customSubtotals": {
                                                                    "description": "Custom subtotal columns appearing in this series. The order in which\nsubtotals are defined is not significant. Only one subtotal may be\ndefined for each data point.",
                                                                    "items": {
                                                                        "description": "A custom subtotal column for a waterfall chart series.",
                                                                        "properties": {
                                                                            "dataIsSubtotal": {
                                                                                "description": "True if the data point at subtotal_index is the subtotal. If false,\nthe subtotal will be computed and appear after the data point.",
                                                                                "type": "boolean"
                                                                            },
                                                                            "label": {
                                                                                "description": "A label for the subtotal column.",
                                                                                "type": "string"
                                                                            },
                                                                            "subtotalIndex": {
                                                                                "description": "The 0-based index of a data point within the series. If\ndata_is_subtotal is true, the data point at this index is the\nsubtotal. Otherwise, the subtotal appears after the data point with\nthis index. A series can have multiple subtotals at arbitrary indices,\nbut subtotals do not affect the indices of the data points. For\nexample, if a series has three data points, their indices will always\nbe 0, 1, and 2, regardless of how many subtotals exist on the series or\nwhat data points they are associated with.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "data": {
                                                                    "description": "The data being visualized in this series.",
                                                                    "properties": {
                                                                        "sourceRange": {
                                                                            "description": "The source ranges of the data.",
                                                                            "properties": {
                                                                                "sources": {
                                                                                    "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                                    "items": {
                                                                                        "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                                        "properties": {
                                                                                            "endColumnIndex": {
                                                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "endRowIndex": {
                                                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "sheetId": {
                                                                                                "description": "The sheet this range is on.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "startColumnIndex": {
                                                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "startRowIndex": {
                                                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                                                "format": "int32",
                                                                                                "type": "integer"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "hideTrailingSubtotal": {
                                                                    "description": "True to hide the subtotal column from the end of the series. By default,\na subtotal column will appear at the end of each series. Setting this\nfield to true will hide that subtotal column for this series.",
                                                                    "type": "boolean"
                                                                },
                                                                "negativeColumnsStyle": {
                                                                    "description": "Styles for all columns in this series with negative values.",
                                                                    "properties": {
                                                                        "color": {
                                                                            "description": "The color of the column.",
                                                                            "properties": {
                                                                                "alpha": {
                                                                                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "blue": {
                                                                                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "green": {
                                                                                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "red": {
                                                                                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "label": {
                                                                            "description": "The label of the column's legend.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "positiveColumnsStyle": {
                                                                    "description": "Styles for all columns in this series with positive values.",
                                                                    "properties": {
                                                                        "color": {
                                                                            "description": "The color of the column.",
                                                                            "properties": {
                                                                                "alpha": {
                                                                                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "blue": {
                                                                                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "green": {
                                                                                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "red": {
                                                                                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "label": {
                                                                            "description": "The label of the column's legend.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "subtotalColumnsStyle": {
                                                                    "description": "Styles for all subtotal columns in this series.",
                                                                    "properties": {
                                                                        "color": {
                                                                            "description": "The color of the column.",
                                                                            "properties": {
                                                                                "alpha": {
                                                                                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "blue": {
                                                                                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "green": {
                                                                                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                },
                                                                                "red": {
                                                                                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                    "format": "float",
                                                                                    "type": "number"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "label": {
                                                                            "description": "The label of the column's legend.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "stackedType": {
                                                        "description": "The stacked type.",
                                                        "enum": [
                                                            "WATERFALL_STACKED_TYPE_UNSPECIFIED",
                                                            "STACKED",
                                                            "SEQUENTIAL"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "updateConditionalFormatRule": {
                                "description": "Updates an existing conditional format rule.",
                                "properties": {
                                    "index": {
                                        "description": "The zero-based index of the rule that should be replaced or moved.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "newIndex": {
                                        "description": "The zero-based new index the rule should end up at.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "rule": {
                                        "description": "The rule that should replace the rule at the given index.",
                                        "properties": {
                                            "booleanRule": {
                                                "description": "The formatting is either \"on\" or \"off\" according to the rule.",
                                                "properties": {
                                                    "condition": {
                                                        "description": "The condition of the rule. If the condition evaluates to true,\nthe format is applied.",
                                                        "properties": {
                                                            "type": {
                                                                "description": "The type of condition.",
                                                                "enum": [
                                                                    "CONDITION_TYPE_UNSPECIFIED",
                                                                    "NUMBER_GREATER",
                                                                    "NUMBER_GREATER_THAN_EQ",
                                                                    "NUMBER_LESS",
                                                                    "NUMBER_LESS_THAN_EQ",
                                                                    "NUMBER_EQ",
                                                                    "NUMBER_NOT_EQ",
                                                                    "NUMBER_BETWEEN",
                                                                    "NUMBER_NOT_BETWEEN",
                                                                    "TEXT_CONTAINS",
                                                                    "TEXT_NOT_CONTAINS",
                                                                    "TEXT_STARTS_WITH",
                                                                    "TEXT_ENDS_WITH",
                                                                    "TEXT_EQ",
                                                                    "TEXT_IS_EMAIL",
                                                                    "TEXT_IS_URL",
                                                                    "DATE_EQ",
                                                                    "DATE_BEFORE",
                                                                    "DATE_AFTER",
                                                                    "DATE_ON_OR_BEFORE",
                                                                    "DATE_ON_OR_AFTER",
                                                                    "DATE_BETWEEN",
                                                                    "DATE_NOT_BETWEEN",
                                                                    "DATE_IS_VALID",
                                                                    "ONE_OF_RANGE",
                                                                    "ONE_OF_LIST",
                                                                    "BLANK",
                                                                    "NOT_BLANK",
                                                                    "CUSTOM_FORMULA",
                                                                    "BOOLEAN"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "values": {
                                                                "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                                "items": {
                                                                    "description": "The value of the condition.",
                                                                    "properties": {
                                                                        "relativeDate": {
                                                                            "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                                            "enum": [
                                                                                "RELATIVE_DATE_UNSPECIFIED",
                                                                                "PAST_YEAR",
                                                                                "PAST_MONTH",
                                                                                "PAST_WEEK",
                                                                                "YESTERDAY",
                                                                                "TODAY",
                                                                                "TOMORROW"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "userEnteredValue": {
                                                                            "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "format": {
                                                        "description": "The format to apply.\nConditional formatting can only apply a subset of formatting:\nbold, italic,\nstrikethrough,\nforeground color &\nbackground color.",
                                                        "properties": {
                                                            "backgroundColor": {
                                                                "description": "The background color of the cell.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "borders": {
                                                                "description": "The borders of the cell.",
                                                                "properties": {
                                                                    "bottom": {
                                                                        "description": "The bottom border of the cell.",
                                                                        "properties": {
                                                                            "color": {
                                                                                "description": "The color of the border.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "style": {
                                                                                "description": "The style of the border.",
                                                                                "enum": [
                                                                                    "STYLE_UNSPECIFIED",
                                                                                    "DOTTED",
                                                                                    "DASHED",
                                                                                    "SOLID",
                                                                                    "SOLID_MEDIUM",
                                                                                    "SOLID_THICK",
                                                                                    "NONE",
                                                                                    "DOUBLE"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "width": {
                                                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "left": {
                                                                        "description": "The left border of the cell.",
                                                                        "properties": {
                                                                            "color": {
                                                                                "description": "The color of the border.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "style": {
                                                                                "description": "The style of the border.",
                                                                                "enum": [
                                                                                    "STYLE_UNSPECIFIED",
                                                                                    "DOTTED",
                                                                                    "DASHED",
                                                                                    "SOLID",
                                                                                    "SOLID_MEDIUM",
                                                                                    "SOLID_THICK",
                                                                                    "NONE",
                                                                                    "DOUBLE"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "width": {
                                                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "right": {
                                                                        "description": "The right border of the cell.",
                                                                        "properties": {
                                                                            "color": {
                                                                                "description": "The color of the border.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "style": {
                                                                                "description": "The style of the border.",
                                                                                "enum": [
                                                                                    "STYLE_UNSPECIFIED",
                                                                                    "DOTTED",
                                                                                    "DASHED",
                                                                                    "SOLID",
                                                                                    "SOLID_MEDIUM",
                                                                                    "SOLID_THICK",
                                                                                    "NONE",
                                                                                    "DOUBLE"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "width": {
                                                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "top": {
                                                                        "description": "The top border of the cell.",
                                                                        "properties": {
                                                                            "color": {
                                                                                "description": "The color of the border.",
                                                                                "properties": {
                                                                                    "alpha": {
                                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "blue": {
                                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "green": {
                                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    },
                                                                                    "red": {
                                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                        "format": "float",
                                                                                        "type": "number"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "style": {
                                                                                "description": "The style of the border.",
                                                                                "enum": [
                                                                                    "STYLE_UNSPECIFIED",
                                                                                    "DOTTED",
                                                                                    "DASHED",
                                                                                    "SOLID",
                                                                                    "SOLID_MEDIUM",
                                                                                    "SOLID_THICK",
                                                                                    "NONE",
                                                                                    "DOUBLE"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "width": {
                                                                                "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                                "format": "int32",
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "horizontalAlignment": {
                                                                "description": "The horizontal alignment of the value in the cell.",
                                                                "enum": [
                                                                    "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                                    "LEFT",
                                                                    "CENTER",
                                                                    "RIGHT"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "hyperlinkDisplayType": {
                                                                "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                                "enum": [
                                                                    "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                                    "LINKED",
                                                                    "PLAIN_TEXT"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "numberFormat": {
                                                                "description": "A format describing how number values should be represented to the user.",
                                                                "properties": {
                                                                    "pattern": {
                                                                        "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                                        "enum": [
                                                                            "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                                            "TEXT",
                                                                            "NUMBER",
                                                                            "PERCENT",
                                                                            "CURRENCY",
                                                                            "DATE",
                                                                            "TIME",
                                                                            "DATE_TIME",
                                                                            "SCIENTIFIC"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "padding": {
                                                                "description": "The padding of the cell.",
                                                                "properties": {
                                                                    "bottom": {
                                                                        "description": "The bottom padding of the cell.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "left": {
                                                                        "description": "The left padding of the cell.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "right": {
                                                                        "description": "The right padding of the cell.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "top": {
                                                                        "description": "The top padding of the cell.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "textDirection": {
                                                                "description": "The direction of the text in the cell.",
                                                                "enum": [
                                                                    "TEXT_DIRECTION_UNSPECIFIED",
                                                                    "LEFT_TO_RIGHT",
                                                                    "RIGHT_TO_LEFT"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "textFormat": {
                                                                "description": "The format of the text in the cell (unless overridden by a format run).",
                                                                "properties": {
                                                                    "bold": {
                                                                        "description": "True if the text is bold.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "fontFamily": {
                                                                        "description": "The font family.",
                                                                        "type": "string"
                                                                    },
                                                                    "fontSize": {
                                                                        "description": "The size of the font.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "foregroundColor": {
                                                                        "description": "The foreground color of the text.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "italic": {
                                                                        "description": "True if the text is italicized.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "strikethrough": {
                                                                        "description": "True if the text has a strikethrough.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "underline": {
                                                                        "description": "True if the text is underlined.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "textRotation": {
                                                                "description": "The rotation applied to text in a cell",
                                                                "properties": {
                                                                    "angle": {
                                                                        "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    },
                                                                    "vertical": {
                                                                        "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "verticalAlignment": {
                                                                "description": "The vertical alignment of the value in the cell.",
                                                                "enum": [
                                                                    "VERTICAL_ALIGN_UNSPECIFIED",
                                                                    "TOP",
                                                                    "MIDDLE",
                                                                    "BOTTOM"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "wrapStrategy": {
                                                                "description": "The wrap strategy for the value in the cell.",
                                                                "enum": [
                                                                    "WRAP_STRATEGY_UNSPECIFIED",
                                                                    "OVERFLOW_CELL",
                                                                    "LEGACY_WRAP",
                                                                    "CLIP",
                                                                    "WRAP"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "gradientRule": {
                                                "description": "The formatting will vary based on the gradients in the rule.",
                                                "properties": {
                                                    "maxpoint": {
                                                        "description": "The final interpolation point.",
                                                        "properties": {
                                                            "color": {
                                                                "description": "The color this interpolation point should use.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": {
                                                                "description": "How the value should be interpreted.",
                                                                "enum": [
                                                                    "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
                                                                    "MIN",
                                                                    "MAX",
                                                                    "NUMBER",
                                                                    "PERCENT",
                                                                    "PERCENTILE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "midpoint": {
                                                        "description": "An optional midway interpolation point.",
                                                        "properties": {
                                                            "color": {
                                                                "description": "The color this interpolation point should use.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": {
                                                                "description": "How the value should be interpreted.",
                                                                "enum": [
                                                                    "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
                                                                    "MIN",
                                                                    "MAX",
                                                                    "NUMBER",
                                                                    "PERCENT",
                                                                    "PERCENTILE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "minpoint": {
                                                        "description": "The starting interpolation point.",
                                                        "properties": {
                                                            "color": {
                                                                "description": "The color this interpolation point should use.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": {
                                                                "description": "How the value should be interpreted.",
                                                                "enum": [
                                                                    "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
                                                                    "MIN",
                                                                    "MAX",
                                                                    "NUMBER",
                                                                    "PERCENT",
                                                                    "PERCENTILE"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "ranges": {
                                                "description": "The ranges that are formatted if the condition is true.\nAll the ranges must be on the same grid.",
                                                "items": {
                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                    "properties": {
                                                        "endColumnIndex": {
                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "endRowIndex": {
                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "sheetId": {
                                                            "description": "The sheet this range is on.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "sheetId": {
                                        "description": "The sheet of the rule to move.  Required if new_index is set,\nunused otherwise.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "updateDeveloperMetadata": {
                                "description": "Updates an existing developer metadata entry",
                                "properties": {
                                    "dataFilters": {
                                        "description": "The filters matching the developer metadata entries to update.",
                                        "items": {
                                            "description": "Filter that describes what data should be selected or returned from a\nrequest.",
                                            "properties": {
                                                "a1Range": {
                                                    "description": "Selects data that matches the specified A1 range.",
                                                    "type": "string"
                                                },
                                                "developerMetadataLookup": {
                                                    "description": "Selects data associated with the developer metadata matching the criteria\ndescribed by this DeveloperMetadataLookup.",
                                                    "properties": {
                                                        "locationMatchingStrategy": {
                                                            "description": "Determines how this lookup matches the location.  If this field is\nspecified as EXACT, only developer metadata associated on the exact\nlocation specified is matched.  If this field is specified to INTERSECTING,\ndeveloper metadata associated on intersecting locations is also\nmatched.  If left unspecified, this field assumes a default value of\nINTERSECTING.\nIf this field is specified, a metadataLocation\nmust also be specified.",
                                                            "enum": [
                                                                "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                                                                "EXACT_LOCATION",
                                                                "INTERSECTING_LOCATION"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "locationType": {
                                                            "description": "Limits the selected developer metadata to those entries which are\nassociated with locations of the specified type.  For example, when this\nfield is specified as ROW this lookup\nonly considers developer metadata associated on rows.  If the field is left\nunspecified, all location types are considered.  This field cannot be\nspecified as SPREADSHEET when\nthe locationMatchingStrategy\nis specified as INTERSECTING or when the\nmetadataLocation is specified as a\nnon-spreadsheet location: spreadsheet metadata cannot intersect any other\ndeveloper metadata location.  This field also must be left unspecified when\nthe locationMatchingStrategy\nis specified as EXACT.",
                                                            "enum": [
                                                                "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                                                "ROW",
                                                                "COLUMN",
                                                                "SHEET",
                                                                "SPREADSHEET"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "metadataId": {
                                                            "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_id.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "metadataKey": {
                                                            "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_key.",
                                                            "type": "string"
                                                        },
                                                        "metadataLocation": {
                                                            "description": "Limits the selected developer metadata to those entries associated with\nthe specified location.  This field either matches exact locations or all\nintersecting locations according the specified\nlocationMatchingStrategy.",
                                                            "properties": {
                                                                "dimensionRange": {
                                                                    "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                                                                    "properties": {
                                                                        "dimension": {
                                                                            "description": "The dimension of the span.",
                                                                            "enum": [
                                                                                "DIMENSION_UNSPECIFIED",
                                                                                "ROWS",
                                                                                "COLUMNS"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "endIndex": {
                                                                            "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        },
                                                                        "sheetId": {
                                                                            "description": "The sheet this span is on.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        },
                                                                        "startIndex": {
                                                                            "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "locationType": {
                                                                    "description": "The type of location this object represents.  This field is read-only.",
                                                                    "enum": [
                                                                        "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                                                        "ROW",
                                                                        "COLUMN",
                                                                        "SHEET",
                                                                        "SPREADSHEET"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "sheetId": {
                                                                    "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                                                                    "format": "int32",
                                                                    "type": "integer"
                                                                },
                                                                "spreadsheet": {
                                                                    "description": "True when metadata is associated with an entire spreadsheet.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "metadataValue": {
                                                            "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_value.",
                                                            "type": "string"
                                                        },
                                                        "visibility": {
                                                            "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.visibility.  If left unspecified, all developer\nmetadata visibile to the requesting project is considered.",
                                                            "enum": [
                                                                "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                                                                "DOCUMENT",
                                                                "PROJECT"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "gridRange": {
                                                    "description": "Selects data that matches the range described by the GridRange.",
                                                    "properties": {
                                                        "endColumnIndex": {
                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "endRowIndex": {
                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "sheetId": {
                                                            "description": "The sheet this range is on.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "developerMetadata": {
                                        "description": "The value that all metadata matched by the data filters will be updated to.",
                                        "properties": {
                                            "location": {
                                                "description": "The location where the metadata is associated.",
                                                "properties": {
                                                    "dimensionRange": {
                                                        "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                                                        "properties": {
                                                            "dimension": {
                                                                "description": "The dimension of the span.",
                                                                "enum": [
                                                                    "DIMENSION_UNSPECIFIED",
                                                                    "ROWS",
                                                                    "COLUMNS"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "endIndex": {
                                                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "sheetId": {
                                                                "description": "The sheet this span is on.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "startIndex": {
                                                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "locationType": {
                                                        "description": "The type of location this object represents.  This field is read-only.",
                                                        "enum": [
                                                            "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                                            "ROW",
                                                            "COLUMN",
                                                            "SHEET",
                                                            "SPREADSHEET"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "sheetId": {
                                                        "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "spreadsheet": {
                                                        "description": "True when metadata is associated with an entire spreadsheet.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "metadataId": {
                                                "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be\nspecified when metadata is created, otherwise one will be randomly\ngenerated and assigned. Must be positive.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "metadataKey": {
                                                "description": "The metadata key. There may be multiple metadata in a spreadsheet with the\nsame key.  Developer metadata must always have a key specified.",
                                                "type": "string"
                                            },
                                            "metadataValue": {
                                                "description": "Data associated with the metadata's key.",
                                                "type": "string"
                                            },
                                            "visibility": {
                                                "description": "The metadata visibility.  Developer metadata must always have a visibility\nspecified.",
                                                "enum": [
                                                    "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                                                    "DOCUMENT",
                                                    "PROJECT"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root `developerMetadata` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "updateDimensionGroup": {
                                "description": "Updates the state of the specified group.",
                                "properties": {
                                    "dimensionGroup": {
                                        "description": "The group whose state should be updated. The range and depth of the group\nshould specify a valid group on the sheet, and all other fields updated.",
                                        "properties": {
                                            "collapsed": {
                                                "description": "This field is true if this group is collapsed. A collapsed group remains\ncollapsed if an overlapping group at a shallower depth is expanded.\n\nA true value does not imply that all dimensions within the group are\nhidden, since a dimension's visibility can change independently from this\ngroup property. However, when this property is updated, all dimensions\nwithin it are set to hidden if this field is true, or set to visible if\nthis field is false.",
                                                "type": "boolean"
                                            },
                                            "depth": {
                                                "description": "The depth of the group, representing how many groups have a range that\nwholly contains the range of this group.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "range": {
                                                "description": "The range over which this group exists.",
                                                "properties": {
                                                    "dimension": {
                                                        "description": "The dimension of the span.",
                                                        "enum": [
                                                            "DIMENSION_UNSPECIFIED",
                                                            "ROWS",
                                                            "COLUMNS"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "endIndex": {
                                                        "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this span is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startIndex": {
                                                        "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root `dimensionGroup` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "updateDimensionProperties": {
                                "description": "Updates dimensions' properties.",
                                "properties": {
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root `properties` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "properties": {
                                        "description": "Properties to update.",
                                        "properties": {
                                            "developerMetadata": {
                                                "description": "The developer metadata associated with a single row or column.",
                                                "items": {
                                                    "description": "Developer metadata associated with a location or object in a spreadsheet.\nDeveloper metadata may be used to associate arbitrary data with various\nparts of a spreadsheet and will remain associated at those locations as they\nmove around and the spreadsheet is edited.  For example, if developer\nmetadata is associated with row 5 and another row is then subsequently\ninserted above row 5, that original metadata will still be associated with\nthe row it was first associated with (what is now row 6). If the associated\nobject is deleted its metadata is deleted too.",
                                                    "properties": {
                                                        "location": {
                                                            "description": "The location where the metadata is associated.",
                                                            "properties": {
                                                                "dimensionRange": {
                                                                    "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                                                                    "properties": {
                                                                        "dimension": {
                                                                            "description": "The dimension of the span.",
                                                                            "enum": [
                                                                                "DIMENSION_UNSPECIFIED",
                                                                                "ROWS",
                                                                                "COLUMNS"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "endIndex": {
                                                                            "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        },
                                                                        "sheetId": {
                                                                            "description": "The sheet this span is on.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        },
                                                                        "startIndex": {
                                                                            "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                                            "format": "int32",
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "locationType": {
                                                                    "description": "The type of location this object represents.  This field is read-only.",
                                                                    "enum": [
                                                                        "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                                                        "ROW",
                                                                        "COLUMN",
                                                                        "SHEET",
                                                                        "SPREADSHEET"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "sheetId": {
                                                                    "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                                                                    "format": "int32",
                                                                    "type": "integer"
                                                                },
                                                                "spreadsheet": {
                                                                    "description": "True when metadata is associated with an entire spreadsheet.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "metadataId": {
                                                            "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be\nspecified when metadata is created, otherwise one will be randomly\ngenerated and assigned. Must be positive.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "metadataKey": {
                                                            "description": "The metadata key. There may be multiple metadata in a spreadsheet with the\nsame key.  Developer metadata must always have a key specified.",
                                                            "type": "string"
                                                        },
                                                        "metadataValue": {
                                                            "description": "Data associated with the metadata's key.",
                                                            "type": "string"
                                                        },
                                                        "visibility": {
                                                            "description": "The metadata visibility.  Developer metadata must always have a visibility\nspecified.",
                                                            "enum": [
                                                                "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                                                                "DOCUMENT",
                                                                "PROJECT"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "hiddenByFilter": {
                                                "description": "True if this dimension is being filtered.\nThis field is read-only.",
                                                "type": "boolean"
                                            },
                                            "hiddenByUser": {
                                                "description": "True if this dimension is explicitly hidden.",
                                                "type": "boolean"
                                            },
                                            "pixelSize": {
                                                "description": "The height (if a row) or width (if a column) of the dimension in pixels.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "range": {
                                        "description": "The rows or columns to update.",
                                        "properties": {
                                            "dimension": {
                                                "description": "The dimension of the span.",
                                                "enum": [
                                                    "DIMENSION_UNSPECIFIED",
                                                    "ROWS",
                                                    "COLUMNS"
                                                ],
                                                "type": "string"
                                            },
                                            "endIndex": {
                                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this span is on.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "startIndex": {
                                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "updateEmbeddedObjectPosition": {
                                "description": "Updates an embedded object's (e.g. chart, image) position.",
                                "properties": {
                                    "fields": {
                                        "description": "The fields of OverlayPosition\nthat should be updated when setting a new position. Used only if\nnewPosition.overlayPosition\nis set, in which case at least one field must\nbe specified.  The root `newPosition.overlayPosition` is implied and\nshould not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "newPosition": {
                                        "description": "An explicit position to move the embedded object to.\nIf newPosition.sheetId is set,\na new sheet with that ID will be created.\nIf newPosition.newSheet is set to true,\na new sheet will be created with an ID that will be chosen for you.",
                                        "properties": {
                                            "newSheet": {
                                                "description": "If true, the embedded object is put on a new sheet whose ID\nis chosen for you. Used only when writing.",
                                                "type": "boolean"
                                            },
                                            "overlayPosition": {
                                                "description": "The position at which the object is overlaid on top of a grid.",
                                                "properties": {
                                                    "anchorCell": {
                                                        "description": "The cell the object is anchored to.",
                                                        "properties": {
                                                            "columnIndex": {
                                                                "description": "The column index of the coordinate.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "rowIndex": {
                                                                "description": "The row index of the coordinate.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "sheetId": {
                                                                "description": "The sheet this coordinate is on.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "heightPixels": {
                                                        "description": "The height of the object, in pixels. Defaults to 371.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "offsetXPixels": {
                                                        "description": "The horizontal offset, in pixels, that the object is offset\nfrom the anchor cell.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "offsetYPixels": {
                                                        "description": "The vertical offset, in pixels, that the object is offset\nfrom the anchor cell.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "widthPixels": {
                                                        "description": "The width of the object, in pixels. Defaults to 600.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "sheetId": {
                                                "description": "The sheet this is on. Set only if the embedded object\nis on its own sheet. Must be non-negative.",
                                                "format": "int32",
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "objectId": {
                                        "description": "The ID of the object to moved.",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "updateFilterView": {
                                "description": "Updates the properties of a filter view.",
                                "properties": {
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root `filter` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "filter": {
                                        "description": "The new properties of the filter view.",
                                        "properties": {
                                            "criteria": {
                                                "additionalProperties": {
                                                    "description": "Criteria for showing/hiding rows in a filter or filter view.",
                                                    "properties": {
                                                        "condition": {
                                                            "description": "A condition that must be true for values to be shown.\n(This does not override hiddenValues -- if a value is listed there,\n it will still be hidden.)",
                                                            "properties": {
                                                                "type": {
                                                                    "description": "The type of condition.",
                                                                    "enum": [
                                                                        "CONDITION_TYPE_UNSPECIFIED",
                                                                        "NUMBER_GREATER",
                                                                        "NUMBER_GREATER_THAN_EQ",
                                                                        "NUMBER_LESS",
                                                                        "NUMBER_LESS_THAN_EQ",
                                                                        "NUMBER_EQ",
                                                                        "NUMBER_NOT_EQ",
                                                                        "NUMBER_BETWEEN",
                                                                        "NUMBER_NOT_BETWEEN",
                                                                        "TEXT_CONTAINS",
                                                                        "TEXT_NOT_CONTAINS",
                                                                        "TEXT_STARTS_WITH",
                                                                        "TEXT_ENDS_WITH",
                                                                        "TEXT_EQ",
                                                                        "TEXT_IS_EMAIL",
                                                                        "TEXT_IS_URL",
                                                                        "DATE_EQ",
                                                                        "DATE_BEFORE",
                                                                        "DATE_AFTER",
                                                                        "DATE_ON_OR_BEFORE",
                                                                        "DATE_ON_OR_AFTER",
                                                                        "DATE_BETWEEN",
                                                                        "DATE_NOT_BETWEEN",
                                                                        "DATE_IS_VALID",
                                                                        "ONE_OF_RANGE",
                                                                        "ONE_OF_LIST",
                                                                        "BLANK",
                                                                        "NOT_BLANK",
                                                                        "CUSTOM_FORMULA",
                                                                        "BOOLEAN"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "values": {
                                                                    "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                                    "items": {
                                                                        "description": "The value of the condition.",
                                                                        "properties": {
                                                                            "relativeDate": {
                                                                                "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                                                "enum": [
                                                                                    "RELATIVE_DATE_UNSPECIFIED",
                                                                                    "PAST_YEAR",
                                                                                    "PAST_MONTH",
                                                                                    "PAST_WEEK",
                                                                                    "YESTERDAY",
                                                                                    "TODAY",
                                                                                    "TOMORROW"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "userEnteredValue": {
                                                                                "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "hiddenValues": {
                                                            "description": "Values that should be hidden.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
                                                "type": "object"
                                            },
                                            "filterViewId": {
                                                "description": "The ID of the filter view.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "namedRangeId": {
                                                "description": "The named range this filter view is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                                                "type": "string"
                                            },
                                            "range": {
                                                "description": "The range this filter view covers.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "sortSpecs": {
                                                "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
                                                "items": {
                                                    "description": "A sort order associated with a specific column or row.",
                                                    "properties": {
                                                        "dimensionIndex": {
                                                            "description": "The dimension the sort should be applied to.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "sortOrder": {
                                                            "description": "The order data should be sorted.",
                                                            "enum": [
                                                                "SORT_ORDER_UNSPECIFIED",
                                                                "ASCENDING",
                                                                "DESCENDING"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "title": {
                                                "description": "The name of the filter view.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "updateNamedRange": {
                                "description": "Updates a named range.",
                                "properties": {
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root `namedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "namedRange": {
                                        "description": "The named range to update with the new properties.",
                                        "properties": {
                                            "name": {
                                                "description": "The name of the named range.",
                                                "type": "string"
                                            },
                                            "namedRangeId": {
                                                "description": "The ID of the named range.",
                                                "type": "string"
                                            },
                                            "range": {
                                                "description": "The range this represents.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "updateProtectedRange": {
                                "description": "Updates a protected range.",
                                "properties": {
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root `protectedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "protectedRange": {
                                        "description": "The protected range to update with the new properties.",
                                        "properties": {
                                            "description": {
                                                "description": "The description of this protected range.",
                                                "type": "string"
                                            },
                                            "editors": {
                                                "description": "The users and groups with edit access to the protected range.\nThis field is only visible to users with edit access to the protected\nrange and the document.\nEditors are not supported with warning_only protection.",
                                                "properties": {
                                                    "domainUsersCanEdit": {
                                                        "description": "True if anyone in the document's domain has edit access to the protected\nrange.  Domain protection is only supported on documents within a domain.",
                                                        "type": "boolean"
                                                    },
                                                    "groups": {
                                                        "description": "The email addresses of groups with edit access to the protected range.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "users": {
                                                        "description": "The email addresses of users with edit access to the protected range.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "namedRangeId": {
                                                "description": "The named range this protected range is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                                                "type": "string"
                                            },
                                            "protectedRangeId": {
                                                "description": "The ID of the protected range.\nThis field is read-only.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "range": {
                                                "description": "The range that is being protected.\nThe range may be fully unbounded, in which case this is considered\na protected sheet.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                                                "properties": {
                                                    "endColumnIndex": {
                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "endRowIndex": {
                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "sheetId": {
                                                        "description": "The sheet this range is on.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "requestingUserCanEdit": {
                                                "description": "True if the user who requested this protected range can edit the\nprotected area.\nThis field is read-only.",
                                                "type": "boolean"
                                            },
                                            "unprotectedRanges": {
                                                "description": "The list of unprotected ranges within a protected sheet.\nUnprotected ranges are only supported on protected sheets.",
                                                "items": {
                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                    "properties": {
                                                        "endColumnIndex": {
                                                            "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "endRowIndex": {
                                                            "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "sheetId": {
                                                            "description": "The sheet this range is on.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                            "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                            "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "warningOnly": {
                                                "description": "True if this protected range will show a warning when editing.\nWarning-based protection means that every user can edit data in the\nprotected range, except editing will prompt a warning asking the user\nto confirm the edit.\n\nWhen writing: if this field is true, then editors is ignored.\nAdditionally, if this field is changed from true to false and the\n`editors` field is not set (nor included in the field mask), then\nthe editors will be set to all the editors in the document.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "updateSheetProperties": {
                                "description": "Updates a sheet's properties.",
                                "properties": {
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root `properties` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "properties": {
                                        "description": "The properties to update.",
                                        "properties": {
                                            "gridProperties": {
                                                "description": "Additional properties of the sheet if this sheet is a grid.\n(If the sheet is an object sheet, containing a chart or image, then\nthis field will be absent.)\nWhen writing it is an error to set any grid properties on non-grid sheets.",
                                                "properties": {
                                                    "columnCount": {
                                                        "description": "The number of columns in the grid.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "columnGroupControlAfter": {
                                                        "description": "True if the column grouping control toggle is shown after the group.",
                                                        "type": "boolean"
                                                    },
                                                    "frozenColumnCount": {
                                                        "description": "The number of columns that are frozen in the grid.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "frozenRowCount": {
                                                        "description": "The number of rows that are frozen in the grid.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "hideGridlines": {
                                                        "description": "True if the grid isn't showing gridlines in the UI.",
                                                        "type": "boolean"
                                                    },
                                                    "rowCount": {
                                                        "description": "The number of rows in the grid.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "rowGroupControlAfter": {
                                                        "description": "True if the row grouping control toggle is shown after the group.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "hidden": {
                                                "description": "True if the sheet is hidden in the UI, false if it's visible.",
                                                "type": "boolean"
                                            },
                                            "index": {
                                                "description": "The index of the sheet within the spreadsheet.\nWhen adding or updating sheet properties, if this field\nis excluded then the sheet is added or moved to the end\nof the sheet list. When updating sheet indices or inserting\nsheets, movement is considered in \"before the move\" indexes.\nFor example, if there were 3 sheets (S1, S2, S3) in order to\nmove S1 ahead of S2 the index would have to be set to 2. A sheet\nindex update request is ignored if the requested index is\nidentical to the sheets current index or if the requested new\nindex is equal to the current sheet index + 1.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "rightToLeft": {
                                                "description": "True if the sheet is an RTL sheet instead of an LTR sheet.",
                                                "type": "boolean"
                                            },
                                            "sheetId": {
                                                "description": "The ID of the sheet. Must be non-negative.\nThis field cannot be changed once set.",
                                                "format": "int32",
                                                "type": "integer"
                                            },
                                            "sheetType": {
                                                "description": "The type of sheet. Defaults to GRID.\nThis field cannot be changed once set.",
                                                "enum": [
                                                    "SHEET_TYPE_UNSPECIFIED",
                                                    "GRID",
                                                    "OBJECT"
                                                ],
                                                "type": "string"
                                            },
                                            "tabColor": {
                                                "description": "The color of the tab in the UI.",
                                                "properties": {
                                                    "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "title": {
                                                "description": "The name of the sheet.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "updateSpreadsheetProperties": {
                                "description": "Updates the spreadsheet's properties.",
                                "properties": {
                                    "fields": {
                                        "description": "The fields that should be updated.  At least one field must be specified.\nThe root 'properties' is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
                                        "format": "google-fieldmask",
                                        "type": "string"
                                    },
                                    "properties": {
                                        "description": "The properties to update.",
                                        "properties": {
                                            "autoRecalc": {
                                                "description": "The amount of time to wait before volatile functions are recalculated.",
                                                "enum": [
                                                    "RECALCULATION_INTERVAL_UNSPECIFIED",
                                                    "ON_CHANGE",
                                                    "MINUTE",
                                                    "HOUR"
                                                ],
                                                "type": "string"
                                            },
                                            "defaultFormat": {
                                                "description": "The default format of all cells in the spreadsheet.\nCellData.effectiveFormat will not be set if\nthe cell's format is equal to this default format. This field is read-only.",
                                                "properties": {
                                                    "backgroundColor": {
                                                        "description": "The background color of the cell.",
                                                        "properties": {
                                                            "alpha": {
                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "blue": {
                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "green": {
                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            },
                                                            "red": {
                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                "format": "float",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "borders": {
                                                        "description": "The borders of the cell.",
                                                        "properties": {
                                                            "bottom": {
                                                                "description": "The bottom border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "left": {
                                                                "description": "The left border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "right": {
                                                                "description": "The right border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "top": {
                                                                "description": "The top border of the cell.",
                                                                "properties": {
                                                                    "color": {
                                                                        "description": "The color of the border.",
                                                                        "properties": {
                                                                            "alpha": {
                                                                                "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "blue": {
                                                                                "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "green": {
                                                                                "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            },
                                                                            "red": {
                                                                                "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                                "format": "float",
                                                                                "type": "number"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "style": {
                                                                        "description": "The style of the border.",
                                                                        "enum": [
                                                                            "STYLE_UNSPECIFIED",
                                                                            "DOTTED",
                                                                            "DASHED",
                                                                            "SOLID",
                                                                            "SOLID_MEDIUM",
                                                                            "SOLID_THICK",
                                                                            "NONE",
                                                                            "DOUBLE"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "width": {
                                                                        "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "horizontalAlignment": {
                                                        "description": "The horizontal alignment of the value in the cell.",
                                                        "enum": [
                                                            "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                            "LEFT",
                                                            "CENTER",
                                                            "RIGHT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "hyperlinkDisplayType": {
                                                        "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                        "enum": [
                                                            "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                            "LINKED",
                                                            "PLAIN_TEXT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "numberFormat": {
                                                        "description": "A format describing how number values should be represented to the user.",
                                                        "properties": {
                                                            "pattern": {
                                                                "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                                "enum": [
                                                                    "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                                    "TEXT",
                                                                    "NUMBER",
                                                                    "PERCENT",
                                                                    "CURRENCY",
                                                                    "DATE",
                                                                    "TIME",
                                                                    "DATE_TIME",
                                                                    "SCIENTIFIC"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "padding": {
                                                        "description": "The padding of the cell.",
                                                        "properties": {
                                                            "bottom": {
                                                                "description": "The bottom padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "left": {
                                                                "description": "The left padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "right": {
                                                                "description": "The right padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "top": {
                                                                "description": "The top padding of the cell.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "textDirection": {
                                                        "description": "The direction of the text in the cell.",
                                                        "enum": [
                                                            "TEXT_DIRECTION_UNSPECIFIED",
                                                            "LEFT_TO_RIGHT",
                                                            "RIGHT_TO_LEFT"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "textFormat": {
                                                        "description": "The format of the text in the cell (unless overridden by a format run).",
                                                        "properties": {
                                                            "bold": {
                                                                "description": "True if the text is bold.",
                                                                "type": "boolean"
                                                            },
                                                            "fontFamily": {
                                                                "description": "The font family.",
                                                                "type": "string"
                                                            },
                                                            "fontSize": {
                                                                "description": "The size of the font.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "foregroundColor": {
                                                                "description": "The foreground color of the text.",
                                                                "properties": {
                                                                    "alpha": {
                                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "blue": {
                                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "green": {
                                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    },
                                                                    "red": {
                                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                        "format": "float",
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "italic": {
                                                                "description": "True if the text is italicized.",
                                                                "type": "boolean"
                                                            },
                                                            "strikethrough": {
                                                                "description": "True if the text has a strikethrough.",
                                                                "type": "boolean"
                                                            },
                                                            "underline": {
                                                                "description": "True if the text is underlined.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "textRotation": {
                                                        "description": "The rotation applied to text in a cell",
                                                        "properties": {
                                                            "angle": {
                                                                "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "vertical": {
                                                                "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "verticalAlignment": {
                                                        "description": "The vertical alignment of the value in the cell.",
                                                        "enum": [
                                                            "VERTICAL_ALIGN_UNSPECIFIED",
                                                            "TOP",
                                                            "MIDDLE",
                                                            "BOTTOM"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "wrapStrategy": {
                                                        "description": "The wrap strategy for the value in the cell.",
                                                        "enum": [
                                                            "WRAP_STRATEGY_UNSPECIFIED",
                                                            "OVERFLOW_CELL",
                                                            "LEGACY_WRAP",
                                                            "CLIP",
                                                            "WRAP"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "iterativeCalculationSettings": {
                                                "description": "Determines whether and how circular references are resolved with iterative\ncalculation.  Absence of this field means that circular references will\nresult in calculation errors.",
                                                "properties": {
                                                    "convergenceThreshold": {
                                                        "description": "When iterative calculation is enabled and successive results differ by\nless than this threshold value, the calculation rounds stop.",
                                                        "format": "double",
                                                        "type": "number"
                                                    },
                                                    "maxIterations": {
                                                        "description": "When iterative calculation is enabled, the maximum number of calculation\nrounds to perform.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "locale": {
                                                "description": "The locale of the spreadsheet in one of the following formats:\n\n* an ISO 639-1 language code such as `en`\n\n* an ISO 639-2 language code such as `fil`, if no 639-1 code exists\n\n* a combination of the ISO language code and country code, such as `en_US`\n\nNote: when updating this field, not all locales/languages are supported.",
                                                "type": "string"
                                            },
                                            "timeZone": {
                                                "description": "The time zone of the spreadsheet, in CLDR format such as\n`America/New_York`. If the time zone isn't recognized, this may\nbe a custom time zone such as `GMT-07:00`.",
                                                "type": "string"
                                            },
                                            "title": {
                                                "description": "The title of the spreadsheet.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "responseIncludeGridData": {
                    "description": "True if grid data should be returned. Meaningful only if\nif include_spreadsheet_in_response is 'true'.\nThis parameter is ignored if a field mask was set in the request.",
                    "type": "boolean"
                },
                "responseRanges": {
                    "description": "Limits the ranges included in the response spreadsheet.\nMeaningful only if include_spreadsheet_response is 'true'.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    }
}